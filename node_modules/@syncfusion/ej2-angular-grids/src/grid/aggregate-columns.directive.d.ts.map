{"version":3,"file":"aggregate-columns.directive.d.ts","sources":["aggregate-columns.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ViewContainerRef } from '@angular/core';\nimport { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';\n/**\n * `e-aggregate->e-column` directive represent a aggregate column of the Angular Grid.\n * ```html\n * <ejs-grid [dataSource]='data' allowPaging='true' allowSorting='true'>\n *   <e-columns>\n *     <e-column field='ID' width='100'></e-column>\n *     <e-column field='name' headerText='Name' width='100'></e-column>\n *   </e-columns>\n *   <e-aggregates>\n *     <e-aggregate>\n *       <e-columns>\n *         <e-column field='ID' type='Min'></e-column>\n *       </e-columns>\n *      </e-aggregate>\n *    </e-aggregates>\n * </ejs-grid>\n * ```\n */\nexport declare class AggregateColumnDirective extends ComplexBase<AggregateColumnDirective> {\n    private viewContainerRef;\n    directivePropList: any;\n    /**\n     * Defines the aggregate type of a particular column.\n     * To use multiple aggregates for single column, specify the `type` as array.\n     * Types of aggregate are,\n     * * sum\n     * * average\n     * * max\n     * * min\n     * * count\n     * * truecount\n     * * falsecount\n     * * custom\n     * > Specify the `type` value as `custom` to use custom aggregation.\n     * @asptype string\n     * @default null\n     */\n    type: any;\n    /**\n     * Defines the column name to display the aggregate value. If `columnName` is not defined,\n     * then `field` name value will be assigned to the `columnName` property.\n     * @default null\n     */\n    columnName: any;\n    /**\n     * Defines a function to calculate custom aggregate value. The `type` value should be set to `custom`.\n     * To use custom aggregate value in the template, use the key as `${custom}`.\n     * **Total aggregation**: The custom function will be called with the whole data and the current `AggregateColumn` object.\n     * **Group aggregation**: This will be called with the current group details and the `AggregateColumn` object.\n     * @default null\n     */\n    customAggregate: any;\n    /**\n     * Defines the column name to perform aggregation.\n     * @default null\n     */\n    field: any;\n    /**\n     * Format is applied to a calculated value before it is displayed.\n     * Gets the format from the user, which can be standard or custom\n     * [`number`](../../common/internationalization/#number-formatting/)\n     * and [`date`](../../common/internationalization/#number-formatting/) formats.\n     * @asptype string\n     * @blazortype string\n     * @default null\n     */\n    format: any;\n    /**\n     * Defines the footer cell template as a string for the aggregate column.\n     * The `type` name should be used to access aggregate values inside the template.\n     *\n     * {% codeBlock src=\"grid/footer-template-api/index.ts\" %}{% endcodeBlock %}\n     *\n     * @default null\n     */\n    footerTemplate: any;\n    /**\n     * Defines the group footer cell template as a string for the aggregate column.\n     * The `type` name should be used to access aggregate values inside the template.\n     * Additionally, the following fields can be accessed in the template.\n     * * **field**: The current grouped field.\n     * * **key**: The current grouped value.\n     *\n     * {% codeBlock src=\"grid/group-footer-api/index.ts\" %}{% endcodeBlock %}\n     *\n     * @default null\n     */\n    groupFooterTemplate: any;\n    /**\n     * Defines the group caption cell template as a string for the aggregate column.\n     * The `type` name should be used to access aggregate values inside the template.\n     * Additionally, the following fields can be accessed in the template.\n     * * **field**: The current grouped field name.\n     * * **key**: The current grouped field value.\n     *\n     * {% codeBlock src=\"grid/group-caption-api/index.ts\" %}{% endcodeBlock %}\n     *\n     * @default null\n     */\n    groupCaptionTemplate: any;\n    constructor(viewContainerRef: ViewContainerRef);\n}\n/**\n * AggregateColumn Array Directive\n * @private\n */\nexport declare class AggregateColumnsDirective extends ArrayBase<AggregateColumnsDirective> {\n    constructor();\n}\n"]}