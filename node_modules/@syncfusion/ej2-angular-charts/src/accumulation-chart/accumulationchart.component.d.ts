import { ElementRef, ViewContainerRef, QueryList, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { AccumulationChart } from '@syncfusion/ej2-charts';
import { AccumulationSeriesCollectionDirective } from './series.directive';
import { AccumulationAnnotationsDirective } from './annotations.directive';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * AccumulationChart Component
 * ```html
 * <ejs-accumulationchart></ejs-accumulationchart>
 * ```
 */
export declare class AccumulationChartComponent extends AccumulationChart implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    context: any;
    tagObjects: any;
    childSeries: QueryList<AccumulationSeriesCollectionDirective>;
    childAnnotations: QueryList<AccumulationAnnotationsDirective>;
    tags: string[];
    dataSourceChange: any;
    tooltip_template: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AccumulationChartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AccumulationChartComponent, "ejs-accumulationchart", never, { "allowExport": "allowExport"; "annotations": "annotations"; "background": "background"; "backgroundImage": "backgroundImage"; "border": "border"; "center": "center"; "currencyCode": "currencyCode"; "dataSource": "dataSource"; "enableAnimation": "enableAnimation"; "enableBorderOnMouseMove": "enableBorderOnMouseMove"; "enableExport": "enableExport"; "enablePersistence": "enablePersistence"; "enableRtl": "enableRtl"; "enableSmartLabels": "enableSmartLabels"; "height": "height"; "highLightMode": "highLightMode"; "highlightPattern": "highlightPattern"; "isMultiSelect": "isMultiSelect"; "legendSettings": "legendSettings"; "locale": "locale"; "margin": "margin"; "selectedDataIndexes": "selectedDataIndexes"; "selectionMode": "selectionMode"; "selectionPattern": "selectionPattern"; "series": "series"; "subTitle": "subTitle"; "subTitleStyle": "subTitleStyle"; "theme": "theme"; "title": "title"; "titleStyle": "titleStyle"; "tooltip": "tooltip"; "useGroupingSeparator": "useGroupingSeparator"; "width": "width"; }, { "afterExport": "afterExport"; "animationComplete": "animationComplete"; "annotationRender": "annotationRender"; "beforePrint": "beforePrint"; "beforeResize": "beforeResize"; "chartMouseClick": "chartMouseClick"; "chartMouseDown": "chartMouseDown"; "chartMouseLeave": "chartMouseLeave"; "chartMouseMove": "chartMouseMove"; "chartMouseUp": "chartMouseUp"; "legendRender": "legendRender"; "load": "load"; "loaded": "loaded"; "pointClick": "pointClick"; "pointMove": "pointMove"; "pointRender": "pointRender"; "resized": "resized"; "seriesRender": "seriesRender"; "textRender": "textRender"; "tooltipRender": "tooltipRender"; "dataSourceChange": "dataSourceChange"; }, ["tooltip_template", "childSeries", "childAnnotations"], never>;
}

//# sourceMappingURL=accumulationchart.component.d.ts.map