{"version":3,"file":"ej2-angular-charts.umd.js","sources":["~/@syncfusion/ej2-angular-charts/src/bullet-chart/bulletchart-all.module.ts","~/@syncfusion/ej2-angular-charts/src/bullet-chart/bulletchart.module.ts","~/@syncfusion/ej2-angular-charts/src/bullet-chart/bulletchart.component.ts","~/@syncfusion/ej2-angular-charts/src/bullet-chart/ranges.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/stockchart-all.module.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/stockchart.module.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/stockchart.component.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/indicators.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/stockevents.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/periods.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/selecteddataindexes.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/annotations.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/rows.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/axes.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/series.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/trendlines.directive.ts","~/@syncfusion/ej2-angular-charts/src/smithchart/smithchart-all.module.ts","~/@syncfusion/ej2-angular-charts/src/smithchart/smithchart.module.ts","~/@syncfusion/ej2-angular-charts/src/smithchart/smithchart.component.ts","~/@syncfusion/ej2-angular-charts/src/smithchart/series.directive.ts","~/@syncfusion/ej2-angular-charts/src/sparkline/sparkline-all.module.ts","~/@syncfusion/ej2-angular-charts/src/sparkline/sparkline.module.ts","~/@syncfusion/ej2-angular-charts/src/sparkline/sparkline.component.ts","~/@syncfusion/ej2-angular-charts/src/sparkline/rangebandsettings.directive.ts","~/@syncfusion/ej2-angular-charts/src/range-navigator/rangenavigator-all.module.ts","~/@syncfusion/ej2-angular-charts/src/range-navigator/rangenavigator.module.ts","~/@syncfusion/ej2-angular-charts/src/range-navigator/rangenavigator.component.ts","~/@syncfusion/ej2-angular-charts/src/range-navigator/series.directive.ts","~/@syncfusion/ej2-angular-charts/src/accumulation-chart/accumulationchart-all.module.ts","~/@syncfusion/ej2-angular-charts/src/accumulation-chart/accumulationchart.module.ts","~/@syncfusion/ej2-angular-charts/src/accumulation-chart/accumulationchart.component.ts","~/@syncfusion/ej2-angular-charts/src/accumulation-chart/annotations.directive.ts","~/@syncfusion/ej2-angular-charts/src/accumulation-chart/series.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/chart-all.module.ts","~/@syncfusion/ej2-angular-charts/src/chart/chart.module.ts","~/@syncfusion/ej2-angular-charts/src/chart/chart.component.ts","~/@syncfusion/ej2-angular-charts/src/chart/indicators.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/selecteddataindexes.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/annotations.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/rangecolorsettings.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/columns.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/rows.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/axes.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/multilevellabels.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/categories.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/striplines.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/series.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/segments.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/trendlines.directive.ts"],"sourcesContent":["import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BulletRangeDirective, BulletRangeCollectionDirective } from './ranges.directive';\nimport { BulletChartComponent } from './bulletchart.component';\nimport { BulletChartModule } from './bulletchart.module';\nimport {BulletTooltip, BulletChartLegend} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ BulletTooltipService: ValueProvider = { provide: 'ChartsBulletTooltip', useValue: BulletTooltip};\nexport const /** @type {?} */ BulletChartLegendService: ValueProvider = { provide: 'ChartsBulletChartLegend', useValue: BulletChartLegend};\n/**\n * NgModule definition for the BulletChart component with providers.\n */\nexport class BulletChartAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, BulletChartModule],\n    exports: [\n        BulletChartModule\n    ],\n    providers:[\n        BulletTooltipService,\n        BulletChartLegendService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BulletChartAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBulletChartAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBulletChartAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BulletRangeDirective, BulletRangeCollectionDirective } from './ranges.directive';\nimport { BulletChartComponent } from './bulletchart.component';\n/**\n * NgModule definition for the BulletChart component.\n */\nexport class BulletChartModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        BulletChartComponent,\n        BulletRangeDirective,\n        BulletRangeCollectionDirective\n    ],\n    exports: [\n        BulletChartComponent,\n        BulletRangeDirective,\n        BulletRangeCollectionDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BulletChartModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBulletChartModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBulletChartModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { BulletChart } from '@syncfusion/ej2-charts';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { BulletRangeCollectionDirective } from './ranges.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['animation','border','categoryField','categoryLabelStyle','dataLabel','dataSource','enableGroupSeparator','enablePersistence','enableRtl','height','interval','labelFormat','labelPosition','labelStyle','legendSettings','locale','majorTickLines','margin','maximum','minimum','minorTickLines','minorTicksPerInterval','opposedPosition','orientation','query','ranges','subtitle','subtitleStyle','tabIndex','targetColor','targetField','targetTypes','targetWidth','theme','tickPosition','title','titlePosition','titleStyle','tooltip','type','valueBorder','valueField','valueFill','valueHeight','width'];\nexport const /** @type {?} */ outputs: string[] = ['beforePrint','bulletChartMouseClick','legendRender','load','loaded','tooltipRender','dataSourceChange'];\nexport const /** @type {?} */ twoWays: string[] = ['dataSource'];\n/**\n * BulletChart Component\n * ```html\n * <ejs-bulletchart></ejs-bulletchart>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class BulletChartComponent extends BulletChart implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childRanges: QueryList<BulletRangeCollectionDirective>;\npublic tags: string[] = ['ranges'];\npublic dataSourceChange: any;\n    \n    @Template()\npublic tooltip_template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsBulletTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsBulletChartLegend');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childRanges;\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-bulletchart',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childRanges: new ContentChild(BulletRangeCollectionDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate', ] },],\n};\n}\n\nfunction BulletChartComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nBulletChartComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBulletChartComponent.ctorParameters;\n/** @type {?} */\nBulletChartComponent.propDecorators;\n/** @type {?} */\nBulletChartComponent.prototype.context;\n/** @type {?} */\nBulletChartComponent.prototype.tagObjects;\n/** @type {?} */\nBulletChartComponent.prototype.childRanges;\n/** @type {?} */\nBulletChartComponent.prototype.tags;\n/** @type {?} */\nBulletChartComponent.prototype.dataSourceChange;\n/** @type {?} */\nBulletChartComponent.prototype.tooltip_template;\n/** @type {?} */\nBulletChartComponent.prototype.registerEvents;\n/** @type {?} */\nBulletChartComponent.prototype.addTwoWay;\n/** @type {?} */\nBulletChartComponent.prototype.ngEle;\n/** @type {?} */\nBulletChartComponent.prototype.srenderer;\n/** @type {?} */\nBulletChartComponent.prototype.viewContainerRef;\n/** @type {?} */\nBulletChartComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['color', 'end', 'index', 'legendImageUrl', 'name', 'opacity', 'shape'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * BulletRange Directive\n * ```html\n * <e-bullet-range-collection>\n * <e-bullet-range></e-bullet-range>\n * </e-bullet-range-collection>\n * ```\n */\nexport class BulletRangeDirective extends ComplexBase<BulletRangeDirective> {\npublic directivePropList: any;\n/**\n * Default value for qualitative range Color\n * \\@default null\n */\npublic color: any;\n/**\n * Default value for qualitative range end value\n * \\@default null\n */\npublic end: any;\n/**\n * Default value for qualitative range Color\n * \\@default null\n */\npublic index: any;\n/**\n * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.\n * \\@default ''\n */\npublic legendImageUrl: any;\n/**\n * Default value for qualitative range name\n * \\@default null\n */\npublic name: any;\n/**\n * Range opacity\n * \\@default 1\n */\npublic opacity: any;\n/**\n * The shape of the legend. Each ranges has its own legend shape. They are, \n * * Circle \n * * Rectangle \n * * Triangle \n * * Diamond \n * * Cross \n * * HorizontalLine \n * * VerticalLine \n * * Pentagon \n * * InvertedTriangle \n * * SeriesType \n * * Image\n * \\@default 'Rectangle'\n */\npublic shape: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-bullet-range-collection>e-bullet-range',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction BulletRangeDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nBulletRangeDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBulletRangeDirective.ctorParameters;\n/** @type {?} */\nBulletRangeDirective.prototype.directivePropList;\n/**\n * Default value for qualitative range Color\n * \\@default null\n * @type {?}\n */\nBulletRangeDirective.prototype.color;\n/**\n * Default value for qualitative range end value\n * \\@default null\n * @type {?}\n */\nBulletRangeDirective.prototype.end;\n/**\n * Default value for qualitative range Color\n * \\@default null\n * @type {?}\n */\nBulletRangeDirective.prototype.index;\n/**\n * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.\n * \\@default ''\n * @type {?}\n */\nBulletRangeDirective.prototype.legendImageUrl;\n/**\n * Default value for qualitative range name\n * \\@default null\n * @type {?}\n */\nBulletRangeDirective.prototype.name;\n/**\n * Range opacity\n * \\@default 1\n * @type {?}\n */\nBulletRangeDirective.prototype.opacity;\n/**\n * The shape of the legend. Each ranges has its own legend shape. They are, \n * * Circle \n * * Rectangle \n * * Triangle \n * * Diamond \n * * Cross \n * * HorizontalLine \n * * VerticalLine \n * * Pentagon \n * * InvertedTriangle \n * * SeriesType \n * * Image\n * \\@default 'Rectangle'\n * @type {?}\n */\nBulletRangeDirective.prototype.shape;\n/** @type {?} */\nBulletRangeDirective.prototype.viewContainerRef;\n}\n\n/**\n * BulletRange Array Directive\n */\nexport class BulletRangeCollectionDirective extends ArrayBase<BulletRangeCollectionDirective> {\nconstructor() {\n        super('ranges');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-bulletchart>e-bullet-range-collection',\n    queries: {\n        children: new ContentChildren(BulletRangeDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BulletRangeCollectionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nBulletRangeCollectionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBulletRangeCollectionDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockChartTrendlineDirective, StockChartTrendlinesDirective } from './trendlines.directive';\nimport { StockChartSeriesDirective, StockChartSeriesCollectionDirective } from './series.directive';\nimport { StockChartAxisDirective, StockChartAxesDirective } from './axes.directive';\nimport { StockChartRowDirective, StockChartRowsDirective } from './rows.directive';\nimport { StockChartAnnotationDirective, StockChartAnnotationsDirective } from './annotations.directive';\nimport { StockChartSelectedDataIndexDirective, StockChartSelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { StockChartPeriodDirective, StockChartPeriodsDirective } from './periods.directive';\nimport { StockEventDirective, StockEventsDirective } from './stockevents.directive';\nimport { StockChartIndicatorDirective, StockChartIndicatorsDirective } from './indicators.directive';\nimport { StockChartComponent } from './stockchart.component';\nimport { StockChartModule } from './stockchart.module';\nimport {StockLegend} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ StockLegendService: ValueProvider = { provide: 'ChartsStockLegend', useValue: StockLegend};\n/**\n * NgModule definition for the StockChart component with providers.\n */\nexport class StockChartAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, StockChartModule],\n    exports: [\n        StockChartModule\n    ],\n    providers:[\n        StockLegendService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockChartTrendlineDirective, StockChartTrendlinesDirective } from './trendlines.directive';\nimport { StockChartSeriesDirective, StockChartSeriesCollectionDirective } from './series.directive';\nimport { StockChartAxisDirective, StockChartAxesDirective } from './axes.directive';\nimport { StockChartRowDirective, StockChartRowsDirective } from './rows.directive';\nimport { StockChartAnnotationDirective, StockChartAnnotationsDirective } from './annotations.directive';\nimport { StockChartSelectedDataIndexDirective, StockChartSelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { StockChartPeriodDirective, StockChartPeriodsDirective } from './periods.directive';\nimport { StockEventDirective, StockEventsDirective } from './stockevents.directive';\nimport { StockChartIndicatorDirective, StockChartIndicatorsDirective } from './indicators.directive';\nimport { StockChartComponent } from './stockchart.component';\n/**\n * NgModule definition for the StockChart component.\n */\nexport class StockChartModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        StockChartComponent,\n        StockChartTrendlineDirective,\n        StockChartTrendlinesDirective,\n        StockChartSeriesDirective,\n        StockChartSeriesCollectionDirective,\n        StockChartAxisDirective,\n        StockChartAxesDirective,\n        StockChartRowDirective,\n        StockChartRowsDirective,\n        StockChartAnnotationDirective,\n        StockChartAnnotationsDirective,\n        StockChartSelectedDataIndexDirective,\n        StockChartSelectedDataIndexesDirective,\n        StockChartPeriodDirective,\n        StockChartPeriodsDirective,\n        StockEventDirective,\n        StockEventsDirective,\n        StockChartIndicatorDirective,\n        StockChartIndicatorsDirective\n    ],\n    exports: [\n        StockChartComponent,\n        StockChartTrendlineDirective,\n        StockChartTrendlinesDirective,\n        StockChartSeriesDirective,\n        StockChartSeriesCollectionDirective,\n        StockChartAxisDirective,\n        StockChartAxesDirective,\n        StockChartRowDirective,\n        StockChartRowsDirective,\n        StockChartAnnotationDirective,\n        StockChartAnnotationsDirective,\n        StockChartSelectedDataIndexDirective,\n        StockChartSelectedDataIndexesDirective,\n        StockChartPeriodDirective,\n        StockChartPeriodsDirective,\n        StockEventDirective,\n        StockEventsDirective,\n        StockChartIndicatorDirective,\n        StockChartIndicatorsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { StockChart } from '@syncfusion/ej2-charts';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { StockChartSeriesCollectionDirective } from './series.directive';\nimport { StockChartAxesDirective } from './axes.directive';\nimport { StockChartRowsDirective } from './rows.directive';\nimport { StockChartAnnotationsDirective } from './annotations.directive';\nimport { StockChartSelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { StockChartPeriodsDirective } from './periods.directive';\nimport { StockEventsDirective } from './stockevents.directive';\nimport { StockChartIndicatorsDirective } from './indicators.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['annotations','axes','background','border','chartArea','crosshair','dataSource','enableCustomRange','enablePeriodSelector','enablePersistence','enableRtl','enableSelector','exportType','height','indicatorType','indicators','isMultiSelect','isSelect','isTransposed','legendSettings','locale','margin','periods','primaryXAxis','primaryYAxis','rows','selectedDataIndexes','selectionMode','series','seriesType','stockEvents','theme','title','titleStyle','tooltip','trendlineType','width','zoomSettings'];\nexport const /** @type {?} */ outputs: string[] = ['axisLabelRender','legendClick','legendRender','load','loaded','onZooming','pointClick','pointMove','rangeChange','selectorRender','seriesRender','stockChartMouseClick','stockChartMouseDown','stockChartMouseLeave','stockChartMouseMove','stockChartMouseUp','stockEventRender','tooltipRender','dataSourceChange'];\nexport const /** @type {?} */ twoWays: string[] = ['dataSource'];\n/**\n * Stock Chart Component\n * ```html\n * <ejs-stockchart></ejs-stockchart>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class StockChartComponent extends StockChart implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childSeries: QueryList<StockChartSeriesCollectionDirective>;\npublic childAxes: QueryList<StockChartAxesDirective>;\npublic childRows: QueryList<StockChartRowsDirective>;\npublic childAnnotations: QueryList<StockChartAnnotationsDirective>;\npublic childSelectedDataIndexes: QueryList<StockChartSelectedDataIndexesDirective>;\npublic childPeriods: QueryList<StockChartPeriodsDirective>;\npublic childStockEvents: QueryList<StockEventsDirective>;\npublic childIndicators: QueryList<StockChartIndicatorsDirective>;\npublic tags: string[] = ['series', 'axes', 'rows', 'annotations', 'selectedDataIndexes', 'periods', 'stockEvents', 'indicators'];\npublic dataSourceChange: any;\n    \n    @Template()\npublic tooltip_template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsColumnSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSplineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSplineAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStripLine');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRangeAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsCrosshair');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDateTime');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsZoom');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDataLabel');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSelection');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsChartAnnotation');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsHiloSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsHiloOpenCloseSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsCandleSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsEmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationDistributionIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMacdIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAtrIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRsiIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMomentumIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStochasticIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsBollingerBands');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTrendlines');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRangeTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStockLegend');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childSeries;\n        if (this.childAxes) {\n                    this.tagObjects[1].instance = /** @type {?} */(( this.childAxes as any));\n                }\n        if (this.childRows) {\n                    this.tagObjects[2].instance = /** @type {?} */(( this.childRows as any));\n                }\n        if (this.childAnnotations) {\n                    this.tagObjects[3].instance = /** @type {?} */(( this.childAnnotations as any));\n                }\n        if (this.childSelectedDataIndexes) {\n                    this.tagObjects[4].instance = /** @type {?} */(( this.childSelectedDataIndexes as any));\n                }\n        if (this.childPeriods) {\n                    this.tagObjects[5].instance = /** @type {?} */(( this.childPeriods as any));\n                }\n        if (this.childStockEvents) {\n                    this.tagObjects[6].instance = /** @type {?} */(( this.childStockEvents as any));\n                }\n        if (this.childIndicators) {\n                    this.tagObjects[7].instance = /** @type {?} */(( this.childIndicators as any));\n                }\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-stockchart',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childSeries: new ContentChild(StockChartSeriesCollectionDirective), \n        childAxes: new ContentChild(StockChartAxesDirective), \n        childRows: new ContentChild(StockChartRowsDirective), \n        childAnnotations: new ContentChild(StockChartAnnotationsDirective), \n        childSelectedDataIndexes: new ContentChild(StockChartSelectedDataIndexesDirective), \n        childPeriods: new ContentChild(StockChartPeriodsDirective), \n        childStockEvents: new ContentChild(StockEventsDirective), \n        childIndicators: new ContentChild(StockChartIndicatorsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate', ] },],\n};\n}\n\nfunction StockChartComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartComponent.ctorParameters;\n/** @type {?} */\nStockChartComponent.propDecorators;\n/** @type {?} */\nStockChartComponent.prototype.context;\n/** @type {?} */\nStockChartComponent.prototype.tagObjects;\n/** @type {?} */\nStockChartComponent.prototype.childSeries;\n/** @type {?} */\nStockChartComponent.prototype.childAxes;\n/** @type {?} */\nStockChartComponent.prototype.childRows;\n/** @type {?} */\nStockChartComponent.prototype.childAnnotations;\n/** @type {?} */\nStockChartComponent.prototype.childSelectedDataIndexes;\n/** @type {?} */\nStockChartComponent.prototype.childPeriods;\n/** @type {?} */\nStockChartComponent.prototype.childStockEvents;\n/** @type {?} */\nStockChartComponent.prototype.childIndicators;\n/** @type {?} */\nStockChartComponent.prototype.tags;\n/** @type {?} */\nStockChartComponent.prototype.dataSourceChange;\n/** @type {?} */\nStockChartComponent.prototype.tooltip_template;\n/** @type {?} */\nStockChartComponent.prototype.registerEvents;\n/** @type {?} */\nStockChartComponent.prototype.addTwoWay;\n/** @type {?} */\nStockChartComponent.prototype.ngEle;\n/** @type {?} */\nStockChartComponent.prototype.srenderer;\n/** @type {?} */\nStockChartComponent.prototype.viewContainerRef;\n/** @type {?} */\nStockChartComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'bandColor', 'close', 'dPeriod', 'dashArray', 'dataSource', 'fastPeriod', 'field', 'fill', 'high', 'kPeriod', 'low', 'lowerLine', 'macdLine', 'macdNegativeColor', 'macdPositiveColor', 'macdType', 'open', 'overBought', 'overSold', 'period', 'periodLine', 'pointColorMapping', 'query', 'seriesName', 'showZones', 'slowPeriod', 'standardDeviation', 'type', 'upperLine', 'volume', 'width', 'xAxisName', 'xName', 'yAxisName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Indicator Directive\n * ```html\n * <e-stockchart-indicators>\n * <e-stockchart-indicator></e-stockchart-indicator>\n * </e-stockchart-indicators>\n * ```\n */\nexport class StockChartIndicatorDirective extends ComplexBase<StockChartIndicatorDirective> {\npublic directivePropList: any;\n/**\n * Defines the type of the technical indicator\n * \\@default 'Sma'\n */\npublic type: any;\n/**\n * Options to customizing animation for the series.\n */\npublic animation: any;\n/**\n * Options for customizing the BollingerBand in the indicator.\n * \\@default 'rgba(211,211,211,0.25)'\n */\npublic bandColor: any;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic close: any;\n/**\n * Defines the period, the price changes over which will define the %D value in stochastic indicators\n * \\@default 3\n */\npublic dPeriod: any;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n */\npublic dashArray: any;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * \\@default ''\n */\npublic dataSource: any;\n/**\n * Sets the fast period to define the Macd line\n * \\@default 26\n */\npublic fastPeriod: any;\n/**\n * Defines the field to compare the current value with previous values\n * \\@default 'Close'\n */\npublic field: any;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n */\npublic fill: any;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic high: any;\n/**\n * Defines the look back period, the price changes over which will define the %K value in stochastic indicators\n * \\@default 14\n */\npublic kPeriod: any;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic low: any;\n/**\n * Defines the appearance of lower line in technical indicators\n */\npublic lowerLine: any;\n/**\n * Defines the appearance of the the MacdLine of Macd indicator\n * \\@default { color: '#ff9933', width: 2 }\n */\npublic macdLine: any;\n/**\n * Defines the color of the negative bars in Macd indicators\n * \\@default '#e74c3d'\n */\npublic macdNegativeColor: any;\n/**\n * Defines the color of the positive bars in Macd indicators\n * \\@default '#2ecd71'\n */\npublic macdPositiveColor: any;\n/**\n * Defines the type of the Macd indicator.\n * \\@default 'Both'\n */\npublic macdType: any;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic open: any;\n/**\n * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators\n * \\@default 80\n */\npublic overBought: any;\n/**\n * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators\n * \\@default 20\n */\npublic overSold: any;\n/**\n * Defines the period, the price changes over which will be considered to predict the trend\n * \\@default 14\n */\npublic period: any;\n/**\n * Defines the appearance of period line in technical indicators\n */\npublic periodLine: any;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n */\npublic pointColorMapping: any;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * \\@default null\n */\npublic query: any;\n/**\n * Defines the name of the series, the data of which has to be depicted as indicator\n * \\@default ''\n */\npublic seriesName: any;\n/**\n * Enables/Disables the over-bought and over-sold regions\n * \\@default true\n */\npublic showZones: any;\n/**\n * Sets the slow period to define the Macd line\n * \\@default 12\n */\npublic slowPeriod: any;\n/**\n * Sets the standard deviation values that helps to define the upper and lower bollinger bands\n * \\@default 2\n */\npublic standardDeviation: any;\n/**\n * Defines the appearance of the upper line in technical indicators\n */\npublic upperLine: any;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * \\@default ''\n */\npublic volume: any;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n */\npublic width: any;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n */\npublic xAxisName: any;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic xName: any;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n */\npublic yAxisName: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-indicators>e-stockchart-indicator',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartIndicatorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartIndicatorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartIndicatorDirective.ctorParameters;\n/** @type {?} */\nStockChartIndicatorDirective.prototype.directivePropList;\n/**\n * Defines the type of the technical indicator\n * \\@default 'Sma'\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.type;\n/**\n * Options to customizing animation for the series.\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.animation;\n/**\n * Options for customizing the BollingerBand in the indicator.\n * \\@default 'rgba(211,211,211,0.25)'\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.bandColor;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.close;\n/**\n * Defines the period, the price changes over which will define the %D value in stochastic indicators\n * \\@default 3\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.dPeriod;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.dashArray;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.dataSource;\n/**\n * Sets the fast period to define the Macd line\n * \\@default 26\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.fastPeriod;\n/**\n * Defines the field to compare the current value with previous values\n * \\@default 'Close'\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.field;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.fill;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.high;\n/**\n * Defines the look back period, the price changes over which will define the %K value in stochastic indicators\n * \\@default 14\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.kPeriod;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.low;\n/**\n * Defines the appearance of lower line in technical indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.lowerLine;\n/**\n * Defines the appearance of the the MacdLine of Macd indicator\n * \\@default { color: '#ff9933', width: 2 }\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.macdLine;\n/**\n * Defines the color of the negative bars in Macd indicators\n * \\@default '#e74c3d'\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.macdNegativeColor;\n/**\n * Defines the color of the positive bars in Macd indicators\n * \\@default '#2ecd71'\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.macdPositiveColor;\n/**\n * Defines the type of the Macd indicator.\n * \\@default 'Both'\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.macdType;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.open;\n/**\n * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators\n * \\@default 80\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.overBought;\n/**\n * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators\n * \\@default 20\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.overSold;\n/**\n * Defines the period, the price changes over which will be considered to predict the trend\n * \\@default 14\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.period;\n/**\n * Defines the appearance of period line in technical indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.periodLine;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.pointColorMapping;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * \\@default null\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.query;\n/**\n * Defines the name of the series, the data of which has to be depicted as indicator\n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.seriesName;\n/**\n * Enables/Disables the over-bought and over-sold regions\n * \\@default true\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.showZones;\n/**\n * Sets the slow period to define the Macd line\n * \\@default 12\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.slowPeriod;\n/**\n * Sets the standard deviation values that helps to define the upper and lower bollinger bands\n * \\@default 2\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.standardDeviation;\n/**\n * Defines the appearance of the upper line in technical indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.upperLine;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.volume;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.width;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.xAxisName;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.xName;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.yAxisName;\n/** @type {?} */\nStockChartIndicatorDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartIndicator Array Directive\n */\nexport class StockChartIndicatorsDirective extends ArrayBase<StockChartIndicatorsDirective> {\nconstructor() {\n        super('indicators');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-indicators',\n    queries: {\n        children: new ContentChildren(StockChartIndicatorDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartIndicatorsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartIndicatorsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartIndicatorsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['background', 'border', 'date', 'description', 'placeAt', 'seriesIndexes', 'showOnSeries', 'text', 'textStyle', 'type'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * StockEvents\n * ```html\n * <e-stockchart-stockevents>\n * <e-stockchart-stockevent></e-stockchart-stockevent>\n * </e-stockchart-stockevents>\n * ```\n */\nexport class StockEventDirective extends ComplexBase<StockEventDirective> {\npublic directivePropList: any;\n/**\n * Specifies type of stock events \n * * Circle \n * * Square \n * * Flag \n * * Text \n * * Sign \n * * Triangle \n * * InvertedTriangle \n * * ArrowUp \n * * ArrowDown \n * * ArrowLeft \n * * ArrowRight\n * \\@default 'Circle'\n */\npublic type: any;\n/**\n * The background of the stock event that accepts value in hex and rgba as a valid CSS color string.\n * \\@default 'transparent'\n */\npublic background: any;\n/**\n * Options to customize the border of the stock events.\n */\npublic border: any;\n/**\n * Date value of stock event in which stock event shows.\n */\npublic date: any;\n/**\n * Specifies the description for the chart which renders in tooltip for stock event.\n */\npublic description: any;\n/**\n * Corresponding values in which stock event placed. \n * * Close \n * * Open \n * * High \n * * Close\n * \\@default 'close'\n */\npublic placeAt: any;\n/**\n * To render stock events in particular series. \n * By default stock events will render for all series.\n * \\@default []\n */\npublic seriesIndexes: any;\n/**\n * Enables the stock events to be render on series. If it disabled, stock event rendered on primaryXAxis.\n * \\@default true\n */\npublic showOnSeries: any;\n/**\n * Specifies the text for the stock chart text.\n */\npublic text: any;\n/**\n * Options to customize the styles for stock events text.\n */\npublic textStyle: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-indicators>e-stockchart-stockevent',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockEventDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockEventDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockEventDirective.ctorParameters;\n/** @type {?} */\nStockEventDirective.prototype.directivePropList;\n/**\n * Specifies type of stock events \n * * Circle \n * * Square \n * * Flag \n * * Text \n * * Sign \n * * Triangle \n * * InvertedTriangle \n * * ArrowUp \n * * ArrowDown \n * * ArrowLeft \n * * ArrowRight\n * \\@default 'Circle'\n * @type {?}\n */\nStockEventDirective.prototype.type;\n/**\n * The background of the stock event that accepts value in hex and rgba as a valid CSS color string.\n * \\@default 'transparent'\n * @type {?}\n */\nStockEventDirective.prototype.background;\n/**\n * Options to customize the border of the stock events.\n * @type {?}\n */\nStockEventDirective.prototype.border;\n/**\n * Date value of stock event in which stock event shows.\n * @type {?}\n */\nStockEventDirective.prototype.date;\n/**\n * Specifies the description for the chart which renders in tooltip for stock event.\n * @type {?}\n */\nStockEventDirective.prototype.description;\n/**\n * Corresponding values in which stock event placed. \n * * Close \n * * Open \n * * High \n * * Close\n * \\@default 'close'\n * @type {?}\n */\nStockEventDirective.prototype.placeAt;\n/**\n * To render stock events in particular series. \n * By default stock events will render for all series.\n * \\@default []\n * @type {?}\n */\nStockEventDirective.prototype.seriesIndexes;\n/**\n * Enables the stock events to be render on series. If it disabled, stock event rendered on primaryXAxis.\n * \\@default true\n * @type {?}\n */\nStockEventDirective.prototype.showOnSeries;\n/**\n * Specifies the text for the stock chart text.\n * @type {?}\n */\nStockEventDirective.prototype.text;\n/**\n * Options to customize the styles for stock events text.\n * @type {?}\n */\nStockEventDirective.prototype.textStyle;\n/** @type {?} */\nStockEventDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockEvent Array Directive\n */\nexport class StockEventsDirective extends ArrayBase<StockEventsDirective> {\nconstructor() {\n        super('stockevents');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-stockevents',\n    queries: {\n        children: new ContentChildren(StockEventDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockEventsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockEventsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockEventsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['interval', 'intervalType', 'selected', 'text'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Indicator Directive\n * ```html\n * <e-stockchart-periods>\n * <e-stockchart-period></e-stockchart-period>\n * </e-stockchart-periods>\n * ```\n */\nexport class StockChartPeriodDirective extends ComplexBase<StockChartPeriodDirective> {\npublic directivePropList: any;\n/**\n * Count value for the button\n * \\@default 1\n */\npublic interval: any;\n/**\n * IntervalType of button\n * \\@default 'Years'\n */\npublic intervalType: any;\n/**\n * To select the default period\n * \\@default false\n */\npublic selected: any;\n/**\n * Text to be displayed on the button\n * \\@default null\n */\npublic text: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-indicators>e-stockchart-period',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartPeriodDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartPeriodDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartPeriodDirective.ctorParameters;\n/** @type {?} */\nStockChartPeriodDirective.prototype.directivePropList;\n/**\n * Count value for the button\n * \\@default 1\n * @type {?}\n */\nStockChartPeriodDirective.prototype.interval;\n/**\n * IntervalType of button\n * \\@default 'Years'\n * @type {?}\n */\nStockChartPeriodDirective.prototype.intervalType;\n/**\n * To select the default period\n * \\@default false\n * @type {?}\n */\nStockChartPeriodDirective.prototype.selected;\n/**\n * Text to be displayed on the button\n * \\@default null\n * @type {?}\n */\nStockChartPeriodDirective.prototype.text;\n/** @type {?} */\nStockChartPeriodDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartPeriod Array Directive\n */\nexport class StockChartPeriodsDirective extends ArrayBase<StockChartPeriodsDirective> {\nconstructor() {\n        super('periods');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-periods',\n    queries: {\n        children: new ContentChildren(StockChartPeriodDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartPeriodsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartPeriodsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartPeriodsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['point', 'series'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Selected Data Directive\n * ```html\n * <e-selecteddataindexes><e-selecteddataindex></e-selecteddataindex><e-selecteddataindexes>\n * ```\n */\nexport class StockChartSelectedDataIndexDirective extends ComplexBase<StockChartSelectedDataIndexDirective> {\npublic directivePropList: any;\n/**\n * Specifies index of point\n * \\@default 0\n * \\@asptype int\n */\npublic point: any;\n/**\n * Specifies index of series\n * \\@default 0\n * \\@asptype int\n */\npublic series: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart-selectedDataIndexes>e-stockchart-selectedDataIndex',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartSelectedDataIndexDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartSelectedDataIndexDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartSelectedDataIndexDirective.ctorParameters;\n/** @type {?} */\nStockChartSelectedDataIndexDirective.prototype.directivePropList;\n/**\n * Specifies index of point\n * \\@default 0\n * \\@asptype int\n * @type {?}\n */\nStockChartSelectedDataIndexDirective.prototype.point;\n/**\n * Specifies index of series\n * \\@default 0\n * \\@asptype int\n * @type {?}\n */\nStockChartSelectedDataIndexDirective.prototype.series;\n/** @type {?} */\nStockChartSelectedDataIndexDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartSelectedDataIndex Array Directive\n */\nexport class StockChartSelectedDataIndexesDirective extends ArrayBase<StockChartSelectedDataIndexesDirective> {\nconstructor() {\n        super('selecteddataindexes');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-selectedDataIndexes',\n    queries: {\n        children: new ContentChildren(StockChartSelectedDataIndexDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartSelectedDataIndexesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartSelectedDataIndexesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartSelectedDataIndexesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['content', 'coordinateUnits', 'description', 'horizontalAlignment', 'region', 'verticalAlignment', 'x', 'xAxisName', 'y', 'yAxisName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Annotation Directive\n * ```html\n * <e-stockchart-annotations><e-stockchart-annotation></e-stockchart-annotation><e-stockchart-annotations>\n * ```\n */\nexport class StockChartAnnotationDirective extends ComplexBase<StockChartAnnotationDirective> {\npublic directivePropList: any;\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n * \\@default 'Pixel'\n */\npublic coordinateUnits: any;\n/**\n * Information about annotation for assistive technology.\n * \\@default null\n */\npublic description: any;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as left side. \n * * Far - Align the annotation element as right side. \n * * Center - Align the annotation element as mid point.\n * \\@default 'Center'\n */\npublic horizontalAlignment: any;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n * \\@default 'Chart'\n */\npublic region: any;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n * \\@default 'Middle'\n */\npublic verticalAlignment: any;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n */\npublic x: any;\n/**\n * The name of horizontal axis associated with the annotation. \n * It requires `axes` of chart.\n * \\@default null\n */\npublic xAxisName: any;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n */\npublic y: any;\n/**\n * The name of vertical axis associated with the annotation. \n * It requires `axes` of chart.\n * \\@default null\n */\npublic yAxisName: any;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n * \\@default null\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart-annotations>e-stockchart-annotation',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction StockChartAnnotationDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartAnnotationDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartAnnotationDirective.ctorParameters;\n/** @type {?} */\nStockChartAnnotationDirective.propDecorators;\n/** @type {?} */\nStockChartAnnotationDirective.prototype.directivePropList;\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n * \\@default 'Pixel'\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.coordinateUnits;\n/**\n * Information about annotation for assistive technology.\n * \\@default null\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.description;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as left side. \n * * Far - Align the annotation element as right side. \n * * Center - Align the annotation element as mid point.\n * \\@default 'Center'\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.horizontalAlignment;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n * \\@default 'Chart'\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.region;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n * \\@default 'Middle'\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.verticalAlignment;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.x;\n/**\n * The name of horizontal axis associated with the annotation. \n * It requires `axes` of chart.\n * \\@default null\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.xAxisName;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.y;\n/**\n * The name of vertical axis associated with the annotation. \n * It requires `axes` of chart.\n * \\@default null\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.yAxisName;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n * \\@default null\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.content;\n/** @type {?} */\nStockChartAnnotationDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartAnnotation Array Directive\n */\nexport class StockChartAnnotationsDirective extends ArrayBase<StockChartAnnotationsDirective> {\nconstructor() {\n        super('annotations');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-annotations',\n    queries: {\n        children: new ContentChildren(StockChartAnnotationDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartAnnotationsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartAnnotationsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartAnnotationsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['border', 'height'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Row Directive\n * ```html\n * <e-rows><e-row></e-row><e-rows>\n * ```\n */\nexport class StockChartRowDirective extends ComplexBase<StockChartRowDirective> {\npublic directivePropList: any;\n/**\n * Options to customize the border of the rows.\n */\npublic border: any;\n/**\n * The height of the row as a string accept input both as '100px' and '100%'. \n * If specified as '100%, row renders to the full height of its chart.\n * \\@default '100%'\n */\npublic height: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-rows>e-striplines>e-stockchart-row',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartRowDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartRowDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartRowDirective.ctorParameters;\n/** @type {?} */\nStockChartRowDirective.prototype.directivePropList;\n/**\n * Options to customize the border of the rows.\n * @type {?}\n */\nStockChartRowDirective.prototype.border;\n/**\n * The height of the row as a string accept input both as '100px' and '100%'. \n * If specified as '100%, row renders to the full height of its chart.\n * \\@default '100%'\n * @type {?}\n */\nStockChartRowDirective.prototype.height;\n/** @type {?} */\nStockChartRowDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartRow Array Directive\n */\nexport class StockChartRowsDirective extends ArrayBase<StockChartRowsDirective> {\nconstructor() {\n        super('rows');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-rows',\n    queries: {\n        children: new ContentChildren(StockChartRowDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartRowsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartRowsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartRowsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['coefficient', 'crossesAt', 'crossesInAxis', 'crosshairTooltip', 'description', 'desiredIntervals', 'edgeLabelPlacement', 'enableAutoIntervalOnZooming', 'enableTrim', 'interval', 'intervalType', 'isInversed', 'labelFormat', 'labelIntersectAction', 'labelPlacement', 'labelPosition', 'labelRotation', 'labelStyle', 'lineStyle', 'logBase', 'majorGridLines', 'majorTickLines', 'maximum', 'maximumLabelWidth', 'maximumLabels', 'minimum', 'minorGridLines', 'minorTickLines', 'minorTicksPerInterval', 'name', 'opposedPosition', 'placeNextToAxisLine', 'plotOffset', 'rangePadding', 'rowIndex', 'skeleton', 'skeletonType', 'span', 'startAngle', 'stripLines', 'tabIndex', 'tickPosition', 'title', 'titleStyle', 'valueType', 'visible', 'zoomFactor', 'zoomPosition'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Axis Directive\n * ```html\n * <e-stockchart-axes><e-stockchart-axis></e-stockchart-axis></e-stockchart-axes>\n * ```\n */\nexport class StockChartAxisDirective extends ComplexBase<StockChartAxisDirective> {\npublic directivePropList: any;\n/**\n * The polar radar radius position.\n * \\@default 100\n */\npublic coefficient: any;\n/**\n * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.\n * \\@default null\n */\npublic crossesAt: any;\n/**\n * Specifies axis name with which the axis line has to be crossed\n * \\@default null\n */\npublic crossesInAxis: any;\n/**\n * Options to customize the crosshair ToolTip.\n */\npublic crosshairTooltip: any;\n/**\n * Description for axis and its element.\n * \\@default null\n */\npublic description: any;\n/**\n * With this property, you can request axis to calculate intervals approximately equal to your specified interval.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic desiredIntervals: any;\n/**\n * Specifies the position of labels at the edge of the axis.They are, \n * * None: No action will be performed. \n * * Hide: Edge label will be hidden. \n * * Shift: Shifts the edge labels.\n * \\@default 'None'\n */\npublic edgeLabelPlacement: any;\n/**\n * If set to true, axis interval will be calculated automatically with respect to the zoomed range.\n * \\@default true\n */\npublic enableAutoIntervalOnZooming: any;\n/**\n * Specifies the Trim property for an axis.\n * \\@default false\n */\npublic enableTrim: any;\n/**\n * Specifies the interval for an axis.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic interval: any;\n/**\n * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are, \n * * Auto: Defines the interval of the axis based on data. \n * * Years: Defines the interval of the axis in years. \n * * Months: Defines the interval of the axis in months. \n * * Days: Defines the interval of the axis in days. \n * * Hours: Defines the interval of the axis in hours. \n * * Minutes: Defines the interval of the axis in minutes.\n * \\@default 'Auto'\n */\npublic intervalType: any;\n/**\n * It specifies whether the axis to be rendered in inversed manner or not.\n * \\@default false\n */\npublic isInversed: any;\n/**\n * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc. \n * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.\n * \\@default ''\n */\npublic labelFormat: any;\n/**\n * Specifies the actions like `Hide`, `Rotate45`, and `Rotate90` when the axis labels intersect with each other.They are, \n * * None: Shows all the labels. \n * * Hide: Hides the label when it intersects. \n * * Rotate45: Rotates the label to 45 degree when it intersects. \n * * Rotate90: Rotates the label to 90 degree when it intersects.\n * \\@default Hide\n */\npublic labelIntersectAction: any;\n/**\n * Specifies the placement of a label for category axis. They are, \n * * betweenTicks: Renders the label between the ticks. \n * * onTicks: Renders the label on the ticks.\n * \\@default 'BetweenTicks'\n */\npublic labelPlacement: any;\n/**\n * Specifies the placement of a labels to the axis line. They are, \n * * inside: Renders the labels inside to the axis line. \n * * outside: Renders the labels outside to the axis line.\n * \\@default 'Outside'\n */\npublic labelPosition: any;\n/**\n * The angle to which the axis label gets rotated.\n * \\@default 0\n */\npublic labelRotation: any;\n/**\n * Options to customize the axis label.\n */\npublic labelStyle: any;\n/**\n * Options for customizing axis lines.\n */\npublic lineStyle: any;\n/**\n * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.\n * \\@default 10\n */\npublic logBase: any;\n/**\n * Options for customizing major grid lines.\n */\npublic majorGridLines: any;\n/**\n * Options for customizing major tick lines.\n */\npublic majorTickLines: any;\n/**\n * Specifies the maximum range of an axis.\n * \\@default null\n */\npublic maximum: any;\n/**\n * Specifies the maximum width of an axis label.\n * \\@default 34.\n */\npublic maximumLabelWidth: any;\n/**\n * The maximum number of label count per 100 pixels with respect to the axis length.\n * \\@default 3\n */\npublic maximumLabels: any;\n/**\n * Specifies the minimum range of an axis.\n * \\@default null\n */\npublic minimum: any;\n/**\n * Options for customizing minor grid lines.\n */\npublic minorGridLines: any;\n/**\n * Options for customizing minor tick lines.\n */\npublic minorTickLines: any;\n/**\n * Specifies the number of minor ticks per interval.\n * \\@default 0\n */\npublic minorTicksPerInterval: any;\n/**\n * Unique identifier of an axis. \n * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.\n * \\@default ''\n */\npublic name: any;\n/**\n * If set to true, the axis will render at the opposite side of its default position.\n * \\@default false\n */\npublic opposedPosition: any;\n/**\n * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line\n * \\@default true\n */\npublic placeNextToAxisLine: any;\n/**\n * Left and right padding for the plot area in pixels.\n * \\@default 0\n */\npublic plotOffset: any;\n/**\n * Specifies the padding for the axis range in terms of interval.They are, \n * * none: Padding cannot be applied to the axis. \n * * normal: Padding is applied to the axis based on the range calculation. \n * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range. \n * * round: Axis range is rounded to the nearest possible value divided by the interval.\n * \\@default 'Auto'\n */\npublic rangePadding: any;\n/**\n * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`. \n * \n * \\@default 0\n */\npublic rowIndex: any;\n/**\n * Specifies the skeleton format in which the dateTime format will process.\n * \\@default ''\n */\npublic skeleton: any;\n/**\n * It specifies the type of format to be used in dateTime format process.\n * \\@default 'DateTime'\n */\npublic skeletonType: any;\n/**\n * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.\n * \\@default 1\n */\npublic span: any;\n/**\n * The start angle for the series.\n * \\@default 0\n */\npublic startAngle: any;\n/**\n * Specifies the stripLine collection for the axis\n */\npublic stripLines: any;\n/**\n * TabIndex value for the axis.\n * \\@default 2\n */\npublic tabIndex: any;\n/**\n * Specifies the placement of a ticks to the axis line. They are, \n * * inside: Renders the ticks inside to the axis line. \n * * outside: Renders the ticks outside to the axis line.\n * \\@default 'Outside'\n */\npublic tickPosition: any;\n/**\n * Specifies the title of an axis.\n * \\@default ''\n */\npublic title: any;\n/**\n * Options for customizing the axis title.\n */\npublic titleStyle: any;\n/**\n * Specifies the type of data the axis is handling. \n * * Double:  Renders a numeric axis. \n * * DateTime: Renders a dateTime axis. \n * * Category: Renders a category axis. \n * * Logarithmic: Renders a log axis.\n * \\@default 'Double'\n * \\@blazortype Syncfusion.EJ2.Blazor.Charts.ValueType\n * \\@isenumeration true\n */\npublic valueType: any;\n/**\n * If set to true, axis label will be visible.\n * \\@default true\n */\npublic visible: any;\n/**\n * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.\n * \\@default 1\n */\npublic zoomFactor: any;\n/**\n * Position of the zoomed axis. Value ranges from 0 to 1.\n * \\@default 0\n */\npublic zoomPosition: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-axes>e-stockchart-axis',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartAxisDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartAxisDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartAxisDirective.ctorParameters;\n/** @type {?} */\nStockChartAxisDirective.prototype.directivePropList;\n/**\n * The polar radar radius position.\n * \\@default 100\n * @type {?}\n */\nStockChartAxisDirective.prototype.coefficient;\n/**\n * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.\n * \\@default null\n * @type {?}\n */\nStockChartAxisDirective.prototype.crossesAt;\n/**\n * Specifies axis name with which the axis line has to be crossed\n * \\@default null\n * @type {?}\n */\nStockChartAxisDirective.prototype.crossesInAxis;\n/**\n * Options to customize the crosshair ToolTip.\n * @type {?}\n */\nStockChartAxisDirective.prototype.crosshairTooltip;\n/**\n * Description for axis and its element.\n * \\@default null\n * @type {?}\n */\nStockChartAxisDirective.prototype.description;\n/**\n * With this property, you can request axis to calculate intervals approximately equal to your specified interval.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStockChartAxisDirective.prototype.desiredIntervals;\n/**\n * Specifies the position of labels at the edge of the axis.They are, \n * * None: No action will be performed. \n * * Hide: Edge label will be hidden. \n * * Shift: Shifts the edge labels.\n * \\@default 'None'\n * @type {?}\n */\nStockChartAxisDirective.prototype.edgeLabelPlacement;\n/**\n * If set to true, axis interval will be calculated automatically with respect to the zoomed range.\n * \\@default true\n * @type {?}\n */\nStockChartAxisDirective.prototype.enableAutoIntervalOnZooming;\n/**\n * Specifies the Trim property for an axis.\n * \\@default false\n * @type {?}\n */\nStockChartAxisDirective.prototype.enableTrim;\n/**\n * Specifies the interval for an axis.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStockChartAxisDirective.prototype.interval;\n/**\n * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are, \n * * Auto: Defines the interval of the axis based on data. \n * * Years: Defines the interval of the axis in years. \n * * Months: Defines the interval of the axis in months. \n * * Days: Defines the interval of the axis in days. \n * * Hours: Defines the interval of the axis in hours. \n * * Minutes: Defines the interval of the axis in minutes.\n * \\@default 'Auto'\n * @type {?}\n */\nStockChartAxisDirective.prototype.intervalType;\n/**\n * It specifies whether the axis to be rendered in inversed manner or not.\n * \\@default false\n * @type {?}\n */\nStockChartAxisDirective.prototype.isInversed;\n/**\n * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc. \n * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.\n * \\@default ''\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelFormat;\n/**\n * Specifies the actions like `Hide`, `Rotate45`, and `Rotate90` when the axis labels intersect with each other.They are, \n * * None: Shows all the labels. \n * * Hide: Hides the label when it intersects. \n * * Rotate45: Rotates the label to 45 degree when it intersects. \n * * Rotate90: Rotates the label to 90 degree when it intersects.\n * \\@default Hide\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelIntersectAction;\n/**\n * Specifies the placement of a label for category axis. They are, \n * * betweenTicks: Renders the label between the ticks. \n * * onTicks: Renders the label on the ticks.\n * \\@default 'BetweenTicks'\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelPlacement;\n/**\n * Specifies the placement of a labels to the axis line. They are, \n * * inside: Renders the labels inside to the axis line. \n * * outside: Renders the labels outside to the axis line.\n * \\@default 'Outside'\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelPosition;\n/**\n * The angle to which the axis label gets rotated.\n * \\@default 0\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelRotation;\n/**\n * Options to customize the axis label.\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelStyle;\n/**\n * Options for customizing axis lines.\n * @type {?}\n */\nStockChartAxisDirective.prototype.lineStyle;\n/**\n * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.\n * \\@default 10\n * @type {?}\n */\nStockChartAxisDirective.prototype.logBase;\n/**\n * Options for customizing major grid lines.\n * @type {?}\n */\nStockChartAxisDirective.prototype.majorGridLines;\n/**\n * Options for customizing major tick lines.\n * @type {?}\n */\nStockChartAxisDirective.prototype.majorTickLines;\n/**\n * Specifies the maximum range of an axis.\n * \\@default null\n * @type {?}\n */\nStockChartAxisDirective.prototype.maximum;\n/**\n * Specifies the maximum width of an axis label.\n * \\@default 34.\n * @type {?}\n */\nStockChartAxisDirective.prototype.maximumLabelWidth;\n/**\n * The maximum number of label count per 100 pixels with respect to the axis length.\n * \\@default 3\n * @type {?}\n */\nStockChartAxisDirective.prototype.maximumLabels;\n/**\n * Specifies the minimum range of an axis.\n * \\@default null\n * @type {?}\n */\nStockChartAxisDirective.prototype.minimum;\n/**\n * Options for customizing minor grid lines.\n * @type {?}\n */\nStockChartAxisDirective.prototype.minorGridLines;\n/**\n * Options for customizing minor tick lines.\n * @type {?}\n */\nStockChartAxisDirective.prototype.minorTickLines;\n/**\n * Specifies the number of minor ticks per interval.\n * \\@default 0\n * @type {?}\n */\nStockChartAxisDirective.prototype.minorTicksPerInterval;\n/**\n * Unique identifier of an axis. \n * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.\n * \\@default ''\n * @type {?}\n */\nStockChartAxisDirective.prototype.name;\n/**\n * If set to true, the axis will render at the opposite side of its default position.\n * \\@default false\n * @type {?}\n */\nStockChartAxisDirective.prototype.opposedPosition;\n/**\n * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line\n * \\@default true\n * @type {?}\n */\nStockChartAxisDirective.prototype.placeNextToAxisLine;\n/**\n * Left and right padding for the plot area in pixels.\n * \\@default 0\n * @type {?}\n */\nStockChartAxisDirective.prototype.plotOffset;\n/**\n * Specifies the padding for the axis range in terms of interval.They are, \n * * none: Padding cannot be applied to the axis. \n * * normal: Padding is applied to the axis based on the range calculation. \n * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range. \n * * round: Axis range is rounded to the nearest possible value divided by the interval.\n * \\@default 'Auto'\n * @type {?}\n */\nStockChartAxisDirective.prototype.rangePadding;\n/**\n * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`. \n * \n * \\@default 0\n * @type {?}\n */\nStockChartAxisDirective.prototype.rowIndex;\n/**\n * Specifies the skeleton format in which the dateTime format will process.\n * \\@default ''\n * @type {?}\n */\nStockChartAxisDirective.prototype.skeleton;\n/**\n * It specifies the type of format to be used in dateTime format process.\n * \\@default 'DateTime'\n * @type {?}\n */\nStockChartAxisDirective.prototype.skeletonType;\n/**\n * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.\n * \\@default 1\n * @type {?}\n */\nStockChartAxisDirective.prototype.span;\n/**\n * The start angle for the series.\n * \\@default 0\n * @type {?}\n */\nStockChartAxisDirective.prototype.startAngle;\n/**\n * Specifies the stripLine collection for the axis\n * @type {?}\n */\nStockChartAxisDirective.prototype.stripLines;\n/**\n * TabIndex value for the axis.\n * \\@default 2\n * @type {?}\n */\nStockChartAxisDirective.prototype.tabIndex;\n/**\n * Specifies the placement of a ticks to the axis line. They are, \n * * inside: Renders the ticks inside to the axis line. \n * * outside: Renders the ticks outside to the axis line.\n * \\@default 'Outside'\n * @type {?}\n */\nStockChartAxisDirective.prototype.tickPosition;\n/**\n * Specifies the title of an axis.\n * \\@default ''\n * @type {?}\n */\nStockChartAxisDirective.prototype.title;\n/**\n * Options for customizing the axis title.\n * @type {?}\n */\nStockChartAxisDirective.prototype.titleStyle;\n/**\n * Specifies the type of data the axis is handling. \n * * Double:  Renders a numeric axis. \n * * DateTime: Renders a dateTime axis. \n * * Category: Renders a category axis. \n * * Logarithmic: Renders a log axis.\n * \\@default 'Double'\n * \\@blazortype Syncfusion.EJ2.Blazor.Charts.ValueType\n * \\@isenumeration true\n * @type {?}\n */\nStockChartAxisDirective.prototype.valueType;\n/**\n * If set to true, axis label will be visible.\n * \\@default true\n * @type {?}\n */\nStockChartAxisDirective.prototype.visible;\n/**\n * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.\n * \\@default 1\n * @type {?}\n */\nStockChartAxisDirective.prototype.zoomFactor;\n/**\n * Position of the zoomed axis. Value ranges from 0 to 1.\n * \\@default 0\n * @type {?}\n */\nStockChartAxisDirective.prototype.zoomPosition;\n/** @type {?} */\nStockChartAxisDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartAxis Array Directive\n */\nexport class StockChartAxesDirective extends ArrayBase<StockChartAxesDirective> {\nconstructor() {\n        super('axes');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-axes',\n    queries: {\n        children: new ContentChildren(StockChartAxisDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartAxesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartAxesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartAxesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\nimport { StockChartTrendlinesDirective } from './trendlines.directive';\n\nlet /** @type {?} */ input: string[] = ['animation', 'bearFillColor', 'border', 'bullFillColor', 'cardinalSplineTension', 'close', 'columnSpacing', 'columnWidth', 'cornerRadius', 'dashArray', 'dataSource', 'emptyPointSettings', 'enableSolidCandles', 'enableTooltip', 'fill', 'high', 'legendImageUrl', 'legendShape', 'low', 'marker', 'name', 'opacity', 'open', 'pointColorMapping', 'query', 'selectionStyle', 'tooltipMappingName', 'trendlines', 'type', 'visible', 'volume', 'width', 'xAxisName', 'xName', 'yAxisName', 'yName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Series Directive\n * ```html\n * <e-stockchart-series-collection>\n * <e-stockchart-series></e-stockchart-series>\n * </e-stockchart-series-collection>\n * ```\n */\nexport class StockChartSeriesDirective extends ComplexBase<StockChartSeriesDirective> {\npublic directivePropList: any;\npublic childTrendlines: any;\npublic tags: string[] = ['trendlines'];\n/**\n * The type of the series are \n * * Line \n * * Column \n * * Area \n * * Spline \n * * Hilo \n * * HiloOpenClose \n * * Candle\n * \\@default 'Candle'\n */\npublic type: any;\n/**\n * Options to customizing animation for the series.\n */\npublic animation: any;\n/**\n * This property is used in stock charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is less than the closing price.\n * \\@default '#2ecd71'\n */\npublic bearFillColor: any;\n/**\n * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.\n */\npublic border: any;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is higher than the closing price.\n * \\@default '#e74c3d'\n */\npublic bullFillColor: any;\n/**\n * It defines tension of cardinal spline types\n * \\@default 0.5\n */\npublic cardinalSplineTension: any;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic close: any;\n/**\n * To render the column series points with particular column spacing. It takes value from 0 - 1.\n * \\@default 0\n */\npublic columnSpacing: any;\n/**\n * To render the column series points with particular column width. If the series type is histogram the \n * default value is 1 otherwise 0.7.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic columnWidth: any;\n/**\n * To render the column series points with particular rounded corner.\n */\npublic cornerRadius: any;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n */\npublic dashArray: any;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager.\n * \\@default ''\n */\npublic dataSource: any;\n/**\n * options to customize the empty points in series\n */\npublic emptyPointSettings: any;\n/**\n * This property is applicable for candle series. \n * It enables/disables to visually compare the current values with the previous values in stock.\n * \\@default false\n */\npublic enableSolidCandles: any;\n/**\n * If set true, the Tooltip for series will be visible.\n * \\@default true\n */\npublic enableTooltip: any;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n */\npublic fill: any;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic high: any;\n/**\n * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.\n * \\@default ''\n */\npublic legendImageUrl: any;\n/**\n * The shape of the legend. Each series has its own legend shape. They are \n * * Circle - Renders a circle. \n * * Rectangle - Renders a rectangle. \n * * Triangle - Renders a triangle. \n * * Diamond - Renders a diamond. \n * * Cross - Renders a cross. \n * * HorizontalLine - Renders a horizontalLine. \n * * VerticalLine - Renders a verticalLine. \n * * Pentagon - Renders a pentagon. \n * * InvertedTriangle - Renders a invertedTriangle. \n * * SeriesType -Render a legend shape based on series type. \n * * Image -Render a image.     *\n * \\@default 'SeriesType'\n */\npublic legendShape: any;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic low: any;\n/**\n * Options for displaying and customizing markers for individual points in a series.\n */\npublic marker: any;\n/**\n * The name of the series visible in legend.\n * \\@default ''\n */\npublic name: any;\n/**\n * The opacity of the series.\n * \\@default 1\n */\npublic opacity: any;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic open: any;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n */\npublic pointColorMapping: any;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * \\@default null\n */\npublic query: any;\n/**\n * Custom style for the selected series or points.\n * \\@default null\n */\npublic selectionStyle: any;\n/**\n * The provided value will be considered as a Tooltip name\n * \\@default ''\n */\npublic tooltipMappingName: any;\n/**\n * Defines the collection of trendlines that are used to predict the trend\n */\npublic trendlines: any;\n/**\n * Specifies the visibility of series.\n * \\@default true\n */\npublic visible: any;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * \\@default ''\n */\npublic volume: any;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n */\npublic width: any;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators\n * \\@default null\n */\npublic xAxisName: any;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic xName: any;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators\n * \\@default null\n */\npublic yAxisName: any;\n/**\n * The DataSource field that contains the y value.\n * \\@default ''\n */\npublic yName: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-series-collection>e-stockchart-series',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childTrendlines: new ContentChild(StockChartTrendlinesDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartSeriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartSeriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartSeriesDirective.ctorParameters;\n/** @type {?} */\nStockChartSeriesDirective.prototype.directivePropList;\n/** @type {?} */\nStockChartSeriesDirective.prototype.childTrendlines;\n/** @type {?} */\nStockChartSeriesDirective.prototype.tags;\n/**\n * The type of the series are \n * * Line \n * * Column \n * * Area \n * * Spline \n * * Hilo \n * * HiloOpenClose \n * * Candle\n * \\@default 'Candle'\n * @type {?}\n */\nStockChartSeriesDirective.prototype.type;\n/**\n * Options to customizing animation for the series.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.animation;\n/**\n * This property is used in stock charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is less than the closing price.\n * \\@default '#2ecd71'\n * @type {?}\n */\nStockChartSeriesDirective.prototype.bearFillColor;\n/**\n * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.border;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is higher than the closing price.\n * \\@default '#e74c3d'\n * @type {?}\n */\nStockChartSeriesDirective.prototype.bullFillColor;\n/**\n * It defines tension of cardinal spline types\n * \\@default 0.5\n * @type {?}\n */\nStockChartSeriesDirective.prototype.cardinalSplineTension;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.close;\n/**\n * To render the column series points with particular column spacing. It takes value from 0 - 1.\n * \\@default 0\n * @type {?}\n */\nStockChartSeriesDirective.prototype.columnSpacing;\n/**\n * To render the column series points with particular column width. If the series type is histogram the \n * default value is 1 otherwise 0.7.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStockChartSeriesDirective.prototype.columnWidth;\n/**\n * To render the column series points with particular rounded corner.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.cornerRadius;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n * @type {?}\n */\nStockChartSeriesDirective.prototype.dashArray;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager.\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.dataSource;\n/**\n * options to customize the empty points in series\n * @type {?}\n */\nStockChartSeriesDirective.prototype.emptyPointSettings;\n/**\n * This property is applicable for candle series. \n * It enables/disables to visually compare the current values with the previous values in stock.\n * \\@default false\n * @type {?}\n */\nStockChartSeriesDirective.prototype.enableSolidCandles;\n/**\n * If set true, the Tooltip for series will be visible.\n * \\@default true\n * @type {?}\n */\nStockChartSeriesDirective.prototype.enableTooltip;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n * @type {?}\n */\nStockChartSeriesDirective.prototype.fill;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.high;\n/**\n * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.legendImageUrl;\n/**\n * The shape of the legend. Each series has its own legend shape. They are \n * * Circle - Renders a circle. \n * * Rectangle - Renders a rectangle. \n * * Triangle - Renders a triangle. \n * * Diamond - Renders a diamond. \n * * Cross - Renders a cross. \n * * HorizontalLine - Renders a horizontalLine. \n * * VerticalLine - Renders a verticalLine. \n * * Pentagon - Renders a pentagon. \n * * InvertedTriangle - Renders a invertedTriangle. \n * * SeriesType -Render a legend shape based on series type. \n * * Image -Render a image.     *\n * \\@default 'SeriesType'\n * @type {?}\n */\nStockChartSeriesDirective.prototype.legendShape;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.low;\n/**\n * Options for displaying and customizing markers for individual points in a series.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.marker;\n/**\n * The name of the series visible in legend.\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.name;\n/**\n * The opacity of the series.\n * \\@default 1\n * @type {?}\n */\nStockChartSeriesDirective.prototype.opacity;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.open;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.pointColorMapping;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * \\@default null\n * @type {?}\n */\nStockChartSeriesDirective.prototype.query;\n/**\n * Custom style for the selected series or points.\n * \\@default null\n * @type {?}\n */\nStockChartSeriesDirective.prototype.selectionStyle;\n/**\n * The provided value will be considered as a Tooltip name\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.tooltipMappingName;\n/**\n * Defines the collection of trendlines that are used to predict the trend\n * @type {?}\n */\nStockChartSeriesDirective.prototype.trendlines;\n/**\n * Specifies the visibility of series.\n * \\@default true\n * @type {?}\n */\nStockChartSeriesDirective.prototype.visible;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.volume;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n * @type {?}\n */\nStockChartSeriesDirective.prototype.width;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators\n * \\@default null\n * @type {?}\n */\nStockChartSeriesDirective.prototype.xAxisName;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.xName;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators\n * \\@default null\n * @type {?}\n */\nStockChartSeriesDirective.prototype.yAxisName;\n/**\n * The DataSource field that contains the y value.\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.yName;\n/** @type {?} */\nStockChartSeriesDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartSeries Array Directive\n */\nexport class StockChartSeriesCollectionDirective extends ArrayBase<StockChartSeriesCollectionDirective> {\nconstructor() {\n        super('series');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-series-collection',\n    queries: {\n        children: new ContentChildren(StockChartSeriesDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartSeriesCollectionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartSeriesCollectionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartSeriesCollectionDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'backwardForecast', 'dashArray', 'enableTooltip', 'fill', 'forwardForecast', 'intercept', 'legendShape', 'marker', 'name', 'period', 'polynomialOrder', 'type', 'visible', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Series Directive\n * ```html\n * <e-stockchart-series-collection>\n * <e-stockchart-series>\n * <e-trendlines>\n * </e-trendline>\n * <e-trendline>\n * </e-trendlines>\n * </e-stockchart-series>\n * </e-stockchart-series-collection>\n * ```\n */\nexport class StockChartTrendlineDirective extends ComplexBase<StockChartTrendlineDirective> {\npublic directivePropList: any;\n/**\n * Defines the type of the trendline\n * \\@default 'Linear'\n */\npublic type: any;\n/**\n * Options to customize the animation for trendlines\n */\npublic animation: any;\n/**\n * Defines the period, by which the trend has to backward forecast\n * \\@default 0\n */\npublic backwardForecast: any;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n * \\@default '0'\n */\npublic dashArray: any;\n/**\n * Enables/disables tooltip for trendlines\n * \\@default true\n */\npublic enableTooltip: any;\n/**\n * Defines the fill color of trendline\n * \\@default ''\n */\npublic fill: any;\n/**\n * Defines the period, by which the trend has to forward forecast\n * \\@default 0\n */\npublic forwardForecast: any;\n/**\n * Defines the intercept of the trendline\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic intercept: any;\n/**\n * Sets the legend shape of the trendline\n * \\@default 'SeriesType'\n */\npublic legendShape: any;\n/**\n * Options to customize the marker for trendlines\n * @deprecated\n */\npublic marker: any;\n/**\n * Defines the name of trendline\n * \\@default ''\n */\npublic name: any;\n/**\n * Defines the period, the price changes over which will be considered to predict moving average trend line\n * \\@default 2\n */\npublic period: any;\n/**\n * Defines the polynomial order of the polynomial trendline\n * \\@default 2\n */\npublic polynomialOrder: any;\n/**\n * Specifies the visibility of trendline.\n * \\@default true\n */\npublic visible: any;\n/**\n * Defines the width of the trendline\n * \\@default 1\n */\npublic width: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-series>e-trendlines>e-trendline',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartTrendlineDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartTrendlineDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartTrendlineDirective.ctorParameters;\n/** @type {?} */\nStockChartTrendlineDirective.prototype.directivePropList;\n/**\n * Defines the type of the trendline\n * \\@default 'Linear'\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.type;\n/**\n * Options to customize the animation for trendlines\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.animation;\n/**\n * Defines the period, by which the trend has to backward forecast\n * \\@default 0\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.backwardForecast;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n * \\@default '0'\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.dashArray;\n/**\n * Enables/disables tooltip for trendlines\n * \\@default true\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.enableTooltip;\n/**\n * Defines the fill color of trendline\n * \\@default ''\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.fill;\n/**\n * Defines the period, by which the trend has to forward forecast\n * \\@default 0\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.forwardForecast;\n/**\n * Defines the intercept of the trendline\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.intercept;\n/**\n * Sets the legend shape of the trendline\n * \\@default 'SeriesType'\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.legendShape;\n/**\n * Options to customize the marker for trendlines\n * @deprecated\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.marker;\n/**\n * Defines the name of trendline\n * \\@default ''\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.name;\n/**\n * Defines the period, the price changes over which will be considered to predict moving average trend line\n * \\@default 2\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.period;\n/**\n * Defines the polynomial order of the polynomial trendline\n * \\@default 2\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.polynomialOrder;\n/**\n * Specifies the visibility of trendline.\n * \\@default true\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.visible;\n/**\n * Defines the width of the trendline\n * \\@default 1\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.width;\n/** @type {?} */\nStockChartTrendlineDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartTrendline Array Directive\n */\nexport class StockChartTrendlinesDirective extends ArrayBase<StockChartTrendlinesDirective> {\nconstructor() {\n        super('trendlines');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-series>e-trendlines',\n    queries: {\n        children: new ContentChildren(StockChartTrendlineDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartTrendlinesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartTrendlinesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartTrendlinesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SmithchartSeriesDirective, SmithchartSeriesCollectionDirective } from './series.directive';\nimport { SmithchartComponent } from './smithchart.component';\nimport { SmithchartModule } from './smithchart.module';\nimport {SmithchartLegend, TooltipRender} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ SmithchartLegendService: ValueProvider = { provide: 'ChartsSmithchartLegend', useValue: SmithchartLegend};\nexport const /** @type {?} */ TooltipRenderService: ValueProvider = { provide: 'ChartsTooltipRender', useValue: TooltipRender};\n/**\n * NgModule definition for the Smithchart component with providers.\n */\nexport class SmithchartAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, SmithchartModule],\n    exports: [\n        SmithchartModule\n    ],\n    providers:[\n        SmithchartLegendService,\n        TooltipRenderService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SmithchartAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSmithchartAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSmithchartAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SmithchartSeriesDirective, SmithchartSeriesCollectionDirective } from './series.directive';\nimport { SmithchartComponent } from './smithchart.component';\n/**\n * NgModule definition for the Smithchart component.\n */\nexport class SmithchartModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        SmithchartComponent,\n        SmithchartSeriesDirective,\n        SmithchartSeriesCollectionDirective\n    ],\n    exports: [\n        SmithchartComponent,\n        SmithchartSeriesDirective,\n        SmithchartSeriesCollectionDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SmithchartModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSmithchartModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSmithchartModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Smithchart } from '@syncfusion/ej2-charts';\n\nimport { SmithchartSeriesCollectionDirective } from './series.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['background','border','elementSpacing','enablePersistence','enableRtl','font','height','horizontalAxis','legendSettings','locale','margin','radialAxis','radius','renderType','series','theme','title','width'];\nexport const /** @type {?} */ outputs: string[] = ['animationComplete','axisLabelRender','beforePrint','legendRender','load','loaded','seriesRender','subtitleRender','textRender','titleRender','tooltipRender'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Smithchart Component\n * ```html\n * <ejs-smithchart></ejs-smithchart>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class SmithchartComponent extends Smithchart implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childSeries: QueryList<SmithchartSeriesCollectionDirective>;\npublic tags: string[] = ['series'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsSmithchartLegend');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTooltipRender');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childSeries;\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-smithchart',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childSeries: new ContentChild(SmithchartSeriesCollectionDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction SmithchartComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSmithchartComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSmithchartComponent.ctorParameters;\n/** @type {?} */\nSmithchartComponent.prototype.context;\n/** @type {?} */\nSmithchartComponent.prototype.tagObjects;\n/** @type {?} */\nSmithchartComponent.prototype.childSeries;\n/** @type {?} */\nSmithchartComponent.prototype.tags;\n/** @type {?} */\nSmithchartComponent.prototype.registerEvents;\n/** @type {?} */\nSmithchartComponent.prototype.addTwoWay;\n/** @type {?} */\nSmithchartComponent.prototype.ngEle;\n/** @type {?} */\nSmithchartComponent.prototype.srenderer;\n/** @type {?} */\nSmithchartComponent.prototype.viewContainerRef;\n/** @type {?} */\nSmithchartComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animationDuration', 'dataSource', 'enableAnimation', 'enableSmartLabels', 'fill', 'marker', 'name', 'opacity', 'points', 'reactance', 'resistance', 'tooltip', 'tooltipMappingName', 'visibility', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\nexport class SmithchartSeriesDirective extends ComplexBase<SmithchartSeriesDirective> {\npublic directivePropList: any;\n/**\n * perform animation of series based on animation duration.\n * \\@default '2000ms'\n */\npublic animationDuration: any;\n/**\n * Specifies the dataSource\n * \\@default null\n * \\@isdatamanager false\n */\npublic dataSource: any;\n/**\n * enable or disable the animation of series.\n * \\@default false\n */\npublic enableAnimation: any;\n/**\n * avoid the overlap of dataLabels.\n * \\@default false\n */\npublic enableSmartLabels: any;\n/**\n * color for series.\n * \\@default null\n */\npublic fill: any;\n/**\n * options for customizing marker\n */\npublic marker: any;\n/**\n * The name of the series visible in legend.\n * \\@default ''\n */\npublic name: any;\n/**\n * opacity for series.\n * \\@default 1\n */\npublic opacity: any;\n/**\n * points for series.\n * \\@default []\n */\npublic points: any;\n/**\n * reactance name for dataSource\n * \\@default ''\n */\npublic reactance: any;\n/**\n * resistance name for dataSource\n * \\@default ''\n */\npublic resistance: any;\n/**\n * options for customizing tooltip\n */\npublic tooltip: any;\n/**\n * tooltip mapping name for the series\n * \\@default ''\n */\npublic tooltipMappingName: any;\n/**\n * visibility for series.\n * \\@default 'visible'\n */\npublic visibility: any;\n/**\n * width for series.\n * \\@default 1\n */\npublic width: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-seriesCollection>e-series',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction SmithchartSeriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSmithchartSeriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSmithchartSeriesDirective.ctorParameters;\n/** @type {?} */\nSmithchartSeriesDirective.prototype.directivePropList;\n/**\n * perform animation of series based on animation duration.\n * \\@default '2000ms'\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.animationDuration;\n/**\n * Specifies the dataSource\n * \\@default null\n * \\@isdatamanager false\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.dataSource;\n/**\n * enable or disable the animation of series.\n * \\@default false\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.enableAnimation;\n/**\n * avoid the overlap of dataLabels.\n * \\@default false\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.enableSmartLabels;\n/**\n * color for series.\n * \\@default null\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.fill;\n/**\n * options for customizing marker\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.marker;\n/**\n * The name of the series visible in legend.\n * \\@default ''\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.name;\n/**\n * opacity for series.\n * \\@default 1\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.opacity;\n/**\n * points for series.\n * \\@default []\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.points;\n/**\n * reactance name for dataSource\n * \\@default ''\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.reactance;\n/**\n * resistance name for dataSource\n * \\@default ''\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.resistance;\n/**\n * options for customizing tooltip\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.tooltip;\n/**\n * tooltip mapping name for the series\n * \\@default ''\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.tooltipMappingName;\n/**\n * visibility for series.\n * \\@default 'visible'\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.visibility;\n/**\n * width for series.\n * \\@default 1\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.width;\n/** @type {?} */\nSmithchartSeriesDirective.prototype.viewContainerRef;\n}\n\n/**\n * SmithchartSeries Array Directive\n */\nexport class SmithchartSeriesCollectionDirective extends ArrayBase<SmithchartSeriesCollectionDirective> {\nconstructor() {\n        super('series');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-smithchart>e-seriesCollection',\n    queries: {\n        children: new ContentChildren(SmithchartSeriesDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SmithchartSeriesCollectionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSmithchartSeriesCollectionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSmithchartSeriesCollectionDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RangeBandSettingDirective, RangeBandSettingsDirective } from './rangebandsettings.directive';\nimport { SparklineComponent } from './sparkline.component';\nimport { SparklineModule } from './sparkline.module';\nimport {SparklineTooltip} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ SparklineTooltipService: ValueProvider = { provide: 'ChartsSparklineTooltip', useValue: SparklineTooltip};\n/**\n * NgModule definition for the Sparkline component with providers.\n */\nexport class SparklineAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, SparklineModule],\n    exports: [\n        SparklineModule\n    ],\n    providers:[\n        SparklineTooltipService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SparklineAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSparklineAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSparklineAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RangeBandSettingDirective, RangeBandSettingsDirective } from './rangebandsettings.directive';\nimport { SparklineComponent } from './sparkline.component';\n/**\n * NgModule definition for the Sparkline component.\n */\nexport class SparklineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        SparklineComponent,\n        RangeBandSettingDirective,\n        RangeBandSettingsDirective\n    ],\n    exports: [\n        SparklineComponent,\n        RangeBandSettingDirective,\n        RangeBandSettingsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SparklineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSparklineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSparklineModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Sparkline } from '@syncfusion/ej2-charts';\n\nimport { RangeBandSettingsDirective } from './rangebandsettings.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['axisSettings','border','containerArea','dataLabelSettings','dataSource','enablePersistence','enableRtl','endPointColor','fill','format','height','highPointColor','lineWidth','locale','lowPointColor','markerSettings','negativePointColor','opacity','padding','palette','query','rangeBandSettings','rangePadding','startPointColor','theme','tiePointColor','tooltipSettings','type','useGroupingSeparator','valueType','width','xName','yName'];\nexport const /** @type {?} */ outputs: string[] = ['axisRendering','dataLabelRendering','load','loaded','markerRendering','pointRegionMouseClick','pointRegionMouseMove','pointRendering','resize','seriesRendering','sparklineMouseClick','sparklineMouseMove','tooltipInitialize'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Sparkline Component\n * ```html\n * <ejs-sparkline></ejs-sparkline>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class SparklineComponent extends Sparkline implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childRangeBandSettings: QueryList<RangeBandSettingsDirective>;\npublic tags: string[] = ['rangeBandSettings'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsSparklineTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childRangeBandSettings;\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-sparkline',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childRangeBandSettings: new ContentChild(RangeBandSettingsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction SparklineComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSparklineComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSparklineComponent.ctorParameters;\n/** @type {?} */\nSparklineComponent.prototype.context;\n/** @type {?} */\nSparklineComponent.prototype.tagObjects;\n/** @type {?} */\nSparklineComponent.prototype.childRangeBandSettings;\n/** @type {?} */\nSparklineComponent.prototype.tags;\n/** @type {?} */\nSparklineComponent.prototype.registerEvents;\n/** @type {?} */\nSparklineComponent.prototype.addTwoWay;\n/** @type {?} */\nSparklineComponent.prototype.ngEle;\n/** @type {?} */\nSparklineComponent.prototype.srenderer;\n/** @type {?} */\nSparklineComponent.prototype.viewContainerRef;\n/** @type {?} */\nSparklineComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['color', 'endRange', 'opacity', 'startRange'];\nlet /** @type {?} */ outputs: string[] = [];\nexport class RangeBandSettingDirective extends ComplexBase<RangeBandSettingDirective> {\npublic directivePropList: any;\n/**\n * To configure sparkline rangeband color\n */\npublic color: any;\n/**\n * To configure sparkline end range\n * \\@aspdefaultvalueignore\n */\npublic endRange: any;\n/**\n * To configure sparkline rangeband opacity\n * \\@default 1\n */\npublic opacity: any;\n/**\n * To configure sparkline start range\n * \\@aspdefaultvalueignore\n */\npublic startRange: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-rangeBandSettings>e-rangeBandSetting',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RangeBandSettingDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeBandSettingDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeBandSettingDirective.ctorParameters;\n/** @type {?} */\nRangeBandSettingDirective.prototype.directivePropList;\n/**\n * To configure sparkline rangeband color\n * @type {?}\n */\nRangeBandSettingDirective.prototype.color;\n/**\n * To configure sparkline end range\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nRangeBandSettingDirective.prototype.endRange;\n/**\n * To configure sparkline rangeband opacity\n * \\@default 1\n * @type {?}\n */\nRangeBandSettingDirective.prototype.opacity;\n/**\n * To configure sparkline start range\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nRangeBandSettingDirective.prototype.startRange;\n/** @type {?} */\nRangeBandSettingDirective.prototype.viewContainerRef;\n}\n\n/**\n * RangeBandSetting Array Directive\n */\nexport class RangeBandSettingsDirective extends ArrayBase<RangeBandSettingsDirective> {\nconstructor() {\n        super('rangebandsettings');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-sparkline>e-rangeBandSettings',\n    queries: {\n        children: new ContentChildren(RangeBandSettingDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RangeBandSettingsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeBandSettingsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeBandSettingsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RangenavigatorSeriesDirective, RangenavigatorSeriesCollectionDirective } from './series.directive';\nimport { RangeNavigatorComponent } from './rangenavigator.component';\nimport { RangeNavigatorModule } from './rangenavigator.module';\nimport {RangeTooltip, PeriodSelector} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ RangeTooltipService: ValueProvider = { provide: 'ChartsRangeTooltip', useValue: RangeTooltip};\nexport const /** @type {?} */ PeriodSelectorService: ValueProvider = { provide: 'ChartsPeriodSelector', useValue: PeriodSelector};\n/**\n * NgModule definition for the RangeNavigator component with providers.\n */\nexport class RangeNavigatorAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, RangeNavigatorModule],\n    exports: [\n        RangeNavigatorModule\n    ],\n    providers:[\n        RangeTooltipService,\n        PeriodSelectorService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RangeNavigatorAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeNavigatorAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeNavigatorAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RangenavigatorSeriesDirective, RangenavigatorSeriesCollectionDirective } from './series.directive';\nimport { RangeNavigatorComponent } from './rangenavigator.component';\n/**\n * NgModule definition for the RangeNavigator component.\n */\nexport class RangeNavigatorModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        RangeNavigatorComponent,\n        RangenavigatorSeriesDirective,\n        RangenavigatorSeriesCollectionDirective\n    ],\n    exports: [\n        RangeNavigatorComponent,\n        RangenavigatorSeriesDirective,\n        RangenavigatorSeriesCollectionDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RangeNavigatorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeNavigatorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeNavigatorModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { RangeNavigator } from '@syncfusion/ej2-charts';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { RangenavigatorSeriesCollectionDirective } from './series.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['allowIntervalData','allowSnapping','animationDuration','background','dataSource','disableRangeSelector','enableDeferredUpdate','enableGrouping','enablePersistence','enableRtl','groupBy','height','interval','intervalType','labelFormat','labelIntersectAction','labelPosition','labelStyle','locale','logBase','majorGridLines','majorTickLines','margin','maximum','minimum','navigatorBorder','navigatorStyleSettings','periodSelectorSettings','query','secondaryLabelAlignment','series','skeleton','skeletonType','theme','tickPosition','tooltip','useGroupingSeparator','value','valueType','width','xName','yName'];\nexport const /** @type {?} */ outputs: string[] = ['beforePrint','changed','labelRender','load','loaded','resized','selectorRender','tooltipRender','dataSourceChange'];\nexport const /** @type {?} */ twoWays: string[] = ['dataSource'];\n/**\n * RangeNavigator Component\n * ```html\n * <ejs-rangenavigator></ejs-rangenavigator>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class RangeNavigatorComponent extends RangeNavigator implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childSeries: QueryList<RangenavigatorSeriesCollectionDirective>;\npublic tags: string[] = ['series'];\npublic dataSourceChange: any;\n    \n    @Template()\npublic tooltip_template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsRangeTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsPeriodSelector');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStepLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDateTime');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsLogarithmic');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childSeries;\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-rangenavigator',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childSeries: new ContentChild(RangenavigatorSeriesCollectionDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate', ] },],\n};\n}\n\nfunction RangeNavigatorComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeNavigatorComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeNavigatorComponent.ctorParameters;\n/** @type {?} */\nRangeNavigatorComponent.propDecorators;\n/** @type {?} */\nRangeNavigatorComponent.prototype.context;\n/** @type {?} */\nRangeNavigatorComponent.prototype.tagObjects;\n/** @type {?} */\nRangeNavigatorComponent.prototype.childSeries;\n/** @type {?} */\nRangeNavigatorComponent.prototype.tags;\n/** @type {?} */\nRangeNavigatorComponent.prototype.dataSourceChange;\n/** @type {?} */\nRangeNavigatorComponent.prototype.tooltip_template;\n/** @type {?} */\nRangeNavigatorComponent.prototype.registerEvents;\n/** @type {?} */\nRangeNavigatorComponent.prototype.addTwoWay;\n/** @type {?} */\nRangeNavigatorComponent.prototype.ngEle;\n/** @type {?} */\nRangeNavigatorComponent.prototype.srenderer;\n/** @type {?} */\nRangeNavigatorComponent.prototype.viewContainerRef;\n/** @type {?} */\nRangeNavigatorComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'border', 'dashArray', 'dataSource', 'fill', 'opacity', 'query', 'type', 'width', 'xName', 'yName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * RangenavigatorSeries Directive\n * ```html\n * <e-rangenavigator-series-collection>\n * <e-rangenavigator-series></e-rangenavigator-series>\n * </e-rangenavigator-series-collection>\n * ```\n */\nexport class RangenavigatorSeriesDirective extends ComplexBase<RangenavigatorSeriesDirective> {\npublic directivePropList: any;\n/**\n * It defines the series type of the range navigator\n * \\@default 'Line'\n */\npublic type: any;\n/**\n * Options to customizing animation for the series.\n */\npublic animation: any;\n/**\n * Options for customizing the color and width of the series border.\n */\npublic border: any;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n */\npublic dashArray: any;\n/**\n * It defines the data source for a series.\n * \\@default null\n */\npublic dataSource: any;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n */\npublic fill: any;\n/**\n * The opacity for the background.\n * \\@default 1\n */\npublic opacity: any;\n/**\n * It defines the query for the data source\n * \\@default null\n */\npublic query: any;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n */\npublic width: any;\n/**\n * It defines the xName for the series\n * \\@default null\n */\npublic xName: any;\n/**\n * It defines the yName for the series\n * \\@default null\n */\npublic yName: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-rangenavigator-series-collection>e-rangenavigator-series',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RangenavigatorSeriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangenavigatorSeriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangenavigatorSeriesDirective.ctorParameters;\n/** @type {?} */\nRangenavigatorSeriesDirective.prototype.directivePropList;\n/**\n * It defines the series type of the range navigator\n * \\@default 'Line'\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.type;\n/**\n * Options to customizing animation for the series.\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.animation;\n/**\n * Options for customizing the color and width of the series border.\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.border;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.dashArray;\n/**\n * It defines the data source for a series.\n * \\@default null\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.dataSource;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.fill;\n/**\n * The opacity for the background.\n * \\@default 1\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.opacity;\n/**\n * It defines the query for the data source\n * \\@default null\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.query;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.width;\n/**\n * It defines the xName for the series\n * \\@default null\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.xName;\n/**\n * It defines the yName for the series\n * \\@default null\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.yName;\n/** @type {?} */\nRangenavigatorSeriesDirective.prototype.viewContainerRef;\n}\n\n/**\n * RangenavigatorSeries Array Directive\n */\nexport class RangenavigatorSeriesCollectionDirective extends ArrayBase<RangenavigatorSeriesCollectionDirective> {\nconstructor() {\n        super('series');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-rangenavigator>e-rangenavigator-series-collection',\n    queries: {\n        children: new ContentChildren(RangenavigatorSeriesDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RangenavigatorSeriesCollectionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangenavigatorSeriesCollectionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangenavigatorSeriesCollectionDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AccumulationSeriesDirective, AccumulationSeriesCollectionDirective } from './series.directive';\nimport { AccumulationAnnotationDirective, AccumulationAnnotationsDirective } from './annotations.directive';\nimport { AccumulationChartComponent } from './accumulationchart.component';\nimport { AccumulationChartModule } from './accumulationchart.module';\nimport {PieSeries, FunnelSeries, PyramidSeries, AccumulationTooltip, AccumulationLegend, AccumulationSelection, AccumulationDataLabel, AccumulationAnnotation} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ PieSeriesService: ValueProvider = { provide: 'ChartsPieSeries', useValue: PieSeries};\nexport const /** @type {?} */ FunnelSeriesService: ValueProvider = { provide: 'ChartsFunnelSeries', useValue: FunnelSeries};\nexport const /** @type {?} */ PyramidSeriesService: ValueProvider = { provide: 'ChartsPyramidSeries', useValue: PyramidSeries};\nexport const /** @type {?} */ AccumulationTooltipService: ValueProvider = { provide: 'ChartsAccumulationTooltip', useValue: AccumulationTooltip};\nexport const /** @type {?} */ AccumulationLegendService: ValueProvider = { provide: 'ChartsAccumulationLegend', useValue: AccumulationLegend};\nexport const /** @type {?} */ AccumulationSelectionService: ValueProvider = { provide: 'ChartsAccumulationSelection', useValue: AccumulationSelection};\nexport const /** @type {?} */ AccumulationDataLabelService: ValueProvider = { provide: 'ChartsAccumulationDataLabel', useValue: AccumulationDataLabel};\nexport const /** @type {?} */ AccumulationAnnotationService: ValueProvider = { provide: 'ChartsAccumulationAnnotation', useValue: AccumulationAnnotation};\n/**\n * NgModule definition for the AccumulationChart component with providers.\n */\nexport class AccumulationChartAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, AccumulationChartModule],\n    exports: [\n        AccumulationChartModule\n    ],\n    providers:[\n        PieSeriesService,\n        FunnelSeriesService,\n        PyramidSeriesService,\n        AccumulationTooltipService,\n        AccumulationLegendService,\n        AccumulationSelectionService,\n        AccumulationDataLabelService,\n        AccumulationAnnotationService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AccumulationChartAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationChartAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationChartAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AccumulationSeriesDirective, AccumulationSeriesCollectionDirective } from './series.directive';\nimport { AccumulationAnnotationDirective, AccumulationAnnotationsDirective } from './annotations.directive';\nimport { AccumulationChartComponent } from './accumulationchart.component';\n/**\n * NgModule definition for the AccumulationChart component.\n */\nexport class AccumulationChartModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        AccumulationChartComponent,\n        AccumulationSeriesDirective,\n        AccumulationSeriesCollectionDirective,\n        AccumulationAnnotationDirective,\n        AccumulationAnnotationsDirective\n    ],\n    exports: [\n        AccumulationChartComponent,\n        AccumulationSeriesDirective,\n        AccumulationSeriesCollectionDirective,\n        AccumulationAnnotationDirective,\n        AccumulationAnnotationsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AccumulationChartModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationChartModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationChartModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { AccumulationChart } from '@syncfusion/ej2-charts';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { AccumulationSeriesCollectionDirective } from './series.directive';\nimport { AccumulationAnnotationsDirective } from './annotations.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['allowExport','annotations','background','backgroundImage','border','center','currencyCode','dataSource','enableAnimation','enableBorderOnMouseMove','enableExport','enablePersistence','enableRtl','enableSmartLabels','height','highLightMode','highlightPattern','isMultiSelect','legendSettings','locale','margin','selectedDataIndexes','selectionMode','selectionPattern','series','subTitle','subTitleStyle','theme','title','titleStyle','tooltip','useGroupingSeparator','width'];\nexport const /** @type {?} */ outputs: string[] = ['afterExport','animationComplete','annotationRender','beforePrint','beforeResize','chartMouseClick','chartMouseDown','chartMouseLeave','chartMouseMove','chartMouseUp','legendRender','load','loaded','pointClick','pointMove','pointRender','resized','seriesRender','textRender','tooltipRender','dataSourceChange'];\nexport const /** @type {?} */ twoWays: string[] = ['dataSource'];\n/**\n * AccumulationChart Component\n * ```html\n * <ejs-accumulationchart></ejs-accumulationchart>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class AccumulationChartComponent extends AccumulationChart implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childSeries: QueryList<AccumulationSeriesCollectionDirective>;\npublic childAnnotations: QueryList<AccumulationAnnotationsDirective>;\npublic tags: string[] = ['series', 'annotations'];\npublic dataSourceChange: any;\n    \n    @Template()\npublic tooltip_template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsPieSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsFunnelSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsPyramidSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationLegend');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationSelection');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationDataLabel');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationAnnotation');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childSeries;\n        if (this.childAnnotations) {\n                    this.tagObjects[1].instance = /** @type {?} */(( this.childAnnotations as any));\n                }\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-accumulationchart',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childSeries: new ContentChild(AccumulationSeriesCollectionDirective), \n        childAnnotations: new ContentChild(AccumulationAnnotationsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate', ] },],\n};\n}\n\nfunction AccumulationChartComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationChartComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationChartComponent.ctorParameters;\n/** @type {?} */\nAccumulationChartComponent.propDecorators;\n/** @type {?} */\nAccumulationChartComponent.prototype.context;\n/** @type {?} */\nAccumulationChartComponent.prototype.tagObjects;\n/** @type {?} */\nAccumulationChartComponent.prototype.childSeries;\n/** @type {?} */\nAccumulationChartComponent.prototype.childAnnotations;\n/** @type {?} */\nAccumulationChartComponent.prototype.tags;\n/** @type {?} */\nAccumulationChartComponent.prototype.dataSourceChange;\n/** @type {?} */\nAccumulationChartComponent.prototype.tooltip_template;\n/** @type {?} */\nAccumulationChartComponent.prototype.registerEvents;\n/** @type {?} */\nAccumulationChartComponent.prototype.addTwoWay;\n/** @type {?} */\nAccumulationChartComponent.prototype.ngEle;\n/** @type {?} */\nAccumulationChartComponent.prototype.srenderer;\n/** @type {?} */\nAccumulationChartComponent.prototype.viewContainerRef;\n/** @type {?} */\nAccumulationChartComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['content', 'coordinateUnits', 'description', 'horizontalAlignment', 'region', 'verticalAlignment', 'x', 'y'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * AccumulationAnnotations Directive\n * ```html\n * <e-accumulation-annotations>\n * <e-accumulation-annotation></e-accumulation-annotation>\n * </e-accumulation-annotations>\n * ```\n */\nexport class AccumulationAnnotationDirective extends ComplexBase<AccumulationAnnotationDirective> {\npublic directivePropList: any;\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n * \\@default 'Pixel'\n */\npublic coordinateUnits: any;\n/**\n * Information about annotation for assistive technology.\n * \\@default null\n */\npublic description: any;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as top side. \n * * Far - Align the annotation element as bottom side. \n * * Center - Align the annotation element as mid point.\n * \\@default 'Center'\n * @deprecated\n */\npublic horizontalAlignment: any;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n * \\@default 'Chart'\n */\npublic region: any;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n * \\@default 'Middle'\n * @deprecated\n */\npublic verticalAlignment: any;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n */\npublic x: any;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n */\npublic y: any;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n * \\@default null\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-accumulation-annotations>e-accumulation-annotation',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction AccumulationAnnotationDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationAnnotationDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationAnnotationDirective.ctorParameters;\n/** @type {?} */\nAccumulationAnnotationDirective.propDecorators;\n/** @type {?} */\nAccumulationAnnotationDirective.prototype.directivePropList;\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n * \\@default 'Pixel'\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.coordinateUnits;\n/**\n * Information about annotation for assistive technology.\n * \\@default null\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.description;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as top side. \n * * Far - Align the annotation element as bottom side. \n * * Center - Align the annotation element as mid point.\n * \\@default 'Center'\n * @deprecated\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.horizontalAlignment;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n * \\@default 'Chart'\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.region;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n * \\@default 'Middle'\n * @deprecated\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.verticalAlignment;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.x;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.y;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n * \\@default null\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.content;\n/** @type {?} */\nAccumulationAnnotationDirective.prototype.viewContainerRef;\n}\n\n/**\n * AccumulationAnnotation Array Directive\n */\nexport class AccumulationAnnotationsDirective extends ArrayBase<AccumulationAnnotationsDirective> {\nconstructor() {\n        super('annotations');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-accumulationchart>e-accumulation-annotations',\n    queries: {\n        children: new ContentChildren(AccumulationAnnotationDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AccumulationAnnotationsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationAnnotationsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationAnnotationsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'border', 'dataLabel', 'dataSource', 'emptyPointSettings', 'enableTooltip', 'endAngle', 'explode', 'explodeAll', 'explodeIndex', 'explodeOffset', 'gapRatio', 'groupMode', 'groupTo', 'height', 'innerRadius', 'legendImageUrl', 'legendShape', 'name', 'neckHeight', 'neckWidth', 'opacity', 'palettes', 'pointColorMapping', 'pyramidMode', 'query', 'radius', 'selectionStyle', 'startAngle', 'tooltipMappingName', 'type', 'visible', 'width', 'xName', 'yName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * AccumulationSeries Directive\n * ```html\n * <e-accumulation-series-collection>\n * <e-accumulation-series></e-accumulation-series>\n * </e-accumulation-series-collection>\n * ```\n */\nexport class AccumulationSeriesDirective extends ComplexBase<AccumulationSeriesDirective> {\npublic directivePropList: any;\n/**\n * Specify the type of the series in accumulation chart.\n * \\@default 'Pie'\n */\npublic type: any;\n/**\n * Options for customizing the animation for series.\n */\npublic animation: any;\n/**\n * Options for customizing the border of the series.\n */\npublic border: any;\n/**\n * The data label for the series.\n */\npublic dataLabel: any;\n/**\n * Specifies the dataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * \\@default ''\n */\npublic dataSource: any;\n/**\n * options to customize the empty points in series\n */\npublic emptyPointSettings: any;\n/**\n * To enable or disable tooltip for a series.\n * \\@default true\n */\npublic enableTooltip: any;\n/**\n * End angle for a series.\n * \\@default null\n */\npublic endAngle: any;\n/**\n * If set true, series points will be exploded on mouse click or touch.\n * \\@default false\n */\npublic explode: any;\n/**\n * If set true, all the points in the series will get exploded on load.\n * \\@default false\n */\npublic explodeAll: any;\n/**\n * Index of the point, to be exploded on load.\n * \\@default null\n * \\@aspdefaultvalueignore\n * \\@blazordefaultvalue Double.NaN\n */\npublic explodeIndex: any;\n/**\n * Distance of the point from the center, which takes values in both pixels and percentage.\n * \\@default '30%'\n */\npublic explodeOffset: any;\n/**\n * Defines the distance between the segments of a funnel/pyramid series. The range will be from 0 to 1\n * \\@default 0\n */\npublic gapRatio: any;\n/**\n * AccumulationSeries y values less than groupMode are combined into single slice named others\n * \\@default Value\n */\npublic groupMode: any;\n/**\n * AccumulationSeries y values less than groupTo are combined into single slice named others\n * \\@default null\n */\npublic groupTo: any;\n/**\n * Defines the height of the funnel/pyramid with respect to the chart area\n * \\@default '80%'\n */\npublic height: any;\n/**\n * When the innerRadius value is greater than 0 percentage, a donut will appear in pie series. It takes values only in percentage.\n * \\@default '0'\n */\npublic innerRadius: any;\n/**\n * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.\n * \\@default ''\n */\npublic legendImageUrl: any;\n/**\n * The shape of the legend. Each series has its own legend shape. They are \n * * Circle - Renders a circle. \n * * Rectangle - Renders a rectangle. \n * * Triangle - Renders a triangle. \n * * Diamond - Renders a diamond. \n * * Cross - Renders a cross. \n * * HorizontalLine - Renders a horizontalLine. \n * * VerticalLine - Renders a verticalLine. \n * * Pentagon - Renders a pentagon. \n * * InvertedTriangle - Renders a invertedTriangle. \n * * SeriesType -Render a legend shape based on series type. \n * * Image -Render a image.     *\n * \\@default 'SeriesType'\n */\npublic legendShape: any;\n/**\n * Specifies the series name\n * \\@default ''\n */\npublic name: any;\n/**\n * Defines the height of the funnel neck with respect to the chart area\n * \\@default '20%'\n */\npublic neckHeight: any;\n/**\n * Defines the width of the funnel neck with respect to the chart area\n * \\@default '20%'\n */\npublic neckWidth: any;\n/**\n * The opacity of the series.\n * \\@default 1.\n */\npublic opacity: any;\n/**\n * Palette for series points.\n * \\@default []\n */\npublic palettes: any;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n */\npublic pointColorMapping: any;\n/**\n * Defines how the values have to be reflected, whether through height/surface of the segments\n * \\@default 'Linear'\n */\npublic pyramidMode: any;\n/**\n * Specifies Query to select data from dataSource. This property is applicable only when the dataSource is `ej.DataManager`.\n * \\@default null\n */\npublic query: any;\n/**\n * Radius of the pie series and its values in percentage.\n * \\@default '80%'\n */\npublic radius: any;\n/**\n * Custom style for the selected series or points.\n * \\@default null\n */\npublic selectionStyle: any;\n/**\n * Start angle for a series.\n * \\@default 0\n */\npublic startAngle: any;\n/**\n * The provided value will be considered as a Tooltip Mapping name\n * \\@default ''\n */\npublic tooltipMappingName: any;\n/**\n * Specifies the series visibility.\n * \\@default true\n */\npublic visible: any;\n/**\n * Defines the width of the funnel/pyramid with respect to the chart area\n * \\@default '80%'\n */\npublic width: any;\n/**\n * The DataSource field which contains the x value.\n * \\@default ''\n */\npublic xName: any;\n/**\n * The DataSource field which contains the y value.\n * \\@default ''\n */\npublic yName: any;\n    \n    @Template()\npublic dataLabel_template: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-accumulation-series-collection>e-accumulation-series',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dataLabel_template': [{ type: ContentChild, args: ['dataLabelTemplate', ] },],\n};\n}\n\nfunction AccumulationSeriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationSeriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationSeriesDirective.ctorParameters;\n/** @type {?} */\nAccumulationSeriesDirective.propDecorators;\n/** @type {?} */\nAccumulationSeriesDirective.prototype.directivePropList;\n/**\n * Specify the type of the series in accumulation chart.\n * \\@default 'Pie'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.type;\n/**\n * Options for customizing the animation for series.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.animation;\n/**\n * Options for customizing the border of the series.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.border;\n/**\n * The data label for the series.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.dataLabel;\n/**\n * Specifies the dataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * \\@default ''\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.dataSource;\n/**\n * options to customize the empty points in series\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.emptyPointSettings;\n/**\n * To enable or disable tooltip for a series.\n * \\@default true\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.enableTooltip;\n/**\n * End angle for a series.\n * \\@default null\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.endAngle;\n/**\n * If set true, series points will be exploded on mouse click or touch.\n * \\@default false\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.explode;\n/**\n * If set true, all the points in the series will get exploded on load.\n * \\@default false\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.explodeAll;\n/**\n * Index of the point, to be exploded on load.\n * \\@default null\n * \\@aspdefaultvalueignore\n * \\@blazordefaultvalue Double.NaN\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.explodeIndex;\n/**\n * Distance of the point from the center, which takes values in both pixels and percentage.\n * \\@default '30%'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.explodeOffset;\n/**\n * Defines the distance between the segments of a funnel/pyramid series. The range will be from 0 to 1\n * \\@default 0\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.gapRatio;\n/**\n * AccumulationSeries y values less than groupMode are combined into single slice named others\n * \\@default Value\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.groupMode;\n/**\n * AccumulationSeries y values less than groupTo are combined into single slice named others\n * \\@default null\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.groupTo;\n/**\n * Defines the height of the funnel/pyramid with respect to the chart area\n * \\@default '80%'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.height;\n/**\n * When the innerRadius value is greater than 0 percentage, a donut will appear in pie series. It takes values only in percentage.\n * \\@default '0'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.innerRadius;\n/**\n * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.\n * \\@default ''\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.legendImageUrl;\n/**\n * The shape of the legend. Each series has its own legend shape. They are \n * * Circle - Renders a circle. \n * * Rectangle - Renders a rectangle. \n * * Triangle - Renders a triangle. \n * * Diamond - Renders a diamond. \n * * Cross - Renders a cross. \n * * HorizontalLine - Renders a horizontalLine. \n * * VerticalLine - Renders a verticalLine. \n * * Pentagon - Renders a pentagon. \n * * InvertedTriangle - Renders a invertedTriangle. \n * * SeriesType -Render a legend shape based on series type. \n * * Image -Render a image.     *\n * \\@default 'SeriesType'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.legendShape;\n/**\n * Specifies the series name\n * \\@default ''\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.name;\n/**\n * Defines the height of the funnel neck with respect to the chart area\n * \\@default '20%'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.neckHeight;\n/**\n * Defines the width of the funnel neck with respect to the chart area\n * \\@default '20%'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.neckWidth;\n/**\n * The opacity of the series.\n * \\@default 1.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.opacity;\n/**\n * Palette for series points.\n * \\@default []\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.palettes;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.pointColorMapping;\n/**\n * Defines how the values have to be reflected, whether through height/surface of the segments\n * \\@default 'Linear'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.pyramidMode;\n/**\n * Specifies Query to select data from dataSource. This property is applicable only when the dataSource is `ej.DataManager`.\n * \\@default null\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.query;\n/**\n * Radius of the pie series and its values in percentage.\n * \\@default '80%'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.radius;\n/**\n * Custom style for the selected series or points.\n * \\@default null\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.selectionStyle;\n/**\n * Start angle for a series.\n * \\@default 0\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.startAngle;\n/**\n * The provided value will be considered as a Tooltip Mapping name\n * \\@default ''\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.tooltipMappingName;\n/**\n * Specifies the series visibility.\n * \\@default true\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.visible;\n/**\n * Defines the width of the funnel/pyramid with respect to the chart area\n * \\@default '80%'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.width;\n/**\n * The DataSource field which contains the x value.\n * \\@default ''\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.xName;\n/**\n * The DataSource field which contains the y value.\n * \\@default ''\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.yName;\n/** @type {?} */\nAccumulationSeriesDirective.prototype.dataLabel_template;\n/** @type {?} */\nAccumulationSeriesDirective.prototype.viewContainerRef;\n}\n\n/**\n * AccumulationSeries Array Directive\n */\nexport class AccumulationSeriesCollectionDirective extends ArrayBase<AccumulationSeriesCollectionDirective> {\nconstructor() {\n        super('series');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-accumulationchart>e-accumulation-series-collection',\n    queries: {\n        children: new ContentChildren(AccumulationSeriesDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AccumulationSeriesCollectionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationSeriesCollectionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationSeriesCollectionDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TrendlineDirective, TrendlinesDirective } from './trendlines.directive';\nimport { SegmentDirective, SegmentsDirective } from './segments.directive';\nimport { SeriesDirective, SeriesCollectionDirective } from './series.directive';\nimport { StripLineDirective, StripLinesDirective } from './striplines.directive';\nimport { CategoryDirective, CategoriesDirective } from './categories.directive';\nimport { MultiLevelLabelDirective, MultiLevelLabelsDirective } from './multilevellabels.directive';\nimport { AxisDirective, AxesDirective } from './axes.directive';\nimport { RowDirective, RowsDirective } from './rows.directive';\nimport { ColumnDirective, ColumnsDirective } from './columns.directive';\nimport { RangeColorSettingDirective, RangeColorSettingsDirective } from './rangecolorsettings.directive';\nimport { AnnotationDirective, AnnotationsDirective } from './annotations.directive';\nimport { SelectedDataIndexDirective, SelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { IndicatorDirective, IndicatorsDirective } from './indicators.directive';\nimport { ChartComponent } from './chart.component';\nimport { ChartModule } from './chart.module';\nimport {LineSeries, ScatterSeries, ColumnSeries, SplineSeries, SplineAreaSeries, StripLine, AreaSeries, ScrollBar, StepLineSeries, StepAreaSeries, StackingColumnSeries, StackingLineSeries, StackingAreaSeries, StackingStepAreaSeries, BarSeries, StackingBarSeries, RangeColumnSeries, BubbleSeries, Tooltip, Crosshair, Category, DateTime, Logarithmic, Legend, Zoom, DataLabel, Selection, ChartAnnotation, HiloSeries, HiloOpenCloseSeries, WaterfallSeries, RangeAreaSeries, SplineRangeAreaSeries, CandleSeries, PolarSeries, RadarSeries, SmaIndicator, TmaIndicator, EmaIndicator, AccumulationDistributionIndicator, MacdIndicator, AtrIndicator, RsiIndicator, MomentumIndicator, StochasticIndicator, BollingerBands, BoxAndWhiskerSeries, HistogramSeries, ErrorBar, Trendlines, DateTimeCategory, MultiColoredLineSeries, MultiColoredAreaSeries, MultiLevelLabel, ParetoSeries, Export, DataEditing, Highlight} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ LineSeriesService: ValueProvider = { provide: 'ChartsLineSeries', useValue: LineSeries};\nexport const /** @type {?} */ ScatterSeriesService: ValueProvider = { provide: 'ChartsScatterSeries', useValue: ScatterSeries};\nexport const /** @type {?} */ ColumnSeriesService: ValueProvider = { provide: 'ChartsColumnSeries', useValue: ColumnSeries};\nexport const /** @type {?} */ SplineSeriesService: ValueProvider = { provide: 'ChartsSplineSeries', useValue: SplineSeries};\nexport const /** @type {?} */ SplineAreaSeriesService: ValueProvider = { provide: 'ChartsSplineAreaSeries', useValue: SplineAreaSeries};\nexport const /** @type {?} */ StripLineService: ValueProvider = { provide: 'ChartsStripLine', useValue: StripLine};\nexport const /** @type {?} */ AreaSeriesService: ValueProvider = { provide: 'ChartsAreaSeries', useValue: AreaSeries};\nexport const /** @type {?} */ ScrollBarService: ValueProvider = { provide: 'ChartsScrollBar', useValue: ScrollBar};\nexport const /** @type {?} */ StepLineSeriesService: ValueProvider = { provide: 'ChartsStepLineSeries', useValue: StepLineSeries};\nexport const /** @type {?} */ StepAreaSeriesService: ValueProvider = { provide: 'ChartsStepAreaSeries', useValue: StepAreaSeries};\nexport const /** @type {?} */ StackingColumnSeriesService: ValueProvider = { provide: 'ChartsStackingColumnSeries', useValue: StackingColumnSeries};\nexport const /** @type {?} */ StackingLineSeriesService: ValueProvider = { provide: 'ChartsStackingLineSeries', useValue: StackingLineSeries};\nexport const /** @type {?} */ StackingAreaSeriesService: ValueProvider = { provide: 'ChartsStackingAreaSeries', useValue: StackingAreaSeries};\nexport const /** @type {?} */ StackingStepAreaSeriesService: ValueProvider = { provide: 'ChartsStackingStepAreaSeries', useValue: StackingStepAreaSeries};\nexport const /** @type {?} */ BarSeriesService: ValueProvider = { provide: 'ChartsBarSeries', useValue: BarSeries};\nexport const /** @type {?} */ StackingBarSeriesService: ValueProvider = { provide: 'ChartsStackingBarSeries', useValue: StackingBarSeries};\nexport const /** @type {?} */ RangeColumnSeriesService: ValueProvider = { provide: 'ChartsRangeColumnSeries', useValue: RangeColumnSeries};\nexport const /** @type {?} */ BubbleSeriesService: ValueProvider = { provide: 'ChartsBubbleSeries', useValue: BubbleSeries};\nexport const /** @type {?} */ TooltipService: ValueProvider = { provide: 'ChartsTooltip', useValue: Tooltip};\nexport const /** @type {?} */ CrosshairService: ValueProvider = { provide: 'ChartsCrosshair', useValue: Crosshair};\nexport const /** @type {?} */ CategoryService: ValueProvider = { provide: 'ChartsCategory', useValue: Category};\nexport const /** @type {?} */ DateTimeService: ValueProvider = { provide: 'ChartsDateTime', useValue: DateTime};\nexport const /** @type {?} */ LogarithmicService: ValueProvider = { provide: 'ChartsLogarithmic', useValue: Logarithmic};\nexport const /** @type {?} */ LegendService: ValueProvider = { provide: 'ChartsLegend', useValue: Legend};\nexport const /** @type {?} */ ZoomService: ValueProvider = { provide: 'ChartsZoom', useValue: Zoom};\nexport const /** @type {?} */ DataLabelService: ValueProvider = { provide: 'ChartsDataLabel', useValue: DataLabel};\nexport const /** @type {?} */ SelectionService: ValueProvider = { provide: 'ChartsSelection', useValue: Selection};\nexport const /** @type {?} */ ChartAnnotationService: ValueProvider = { provide: 'ChartsChartAnnotation', useValue: ChartAnnotation};\nexport const /** @type {?} */ HiloSeriesService: ValueProvider = { provide: 'ChartsHiloSeries', useValue: HiloSeries};\nexport const /** @type {?} */ HiloOpenCloseSeriesService: ValueProvider = { provide: 'ChartsHiloOpenCloseSeries', useValue: HiloOpenCloseSeries};\nexport const /** @type {?} */ WaterfallSeriesService: ValueProvider = { provide: 'ChartsWaterfallSeries', useValue: WaterfallSeries};\nexport const /** @type {?} */ RangeAreaSeriesService: ValueProvider = { provide: 'ChartsRangeAreaSeries', useValue: RangeAreaSeries};\nexport const /** @type {?} */ SplineRangeAreaSeriesService: ValueProvider = { provide: 'ChartsSplineRangeAreaSeries', useValue: SplineRangeAreaSeries};\nexport const /** @type {?} */ CandleSeriesService: ValueProvider = { provide: 'ChartsCandleSeries', useValue: CandleSeries};\nexport const /** @type {?} */ PolarSeriesService: ValueProvider = { provide: 'ChartsPolarSeries', useValue: PolarSeries};\nexport const /** @type {?} */ RadarSeriesService: ValueProvider = { provide: 'ChartsRadarSeries', useValue: RadarSeries};\nexport const /** @type {?} */ SmaIndicatorService: ValueProvider = { provide: 'ChartsSmaIndicator', useValue: SmaIndicator};\nexport const /** @type {?} */ TmaIndicatorService: ValueProvider = { provide: 'ChartsTmaIndicator', useValue: TmaIndicator};\nexport const /** @type {?} */ EmaIndicatorService: ValueProvider = { provide: 'ChartsEmaIndicator', useValue: EmaIndicator};\nexport const /** @type {?} */ AccumulationDistributionIndicatorService: ValueProvider = { provide: 'ChartsAccumulationDistributionIndicator', useValue: AccumulationDistributionIndicator};\nexport const /** @type {?} */ MacdIndicatorService: ValueProvider = { provide: 'ChartsMacdIndicator', useValue: MacdIndicator};\nexport const /** @type {?} */ AtrIndicatorService: ValueProvider = { provide: 'ChartsAtrIndicator', useValue: AtrIndicator};\nexport const /** @type {?} */ RsiIndicatorService: ValueProvider = { provide: 'ChartsRsiIndicator', useValue: RsiIndicator};\nexport const /** @type {?} */ MomentumIndicatorService: ValueProvider = { provide: 'ChartsMomentumIndicator', useValue: MomentumIndicator};\nexport const /** @type {?} */ StochasticIndicatorService: ValueProvider = { provide: 'ChartsStochasticIndicator', useValue: StochasticIndicator};\nexport const /** @type {?} */ BollingerBandsService: ValueProvider = { provide: 'ChartsBollingerBands', useValue: BollingerBands};\nexport const /** @type {?} */ BoxAndWhiskerSeriesService: ValueProvider = { provide: 'ChartsBoxAndWhiskerSeries', useValue: BoxAndWhiskerSeries};\nexport const /** @type {?} */ HistogramSeriesService: ValueProvider = { provide: 'ChartsHistogramSeries', useValue: HistogramSeries};\nexport const /** @type {?} */ ErrorBarService: ValueProvider = { provide: 'ChartsErrorBar', useValue: ErrorBar};\nexport const /** @type {?} */ TrendlinesService: ValueProvider = { provide: 'ChartsTrendlines', useValue: Trendlines};\nexport const /** @type {?} */ DateTimeCategoryService: ValueProvider = { provide: 'ChartsDateTimeCategory', useValue: DateTimeCategory};\nexport const /** @type {?} */ MultiColoredLineSeriesService: ValueProvider = { provide: 'ChartsMultiColoredLineSeries', useValue: MultiColoredLineSeries};\nexport const /** @type {?} */ MultiColoredAreaSeriesService: ValueProvider = { provide: 'ChartsMultiColoredAreaSeries', useValue: MultiColoredAreaSeries};\nexport const /** @type {?} */ MultiLevelLabelService: ValueProvider = { provide: 'ChartsMultiLevelLabel', useValue: MultiLevelLabel};\nexport const /** @type {?} */ ParetoSeriesService: ValueProvider = { provide: 'ChartsParetoSeries', useValue: ParetoSeries};\nexport const /** @type {?} */ ExportService: ValueProvider = { provide: 'ChartsExport', useValue: Export};\nexport const /** @type {?} */ DataEditingService: ValueProvider = { provide: 'ChartsDataEditing', useValue: DataEditing};\nexport const /** @type {?} */ HighlightService: ValueProvider = { provide: 'ChartsHighlight', useValue: Highlight};\n/**\n * NgModule definition for the Chart component with providers.\n */\nexport class ChartAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, ChartModule],\n    exports: [\n        ChartModule\n    ],\n    providers:[\n        LineSeriesService,\n        ScatterSeriesService,\n        ColumnSeriesService,\n        SplineSeriesService,\n        SplineAreaSeriesService,\n        StripLineService,\n        AreaSeriesService,\n        ScrollBarService,\n        StepLineSeriesService,\n        StepAreaSeriesService,\n        StackingColumnSeriesService,\n        StackingLineSeriesService,\n        StackingAreaSeriesService,\n        StackingStepAreaSeriesService,\n        BarSeriesService,\n        StackingBarSeriesService,\n        RangeColumnSeriesService,\n        BubbleSeriesService,\n        TooltipService,\n        CrosshairService,\n        CategoryService,\n        DateTimeService,\n        LogarithmicService,\n        LegendService,\n        ZoomService,\n        DataLabelService,\n        SelectionService,\n        ChartAnnotationService,\n        HiloSeriesService,\n        HiloOpenCloseSeriesService,\n        WaterfallSeriesService,\n        RangeAreaSeriesService,\n        SplineRangeAreaSeriesService,\n        CandleSeriesService,\n        PolarSeriesService,\n        RadarSeriesService,\n        SmaIndicatorService,\n        TmaIndicatorService,\n        EmaIndicatorService,\n        AccumulationDistributionIndicatorService,\n        MacdIndicatorService,\n        AtrIndicatorService,\n        RsiIndicatorService,\n        MomentumIndicatorService,\n        StochasticIndicatorService,\n        BollingerBandsService,\n        BoxAndWhiskerSeriesService,\n        HistogramSeriesService,\n        ErrorBarService,\n        TrendlinesService,\n        DateTimeCategoryService,\n        MultiColoredLineSeriesService,\n        MultiColoredAreaSeriesService,\n        MultiLevelLabelService,\n        ParetoSeriesService,\n        ExportService,\n        DataEditingService,\n        HighlightService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChartAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nChartAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChartAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TrendlineDirective, TrendlinesDirective } from './trendlines.directive';\nimport { SegmentDirective, SegmentsDirective } from './segments.directive';\nimport { SeriesDirective, SeriesCollectionDirective } from './series.directive';\nimport { StripLineDirective, StripLinesDirective } from './striplines.directive';\nimport { CategoryDirective, CategoriesDirective } from './categories.directive';\nimport { MultiLevelLabelDirective, MultiLevelLabelsDirective } from './multilevellabels.directive';\nimport { AxisDirective, AxesDirective } from './axes.directive';\nimport { RowDirective, RowsDirective } from './rows.directive';\nimport { ColumnDirective, ColumnsDirective } from './columns.directive';\nimport { RangeColorSettingDirective, RangeColorSettingsDirective } from './rangecolorsettings.directive';\nimport { AnnotationDirective, AnnotationsDirective } from './annotations.directive';\nimport { SelectedDataIndexDirective, SelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { IndicatorDirective, IndicatorsDirective } from './indicators.directive';\nimport { ChartComponent } from './chart.component';\n/**\n * NgModule definition for the Chart component.\n */\nexport class ChartModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        ChartComponent,\n        TrendlineDirective,\n        TrendlinesDirective,\n        SegmentDirective,\n        SegmentsDirective,\n        SeriesDirective,\n        SeriesCollectionDirective,\n        StripLineDirective,\n        StripLinesDirective,\n        CategoryDirective,\n        CategoriesDirective,\n        MultiLevelLabelDirective,\n        MultiLevelLabelsDirective,\n        AxisDirective,\n        AxesDirective,\n        RowDirective,\n        RowsDirective,\n        ColumnDirective,\n        ColumnsDirective,\n        RangeColorSettingDirective,\n        RangeColorSettingsDirective,\n        AnnotationDirective,\n        AnnotationsDirective,\n        SelectedDataIndexDirective,\n        SelectedDataIndexesDirective,\n        IndicatorDirective,\n        IndicatorsDirective\n    ],\n    exports: [\n        ChartComponent,\n        TrendlineDirective,\n        TrendlinesDirective,\n        SegmentDirective,\n        SegmentsDirective,\n        SeriesDirective,\n        SeriesCollectionDirective,\n        StripLineDirective,\n        StripLinesDirective,\n        CategoryDirective,\n        CategoriesDirective,\n        MultiLevelLabelDirective,\n        MultiLevelLabelsDirective,\n        AxisDirective,\n        AxesDirective,\n        RowDirective,\n        RowsDirective,\n        ColumnDirective,\n        ColumnsDirective,\n        RangeColorSettingDirective,\n        RangeColorSettingsDirective,\n        AnnotationDirective,\n        AnnotationsDirective,\n        SelectedDataIndexDirective,\n        SelectedDataIndexesDirective,\n        IndicatorDirective,\n        IndicatorsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChartModule_tsickle_Closure_declarations() {\n/** @type {?} */\nChartModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChartModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Chart } from '@syncfusion/ej2-charts';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { SeriesCollectionDirective } from './series.directive';\nimport { AxesDirective } from './axes.directive';\nimport { RowsDirective } from './rows.directive';\nimport { ColumnsDirective } from './columns.directive';\nimport { RangeColorSettingsDirective } from './rangecolorsettings.directive';\nimport { AnnotationsDirective } from './annotations.directive';\nimport { SelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { IndicatorsDirective } from './indicators.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['allowExport','allowMultiSelection','annotations','axes','background','backgroundImage','border','chartArea','columns','crosshair','currencyCode','dataSource','description','enableAnimation','enableAutoIntervalOnBothAxis','enableCanvas','enableExport','enablePersistence','enableRtl','enableSideBySidePlacement','height','highlightMode','highlightPattern','indicators','isMultiSelect','isTransposed','legendSettings','locale','margin','palettes','primaryXAxis','primaryYAxis','rangeColorSettings','rows','selectedDataIndexes','selectionMode','selectionPattern','series','subTitle','subTitleStyle','tabIndex','theme','title','titleStyle','tooltip','useGroupingSeparator','width','zoomSettings'];\nexport const /** @type {?} */ outputs: string[] = ['afterExport','animationComplete','annotationRender','axisLabelClick','axisLabelRender','axisMultiLabelRender','axisRangeCalculated','beforeExport','beforePrint','beforeResize','chartMouseClick','chartMouseDown','chartMouseLeave','chartMouseMove','chartMouseUp','drag','dragComplete','dragEnd','dragStart','legendClick','legendRender','load','loaded','multiLevelLabelClick','onZooming','pointClick','pointDoubleClick','pointMove','pointRender','resized','scrollChanged','scrollEnd','scrollStart','selectionComplete','seriesRender','sharedTooltipRender','textRender','tooltipRender','zoomComplete','dataSourceChange'];\nexport const /** @type {?} */ twoWays: string[] = ['dataSource'];\n/**\n * Chart Component\n * ```html\n * <ejschart></ejschart>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class ChartComponent extends Chart implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childSeries: QueryList<SeriesCollectionDirective>;\npublic childAxes: QueryList<AxesDirective>;\npublic childRows: QueryList<RowsDirective>;\npublic childColumns: QueryList<ColumnsDirective>;\npublic childRangeColorSettings: QueryList<RangeColorSettingsDirective>;\npublic childAnnotations: QueryList<AnnotationsDirective>;\npublic childSelectedDataIndexes: QueryList<SelectedDataIndexesDirective>;\npublic childIndicators: QueryList<IndicatorsDirective>;\npublic tags: string[] = ['series', 'axes', 'rows', 'columns', 'rangeColorSettings', 'annotations', 'selectedDataIndexes', 'indicators'];\npublic dataSourceChange: any;\n    \n    @Template()\npublic tooltip_template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsScatterSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsColumnSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSplineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSplineAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStripLine');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsScrollBar');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStepLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStepAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStackingColumnSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStackingLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStackingAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStackingStepAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsBarSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStackingBarSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRangeColumnSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsBubbleSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsCrosshair');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsCategory');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDateTime');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsLogarithmic');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsLegend');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsZoom');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDataLabel');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSelection');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsChartAnnotation');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsHiloSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsHiloOpenCloseSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsWaterfallSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRangeAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSplineRangeAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsCandleSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsPolarSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRadarSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsEmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationDistributionIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMacdIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAtrIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRsiIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMomentumIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStochasticIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsBollingerBands');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsBoxAndWhiskerSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsHistogramSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsErrorBar');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTrendlines');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDateTimeCategory');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMultiColoredLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMultiColoredAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMultiLevelLabel');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsParetoSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDataEditing');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsHighlight');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childSeries;\n        \n\t    if (this.childAxes) {\n            this.tagObjects[1].instance = this.childAxes;\n        }\n        \n\t    if (this.childRows) {\n            this.tagObjects[2].instance = this.childRows;\n        }\n        \n\t    if (this.childColumns) {\n            this.tagObjects[3].instance = this.childColumns;\n        }\n        \n\t    if (this.childRangeColorSettings) {\n            this.tagObjects[4].instance = this.childRangeColorSettings;\n        }\n        \n\t    if (this.childAnnotations) {\n            this.tagObjects[5].instance = this.childAnnotations;\n        }\n        \n\t    if (this.childSelectedDataIndexes) {\n            this.tagObjects[6].instance = this.childSelectedDataIndexes;\n        }\n        \n\t    if (this.childIndicators) {\n            this.tagObjects[7].instance = this.childIndicators;\n        }\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-chart',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    queries: {\n        childSeries: new ContentChild(SeriesCollectionDirective), \n        childAxes: new ContentChild(AxesDirective), \n        childRows: new ContentChild(RowsDirective), \n        childColumns: new ContentChild(ColumnsDirective), \n        childRangeColorSettings: new ContentChild(RangeColorSettingsDirective), \n        childAnnotations: new ContentChild(AnnotationsDirective), \n        childSelectedDataIndexes: new ContentChild(SelectedDataIndexesDirective), \n        childIndicators: new ContentChild(IndicatorsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate', ] },],\n};\n}\n\nfunction ChartComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nChartComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChartComponent.ctorParameters;\n/** @type {?} */\nChartComponent.propDecorators;\n/** @type {?} */\nChartComponent.prototype.context;\n/** @type {?} */\nChartComponent.prototype.tagObjects;\n/** @type {?} */\nChartComponent.prototype.childSeries;\n/** @type {?} */\nChartComponent.prototype.childAxes;\n/** @type {?} */\nChartComponent.prototype.childRows;\n/** @type {?} */\nChartComponent.prototype.childColumns;\n/** @type {?} */\nChartComponent.prototype.childRangeColorSettings;\n/** @type {?} */\nChartComponent.prototype.childAnnotations;\n/** @type {?} */\nChartComponent.prototype.childSelectedDataIndexes;\n/** @type {?} */\nChartComponent.prototype.childIndicators;\n/** @type {?} */\nChartComponent.prototype.tags;\n/** @type {?} */\nChartComponent.prototype.dataSourceChange;\n/** @type {?} */\nChartComponent.prototype.tooltip_template;\n/** @type {?} */\nChartComponent.prototype.registerEvents;\n/** @type {?} */\nChartComponent.prototype.addTwoWay;\n/** @type {?} */\nChartComponent.prototype.ngEle;\n/** @type {?} */\nChartComponent.prototype.srenderer;\n/** @type {?} */\nChartComponent.prototype.viewContainerRef;\n/** @type {?} */\nChartComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'bandColor', 'close', 'colorName', 'dPeriod', 'dashArray', 'dataSource', 'enableComplexProperty', 'fastPeriod', 'field', 'fill', 'high', 'kPeriod', 'low', 'lowerLine', 'macdLine', 'macdNegativeColor', 'macdPositiveColor', 'macdType', 'open', 'overBought', 'overSold', 'period', 'periodLine', 'pointColorMapping', 'query', 'segmentAxis', 'segments', 'seriesName', 'showZones', 'slowPeriod', 'standardDeviation', 'type', 'upperLine', 'visible', 'volume', 'width', 'xAxisName', 'xName', 'yAxisName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Indicator Directive\n * ```html\n * <e-indicators>\n * <e-indicator></e-indicator>\n * </e-indicators>\n * ```\n */\nexport class IndicatorDirective extends ComplexBase<IndicatorDirective> {\npublic directivePropList: any;\n/**\n * Defines the type of the technical indicator\n * \\@default 'Sma'\n */\npublic type: any;\n/**\n * Options to customizing animation for the series.\n */\npublic animation: any;\n/**\n * Options for customizing the BollingerBand in the indicator.\n * \\@default 'rgba(211,211,211,0.25)'\n */\npublic bandColor: any;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic close: any;\n/**\n * The Data Source field that contains the color mapping value. \n * It is applicable for range color mapping properly.\n */\npublic colorName: any;\n/**\n * Defines the period, the price changes over which will define the %D value in stochastic indicators\n * \\@default 3\n */\npublic dPeriod: any;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n */\npublic dashArray: any;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * \\@default ''\n */\npublic dataSource: any;\n/**\n * This property used to improve chart performance via data mapping for series dataSource.\n * \\@default false\n */\npublic enableComplexProperty: any;\n/**\n * Sets the fast period to define the Macd line\n * \\@default 26\n */\npublic fastPeriod: any;\n/**\n * Defines the field to compare the current value with previous values\n * \\@default 'Close'\n */\npublic field: any;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n */\npublic fill: any;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic high: any;\n/**\n * Defines the look back period, the price changes over which will define the %K value in stochastic indicators\n * \\@default 14\n */\npublic kPeriod: any;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic low: any;\n/**\n * Defines the appearance of lower line in technical indicators\n */\npublic lowerLine: any;\n/**\n * Defines the appearance of the the MacdLine of Macd indicator\n * \\@default { color: '#ff9933', width: 2 }\n */\npublic macdLine: any;\n/**\n * Defines the color of the negative bars in Macd indicators\n * \\@default '#e74c3d'\n */\npublic macdNegativeColor: any;\n/**\n * Defines the color of the positive bars in Macd indicators\n * \\@default '#2ecd71'\n */\npublic macdPositiveColor: any;\n/**\n * Defines the type of the Macd indicator.\n * \\@default 'Both'\n */\npublic macdType: any;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic open: any;\n/**\n * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators\n * \\@default 80\n */\npublic overBought: any;\n/**\n * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators\n * \\@default 20\n */\npublic overSold: any;\n/**\n * Defines the period, the price changes over which will be considered to predict the trend\n * \\@default 14\n */\npublic period: any;\n/**\n * Defines the appearance of period line in technical indicators\n */\npublic periodLine: any;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n */\npublic pointColorMapping: any;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * \\@default ''\n */\npublic query: any;\n/**\n * Defines the axis, based on which the line series will be split.\n */\npublic segmentAxis: any;\n/**\n * Defines the collection of regions that helps to differentiate a line series.\n */\npublic segments: any;\n/**\n * Defines the name of the series, the data of which has to be depicted as indicator\n * \\@default ''\n */\npublic seriesName: any;\n/**\n * Enables/Disables the over-bought and over-sold regions\n * \\@default true\n */\npublic showZones: any;\n/**\n * Sets the slow period to define the Macd line\n * \\@default 12\n */\npublic slowPeriod: any;\n/**\n * Sets the standard deviation values that helps to define the upper and lower bollinger bands\n * \\@default 2\n */\npublic standardDeviation: any;\n/**\n * Defines the appearance of the upper line in technical indicators\n */\npublic upperLine: any;\n/**\n * Specifies the visibility of series.\n * \\@default true\n */\npublic visible: any;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * \\@default ''\n */\npublic volume: any;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n */\npublic width: any;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n */\npublic xAxisName: any;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic xName: any;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n */\npublic yAxisName: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-indicators>e-indicator',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction IndicatorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nIndicatorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nIndicatorDirective.ctorParameters;\n/** @type {?} */\nIndicatorDirective.prototype.directivePropList;\n/**\n * Defines the type of the technical indicator\n * \\@default 'Sma'\n * @type {?}\n */\nIndicatorDirective.prototype.type;\n/**\n * Options to customizing animation for the series.\n * @type {?}\n */\nIndicatorDirective.prototype.animation;\n/**\n * Options for customizing the BollingerBand in the indicator.\n * \\@default 'rgba(211,211,211,0.25)'\n * @type {?}\n */\nIndicatorDirective.prototype.bandColor;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.close;\n/**\n * The Data Source field that contains the color mapping value. \n * It is applicable for range color mapping properly.\n * @type {?}\n */\nIndicatorDirective.prototype.colorName;\n/**\n * Defines the period, the price changes over which will define the %D value in stochastic indicators\n * \\@default 3\n * @type {?}\n */\nIndicatorDirective.prototype.dPeriod;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n * @type {?}\n */\nIndicatorDirective.prototype.dashArray;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.dataSource;\n/**\n * This property used to improve chart performance via data mapping for series dataSource.\n * \\@default false\n * @type {?}\n */\nIndicatorDirective.prototype.enableComplexProperty;\n/**\n * Sets the fast period to define the Macd line\n * \\@default 26\n * @type {?}\n */\nIndicatorDirective.prototype.fastPeriod;\n/**\n * Defines the field to compare the current value with previous values\n * \\@default 'Close'\n * @type {?}\n */\nIndicatorDirective.prototype.field;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n * @type {?}\n */\nIndicatorDirective.prototype.fill;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.high;\n/**\n * Defines the look back period, the price changes over which will define the %K value in stochastic indicators\n * \\@default 14\n * @type {?}\n */\nIndicatorDirective.prototype.kPeriod;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.low;\n/**\n * Defines the appearance of lower line in technical indicators\n * @type {?}\n */\nIndicatorDirective.prototype.lowerLine;\n/**\n * Defines the appearance of the the MacdLine of Macd indicator\n * \\@default { color: '#ff9933', width: 2 }\n * @type {?}\n */\nIndicatorDirective.prototype.macdLine;\n/**\n * Defines the color of the negative bars in Macd indicators\n * \\@default '#e74c3d'\n * @type {?}\n */\nIndicatorDirective.prototype.macdNegativeColor;\n/**\n * Defines the color of the positive bars in Macd indicators\n * \\@default '#2ecd71'\n * @type {?}\n */\nIndicatorDirective.prototype.macdPositiveColor;\n/**\n * Defines the type of the Macd indicator.\n * \\@default 'Both'\n * @type {?}\n */\nIndicatorDirective.prototype.macdType;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.open;\n/**\n * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators\n * \\@default 80\n * @type {?}\n */\nIndicatorDirective.prototype.overBought;\n/**\n * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators\n * \\@default 20\n * @type {?}\n */\nIndicatorDirective.prototype.overSold;\n/**\n * Defines the period, the price changes over which will be considered to predict the trend\n * \\@default 14\n * @type {?}\n */\nIndicatorDirective.prototype.period;\n/**\n * Defines the appearance of period line in technical indicators\n * @type {?}\n */\nIndicatorDirective.prototype.periodLine;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.pointColorMapping;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.query;\n/**\n * Defines the axis, based on which the line series will be split.\n * @type {?}\n */\nIndicatorDirective.prototype.segmentAxis;\n/**\n * Defines the collection of regions that helps to differentiate a line series.\n * @type {?}\n */\nIndicatorDirective.prototype.segments;\n/**\n * Defines the name of the series, the data of which has to be depicted as indicator\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.seriesName;\n/**\n * Enables/Disables the over-bought and over-sold regions\n * \\@default true\n * @type {?}\n */\nIndicatorDirective.prototype.showZones;\n/**\n * Sets the slow period to define the Macd line\n * \\@default 12\n * @type {?}\n */\nIndicatorDirective.prototype.slowPeriod;\n/**\n * Sets the standard deviation values that helps to define the upper and lower bollinger bands\n * \\@default 2\n * @type {?}\n */\nIndicatorDirective.prototype.standardDeviation;\n/**\n * Defines the appearance of the upper line in technical indicators\n * @type {?}\n */\nIndicatorDirective.prototype.upperLine;\n/**\n * Specifies the visibility of series.\n * \\@default true\n * @type {?}\n */\nIndicatorDirective.prototype.visible;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.volume;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n * @type {?}\n */\nIndicatorDirective.prototype.width;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n * @type {?}\n */\nIndicatorDirective.prototype.xAxisName;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.xName;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n * @type {?}\n */\nIndicatorDirective.prototype.yAxisName;\n/** @type {?} */\nIndicatorDirective.prototype.viewContainerRef;\n}\n\n/**\n * Indicator Array Directive\n */\nexport class IndicatorsDirective extends ArrayBase<IndicatorsDirective> {\nconstructor() {\n        super('indicators');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-chart>e-indicators',\n    queries: {\n        children: new ContentChildren(IndicatorDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction IndicatorsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nIndicatorsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nIndicatorsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['point', 'series'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Selected Data Directive\n * ```html\n * <e-selecteddataindexes><e-selecteddataindex></e-selecteddataindex><e-selecteddataindexes>\n * ```\n */\nexport class SelectedDataIndexDirective extends ComplexBase<SelectedDataIndexDirective> {\npublic directivePropList: any;\n/**\n * Specifies the point index\n * \\@default 0\n * \\@asptype int\n */\npublic point: any;\n/**\n * Specifies the series index\n * \\@default 0\n * \\@asptype int\n */\npublic series: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-selecteddataindexes>e-selecteddataindex',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction SelectedDataIndexDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectedDataIndexDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectedDataIndexDirective.ctorParameters;\n/** @type {?} */\nSelectedDataIndexDirective.prototype.directivePropList;\n/**\n * Specifies the point index\n * \\@default 0\n * \\@asptype int\n * @type {?}\n */\nSelectedDataIndexDirective.prototype.point;\n/**\n * Specifies the series index\n * \\@default 0\n * \\@asptype int\n * @type {?}\n */\nSelectedDataIndexDirective.prototype.series;\n/** @type {?} */\nSelectedDataIndexDirective.prototype.viewContainerRef;\n}\n\n/**\n * SelectedDataIndex Array Directive\n */\nexport class SelectedDataIndexesDirective extends ArrayBase<SelectedDataIndexesDirective> {\nconstructor() {\n        super('selecteddataindexes');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chart>e-selecteddataindexes',\n    queries: {\n        children: new ContentChildren(SelectedDataIndexDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SelectedDataIndexesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectedDataIndexesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectedDataIndexesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['content', 'coordinateUnits', 'description', 'horizontalAlignment', 'region', 'verticalAlignment', 'x', 'xAxisName', 'y', 'yAxisName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Annotation Directive\n * ```html\n * <e-annotations><e-annotation></e-annotation><e-annotations>\n * ```\n */\nexport class AnnotationDirective extends ComplexBase<AnnotationDirective> {\npublic directivePropList: any;\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n * \\@default 'Pixel'\n */\npublic coordinateUnits: any;\n/**\n * Information about annotation for assistive technology.\n * \\@default null\n */\npublic description: any;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as left side. \n * * Far - Align the annotation element as right side. \n * * Center - Align the annotation element as mid point.\n * \\@default 'Center'\n * @deprecated\n */\npublic horizontalAlignment: any;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n * \\@default 'Chart'\n */\npublic region: any;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n * \\@default 'Middle'\n * @deprecated\n */\npublic verticalAlignment: any;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n * \\@asptype object\n */\npublic x: any;\n/**\n * The name of horizontal axis associated with the annotation. \n * It requires `axes` of chart.\n * \\@default null\n */\npublic xAxisName: any;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n */\npublic y: any;\n/**\n * The name of vertical axis associated with the annotation. \n * It requires `axes` of chart.\n * \\@default null\n */\npublic yAxisName: any;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n * \\@default null\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-annotations>e-annotation',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction AnnotationDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAnnotationDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAnnotationDirective.ctorParameters;\n/** @type {?} */\nAnnotationDirective.propDecorators;\n/** @type {?} */\nAnnotationDirective.prototype.directivePropList;\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n * \\@default 'Pixel'\n * @type {?}\n */\nAnnotationDirective.prototype.coordinateUnits;\n/**\n * Information about annotation for assistive technology.\n * \\@default null\n * @type {?}\n */\nAnnotationDirective.prototype.description;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as left side. \n * * Far - Align the annotation element as right side. \n * * Center - Align the annotation element as mid point.\n * \\@default 'Center'\n * @deprecated\n * @type {?}\n */\nAnnotationDirective.prototype.horizontalAlignment;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n * \\@default 'Chart'\n * @type {?}\n */\nAnnotationDirective.prototype.region;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n * \\@default 'Middle'\n * @deprecated\n * @type {?}\n */\nAnnotationDirective.prototype.verticalAlignment;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n * \\@asptype object\n * @type {?}\n */\nAnnotationDirective.prototype.x;\n/**\n * The name of horizontal axis associated with the annotation. \n * It requires `axes` of chart.\n * \\@default null\n * @type {?}\n */\nAnnotationDirective.prototype.xAxisName;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n * @type {?}\n */\nAnnotationDirective.prototype.y;\n/**\n * The name of vertical axis associated with the annotation. \n * It requires `axes` of chart.\n * \\@default null\n * @type {?}\n */\nAnnotationDirective.prototype.yAxisName;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n * \\@default null\n * @type {?}\n */\nAnnotationDirective.prototype.content;\n/** @type {?} */\nAnnotationDirective.prototype.viewContainerRef;\n}\n\n/**\n * Annotation Array Directive\n */\nexport class AnnotationsDirective extends ArrayBase<AnnotationsDirective> {\nconstructor() {\n        super('annotations');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chart>e-annotations',\n    queries: {\n        children: new ContentChildren(AnnotationDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AnnotationsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAnnotationsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAnnotationsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['colors', 'end', 'label', 'start'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * RangeColorSetting Directive\n * ```html\n * <e-rangeColorSettings><e-rangeColorSetting></e-rangeColorSetting><e-rangeColorSettings>\n * ```\n */\nexport class RangeColorSettingDirective extends ComplexBase<RangeColorSettingDirective> {\npublic directivePropList: any;\n/**\n * Specify the fill colors of point those lies on the given range, if multiple colors mentioned, then we need to fill gradient\n */\npublic colors: any;\n/**\n * Specify the end value of color mapping range\n */\npublic end: any;\n/**\n * Specify name for the range mapping item.\n */\npublic label: any;\n/**\n * Specify the start value of color mapping range\n */\npublic start: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-rangecolorsettings>e-rangecolorsetting',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RangeColorSettingDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeColorSettingDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeColorSettingDirective.ctorParameters;\n/** @type {?} */\nRangeColorSettingDirective.prototype.directivePropList;\n/**\n * Specify the fill colors of point those lies on the given range, if multiple colors mentioned, then we need to fill gradient\n * @type {?}\n */\nRangeColorSettingDirective.prototype.colors;\n/**\n * Specify the end value of color mapping range\n * @type {?}\n */\nRangeColorSettingDirective.prototype.end;\n/**\n * Specify name for the range mapping item.\n * @type {?}\n */\nRangeColorSettingDirective.prototype.label;\n/**\n * Specify the start value of color mapping range\n * @type {?}\n */\nRangeColorSettingDirective.prototype.start;\n/** @type {?} */\nRangeColorSettingDirective.prototype.viewContainerRef;\n}\n\n/**\n * RangeColorSetting Array Directive\n */\nexport class RangeColorSettingsDirective extends ArrayBase<RangeColorSettingsDirective> {\nconstructor() {\n        super('rangecolorsettings');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chart>e-rangecolorsettings',\n    queries: {\n        children: new ContentChildren(RangeColorSettingDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RangeColorSettingsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeColorSettingsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeColorSettingsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['border', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Column Directive\n * ```html\n * <e-columns><e-column></e-column><e-columns>\n * ```\n */\nexport class ColumnDirective extends ComplexBase<ColumnDirective> {\npublic directivePropList: any;\n/**\n * Options to customize the border of the columns.\n */\npublic border: any;\n/**\n * The width of the column as a string accepts input both as like '100px' or '100%'. \n * If specified as '100%, column renders to the full width of its chart.\n * \\@default '100%'\n */\npublic width: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-columns>e-column',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction ColumnDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nColumnDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nColumnDirective.ctorParameters;\n/** @type {?} */\nColumnDirective.prototype.directivePropList;\n/**\n * Options to customize the border of the columns.\n * @type {?}\n */\nColumnDirective.prototype.border;\n/**\n * The width of the column as a string accepts input both as like '100px' or '100%'. \n * If specified as '100%, column renders to the full width of its chart.\n * \\@default '100%'\n * @type {?}\n */\nColumnDirective.prototype.width;\n/** @type {?} */\nColumnDirective.prototype.viewContainerRef;\n}\n\n/**\n * Column Array Directive\n */\nexport class ColumnsDirective extends ArrayBase<ColumnsDirective> {\nconstructor() {\n        super('columns');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chart>e-columns',\n    queries: {\n        children: new ContentChildren(ColumnDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ColumnsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nColumnsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nColumnsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['border', 'height'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Row Directive\n * ```html\n * <e-rows><e-row></e-row><e-rows>\n * ```\n */\nexport class RowDirective extends ComplexBase<RowDirective> {\npublic directivePropList: any;\n/**\n * Options to customize the border of the rows.\n */\npublic border: any;\n/**\n * The height of the row as a string accept input both as '100px' and '100%'. \n * If specified as '100%, row renders to the full height of its chart.\n * \\@default '100%'\n */\npublic height: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-rows>e-row',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RowDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRowDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRowDirective.ctorParameters;\n/** @type {?} */\nRowDirective.prototype.directivePropList;\n/**\n * Options to customize the border of the rows.\n * @type {?}\n */\nRowDirective.prototype.border;\n/**\n * The height of the row as a string accept input both as '100px' and '100%'. \n * If specified as '100%, row renders to the full height of its chart.\n * \\@default '100%'\n * @type {?}\n */\nRowDirective.prototype.height;\n/** @type {?} */\nRowDirective.prototype.viewContainerRef;\n}\n\n/**\n * Row Array Directive\n */\nexport class RowsDirective extends ArrayBase<RowsDirective> {\nconstructor() {\n        super('rows');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chart>e-rows',\n    queries: {\n        children: new ContentChildren(RowDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RowsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRowsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRowsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\nimport { StripLinesDirective } from './striplines.directive';\nimport { MultiLevelLabelsDirective } from './multilevellabels.directive';\n\nlet /** @type {?} */ input: string[] = ['border', 'coefficient', 'columnIndex', 'crossesAt', 'crossesInAxis', 'crosshairTooltip', 'description', 'desiredIntervals', 'edgeLabelPlacement', 'enableAutoIntervalOnZooming', 'enableScrollbarOnZooming', 'enableTrim', 'interval', 'intervalType', 'isIndexed', 'isInversed', 'labelFormat', 'labelIntersectAction', 'labelPadding', 'labelPlacement', 'labelPosition', 'labelRotation', 'labelStyle', 'lineBreakAlignment', 'lineStyle', 'logBase', 'majorGridLines', 'majorTickLines', 'maximum', 'maximumLabelWidth', 'maximumLabels', 'minimum', 'minorGridLines', 'minorTickLines', 'minorTicksPerInterval', 'multiLevelLabels', 'name', 'opposedPosition', 'placeNextToAxisLine', 'plotOffset', 'plotOffsetBottom', 'plotOffsetLeft', 'plotOffsetRight', 'plotOffsetTop', 'rangePadding', 'rowIndex', 'scrollbarSettings', 'skeleton', 'skeletonType', 'span', 'startAngle', 'startFromZero', 'stripLines', 'tabIndex', 'tickPosition', 'title', 'titlePadding', 'titleStyle', 'valueType', 'visible', 'zoomFactor', 'zoomPosition'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Axis Directive\n * ```html\n * <e-axes><e-axis></e-axis></e-axes>\n * ```\n */\nexport class AxisDirective extends ComplexBase<AxisDirective> {\npublic directivePropList: any;\npublic childStripLines: any;\npublic childMultiLevelLabels: any;\npublic tags: string[] = ['stripLines', 'multiLevelLabels'];\n/**\n * Border of the multi level labels.\n */\npublic border: any;\n/**\n * The polar radar radius position.\n * \\@default 100\n */\npublic coefficient: any;\n/**\n * Specifies the index of the column where the axis is associated, \n * when the chart area is divided into multiple plot areas by using `columns`. \n * \n * \\@default 0\n */\npublic columnIndex: any;\n/**\n * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.\n * \\@default null\n */\npublic crossesAt: any;\n/**\n * Specifies axis name with which the axis line has to be crossed\n * \\@default null\n */\npublic crossesInAxis: any;\n/**\n * Options to customize the crosshair ToolTip.\n */\npublic crosshairTooltip: any;\n/**\n * Description for axis and its element.\n * \\@default null\n */\npublic description: any;\n/**\n * With this property, you can request axis to calculate intervals approximately equal to your specified interval.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic desiredIntervals: any;\n/**\n * Specifies the position of labels at the edge of the axis.They are, \n * * None: No action will be performed. \n * * Hide: Edge label will be hidden. \n * * Shift: Shifts the edge labels.\n * \\@default 'None'\n */\npublic edgeLabelPlacement: any;\n/**\n * If set to true, axis interval will be calculated automatically with respect to the zoomed range.\n * \\@default true\n */\npublic enableAutoIntervalOnZooming: any;\n/**\n * Enables the scrollbar for zooming.\n * \\@default true\n */\npublic enableScrollbarOnZooming: any;\n/**\n * Specifies the Trim property for an axis.\n * \\@default false\n */\npublic enableTrim: any;\n/**\n * Specifies the interval for an axis.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic interval: any;\n/**\n * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are, \n * * Auto: Defines the interval of the axis based on data. \n * * Years: Defines the interval of the axis in years. \n * * Months: Defines the interval of the axis in months. \n * * Days: Defines the interval of the axis in days. \n * * Hours: Defines the interval of the axis in hours. \n * * Minutes: Defines the interval of the axis in minutes.\n * \\@default 'Auto'\n */\npublic intervalType: any;\n/**\n * Specifies indexed category  axis.\n * \\@default false\n */\npublic isIndexed: any;\n/**\n * It specifies whether the axis to be rendered in inversed manner or not.\n * \\@default false\n */\npublic isInversed: any;\n/**\n * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc. \n * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.\n * \\@default ''\n */\npublic labelFormat: any;\n/**\n * Specifies the actions like `None`, `Hide`, `Trim`, `Wrap`, `MultipleRows`, `Rotate45`, and `Rotate90` \n * when the axis labels intersect with each other.They are, \n * * None: Shows all the labels. \n * * Hide: Hides the label when it intersects. \n * * Trim: Trim the label when it intersects. \n * * Wrap: Wrap the label when it intersects. \n * * MultipleRows: Shows the label in MultipleRows when it intersects. \n * * Rotate45: Rotates the label to 45 degree when it intersects. \n * * Rotate90: Rotates the label to 90 degree when it intersects.\n * \\@default Trim\n */\npublic labelIntersectAction: any;\n/**\n * Specifies the labelPadding from axis\n * \\@default 5\n */\npublic labelPadding: any;\n/**\n * Specifies the placement of a label for category axis. They are, \n * * betweenTicks: Renders the label between the ticks. \n * * onTicks: Renders the label on the ticks.\n * \\@default 'BetweenTicks'\n */\npublic labelPlacement: any;\n/**\n * Specifies the placement of a labels to the axis line. They are, \n * * inside: Renders the labels inside to the axis line. \n * * outside: Renders the labels outside to the axis line.\n * \\@default 'Outside'\n */\npublic labelPosition: any;\n/**\n * The angle to which the axis label gets rotated.\n * \\@default 0\n */\npublic labelRotation: any;\n/**\n * Options to customize the axis label.\n */\npublic labelStyle: any;\n/**\n * It specifies alignment of the line break labels.\n * \\@default 'Center'\n */\npublic lineBreakAlignment: any;\n/**\n * Options for customizing axis lines.\n */\npublic lineStyle: any;\n/**\n * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.\n * \\@default 10\n */\npublic logBase: any;\n/**\n * Options for customizing major grid lines.\n */\npublic majorGridLines: any;\n/**\n * Options for customizing major tick lines.\n */\npublic majorTickLines: any;\n/**\n * Specifies the maximum range of an axis.\n * \\@default null\n */\npublic maximum: any;\n/**\n * Specifies the maximum width of an axis label.\n * \\@default 34.\n */\npublic maximumLabelWidth: any;\n/**\n * The maximum number of label count per 100 pixels with respect to the axis length.\n * \\@default 3\n */\npublic maximumLabels: any;\n/**\n * Specifies the minimum range of an axis.\n * \\@default null\n */\npublic minimum: any;\n/**\n * Options for customizing minor grid lines.\n */\npublic minorGridLines: any;\n/**\n * Options for customizing minor tick lines.\n */\npublic minorTickLines: any;\n/**\n * Specifies the number of minor ticks per interval.\n * \\@default 0\n */\npublic minorTicksPerInterval: any;\n/**\n * Specifies the multi level labels collection for the axis\n */\npublic multiLevelLabels: any;\n/**\n * Unique identifier of an axis. \n * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.\n * \\@default ''\n */\npublic name: any;\n/**\n * If set to true, the axis will render at the opposite side of its default position.\n * \\@default false\n */\npublic opposedPosition: any;\n/**\n * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line\n * \\@default true\n */\npublic placeNextToAxisLine: any;\n/**\n * Left and right padding for the plot area in pixels.\n * \\@default 0\n */\npublic plotOffset: any;\n/**\n * Bottom padding for the plot area in pixels.\n * \\@default null\n */\npublic plotOffsetBottom: any;\n/**\n * Left padding for the plot area in pixels.\n * \\@default null\n */\npublic plotOffsetLeft: any;\n/**\n * Right padding for the plot area in pixels.\n * \\@default null\n */\npublic plotOffsetRight: any;\n/**\n * Top padding for the plot area in pixels.\n * \\@default null\n */\npublic plotOffsetTop: any;\n/**\n * Specifies the padding for the axis range in terms of interval.They are, \n * * none: Padding cannot be applied to the axis. \n * * normal: Padding is applied to the axis based on the range calculation. \n * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range. \n * * round: Axis range is rounded to the nearest possible value divided by the interval.\n * \\@default 'Auto'\n */\npublic rangePadding: any;\n/**\n * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`. \n * \n * \\@default 0\n */\npublic rowIndex: any;\n/**\n * Option to customize scrollbar with lazy loading\n */\npublic scrollbarSettings: any;\n/**\n * Specifies the skeleton format in which the dateTime format will process.\n * \\@default ''\n */\npublic skeleton: any;\n/**\n * It specifies the type of format to be used in dateTime format process.\n * \\@default 'DateTime'\n * @deprecated\n */\npublic skeletonType: any;\n/**\n * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.\n * \\@default 1\n */\npublic span: any;\n/**\n * The start angle for the series.\n * \\@default 0\n */\npublic startAngle: any;\n/**\n * It specifies whether the axis to be start from zero.\n * \\@default true\n */\npublic startFromZero: any;\n/**\n * Specifies the stripLine collection for the axis\n */\npublic stripLines: any;\n/**\n * TabIndex value for the axis.\n * \\@default 2\n */\npublic tabIndex: any;\n/**\n * Specifies the placement of a ticks to the axis line. They are, \n * * inside: Renders the ticks inside to the axis line. \n * * outside: Renders the ticks outside to the axis line.\n * \\@default 'Outside'\n */\npublic tickPosition: any;\n/**\n * Specifies the title of an axis.\n * \\@default ''\n */\npublic title: any;\n/**\n * Specifies the titlePadding from axis label\n * \\@default 5\n */\npublic titlePadding: any;\n/**\n * Options for customizing the axis title.\n */\npublic titleStyle: any;\n/**\n * Specifies the type of data the axis is handling. \n * * Double:  Renders a numeric axis. \n * * DateTime: Renders a dateTime axis. \n * * Category: Renders a category axis. \n * * Logarithmic: Renders a log axis.\n * \\@default 'Double'\n * \\@blazortype Syncfusion.EJ2.Blazor.Charts.ValueType\n * \\@isenumeration true\n */\npublic valueType: any;\n/**\n * If set to true, axis label will be visible.\n * \\@default true\n */\npublic visible: any;\n/**\n * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.\n * \\@default 1\n */\npublic zoomFactor: any;\n/**\n * Position of the zoomed axis. Value ranges from 0 to 1.\n * \\@default 0\n */\npublic zoomPosition: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-axes>e-axis',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childStripLines: new ContentChild(StripLinesDirective), \n        childMultiLevelLabels: new ContentChild(MultiLevelLabelsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction AxisDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAxisDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAxisDirective.ctorParameters;\n/** @type {?} */\nAxisDirective.prototype.directivePropList;\n/** @type {?} */\nAxisDirective.prototype.childStripLines;\n/** @type {?} */\nAxisDirective.prototype.childMultiLevelLabels;\n/** @type {?} */\nAxisDirective.prototype.tags;\n/**\n * Border of the multi level labels.\n * @type {?}\n */\nAxisDirective.prototype.border;\n/**\n * The polar radar radius position.\n * \\@default 100\n * @type {?}\n */\nAxisDirective.prototype.coefficient;\n/**\n * Specifies the index of the column where the axis is associated, \n * when the chart area is divided into multiple plot areas by using `columns`. \n * \n * \\@default 0\n * @type {?}\n */\nAxisDirective.prototype.columnIndex;\n/**\n * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.crossesAt;\n/**\n * Specifies axis name with which the axis line has to be crossed\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.crossesInAxis;\n/**\n * Options to customize the crosshair ToolTip.\n * @type {?}\n */\nAxisDirective.prototype.crosshairTooltip;\n/**\n * Description for axis and its element.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.description;\n/**\n * With this property, you can request axis to calculate intervals approximately equal to your specified interval.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nAxisDirective.prototype.desiredIntervals;\n/**\n * Specifies the position of labels at the edge of the axis.They are, \n * * None: No action will be performed. \n * * Hide: Edge label will be hidden. \n * * Shift: Shifts the edge labels.\n * \\@default 'None'\n * @type {?}\n */\nAxisDirective.prototype.edgeLabelPlacement;\n/**\n * If set to true, axis interval will be calculated automatically with respect to the zoomed range.\n * \\@default true\n * @type {?}\n */\nAxisDirective.prototype.enableAutoIntervalOnZooming;\n/**\n * Enables the scrollbar for zooming.\n * \\@default true\n * @type {?}\n */\nAxisDirective.prototype.enableScrollbarOnZooming;\n/**\n * Specifies the Trim property for an axis.\n * \\@default false\n * @type {?}\n */\nAxisDirective.prototype.enableTrim;\n/**\n * Specifies the interval for an axis.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nAxisDirective.prototype.interval;\n/**\n * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are, \n * * Auto: Defines the interval of the axis based on data. \n * * Years: Defines the interval of the axis in years. \n * * Months: Defines the interval of the axis in months. \n * * Days: Defines the interval of the axis in days. \n * * Hours: Defines the interval of the axis in hours. \n * * Minutes: Defines the interval of the axis in minutes.\n * \\@default 'Auto'\n * @type {?}\n */\nAxisDirective.prototype.intervalType;\n/**\n * Specifies indexed category  axis.\n * \\@default false\n * @type {?}\n */\nAxisDirective.prototype.isIndexed;\n/**\n * It specifies whether the axis to be rendered in inversed manner or not.\n * \\@default false\n * @type {?}\n */\nAxisDirective.prototype.isInversed;\n/**\n * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc. \n * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.\n * \\@default ''\n * @type {?}\n */\nAxisDirective.prototype.labelFormat;\n/**\n * Specifies the actions like `None`, `Hide`, `Trim`, `Wrap`, `MultipleRows`, `Rotate45`, and `Rotate90` \n * when the axis labels intersect with each other.They are, \n * * None: Shows all the labels. \n * * Hide: Hides the label when it intersects. \n * * Trim: Trim the label when it intersects. \n * * Wrap: Wrap the label when it intersects. \n * * MultipleRows: Shows the label in MultipleRows when it intersects. \n * * Rotate45: Rotates the label to 45 degree when it intersects. \n * * Rotate90: Rotates the label to 90 degree when it intersects.\n * \\@default Trim\n * @type {?}\n */\nAxisDirective.prototype.labelIntersectAction;\n/**\n * Specifies the labelPadding from axis\n * \\@default 5\n * @type {?}\n */\nAxisDirective.prototype.labelPadding;\n/**\n * Specifies the placement of a label for category axis. They are, \n * * betweenTicks: Renders the label between the ticks. \n * * onTicks: Renders the label on the ticks.\n * \\@default 'BetweenTicks'\n * @type {?}\n */\nAxisDirective.prototype.labelPlacement;\n/**\n * Specifies the placement of a labels to the axis line. They are, \n * * inside: Renders the labels inside to the axis line. \n * * outside: Renders the labels outside to the axis line.\n * \\@default 'Outside'\n * @type {?}\n */\nAxisDirective.prototype.labelPosition;\n/**\n * The angle to which the axis label gets rotated.\n * \\@default 0\n * @type {?}\n */\nAxisDirective.prototype.labelRotation;\n/**\n * Options to customize the axis label.\n * @type {?}\n */\nAxisDirective.prototype.labelStyle;\n/**\n * It specifies alignment of the line break labels.\n * \\@default 'Center'\n * @type {?}\n */\nAxisDirective.prototype.lineBreakAlignment;\n/**\n * Options for customizing axis lines.\n * @type {?}\n */\nAxisDirective.prototype.lineStyle;\n/**\n * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.\n * \\@default 10\n * @type {?}\n */\nAxisDirective.prototype.logBase;\n/**\n * Options for customizing major grid lines.\n * @type {?}\n */\nAxisDirective.prototype.majorGridLines;\n/**\n * Options for customizing major tick lines.\n * @type {?}\n */\nAxisDirective.prototype.majorTickLines;\n/**\n * Specifies the maximum range of an axis.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.maximum;\n/**\n * Specifies the maximum width of an axis label.\n * \\@default 34.\n * @type {?}\n */\nAxisDirective.prototype.maximumLabelWidth;\n/**\n * The maximum number of label count per 100 pixels with respect to the axis length.\n * \\@default 3\n * @type {?}\n */\nAxisDirective.prototype.maximumLabels;\n/**\n * Specifies the minimum range of an axis.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.minimum;\n/**\n * Options for customizing minor grid lines.\n * @type {?}\n */\nAxisDirective.prototype.minorGridLines;\n/**\n * Options for customizing minor tick lines.\n * @type {?}\n */\nAxisDirective.prototype.minorTickLines;\n/**\n * Specifies the number of minor ticks per interval.\n * \\@default 0\n * @type {?}\n */\nAxisDirective.prototype.minorTicksPerInterval;\n/**\n * Specifies the multi level labels collection for the axis\n * @type {?}\n */\nAxisDirective.prototype.multiLevelLabels;\n/**\n * Unique identifier of an axis. \n * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.\n * \\@default ''\n * @type {?}\n */\nAxisDirective.prototype.name;\n/**\n * If set to true, the axis will render at the opposite side of its default position.\n * \\@default false\n * @type {?}\n */\nAxisDirective.prototype.opposedPosition;\n/**\n * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line\n * \\@default true\n * @type {?}\n */\nAxisDirective.prototype.placeNextToAxisLine;\n/**\n * Left and right padding for the plot area in pixels.\n * \\@default 0\n * @type {?}\n */\nAxisDirective.prototype.plotOffset;\n/**\n * Bottom padding for the plot area in pixels.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.plotOffsetBottom;\n/**\n * Left padding for the plot area in pixels.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.plotOffsetLeft;\n/**\n * Right padding for the plot area in pixels.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.plotOffsetRight;\n/**\n * Top padding for the plot area in pixels.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.plotOffsetTop;\n/**\n * Specifies the padding for the axis range in terms of interval.They are, \n * * none: Padding cannot be applied to the axis. \n * * normal: Padding is applied to the axis based on the range calculation. \n * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range. \n * * round: Axis range is rounded to the nearest possible value divided by the interval.\n * \\@default 'Auto'\n * @type {?}\n */\nAxisDirective.prototype.rangePadding;\n/**\n * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`. \n * \n * \\@default 0\n * @type {?}\n */\nAxisDirective.prototype.rowIndex;\n/**\n * Option to customize scrollbar with lazy loading\n * @type {?}\n */\nAxisDirective.prototype.scrollbarSettings;\n/**\n * Specifies the skeleton format in which the dateTime format will process.\n * \\@default ''\n * @type {?}\n */\nAxisDirective.prototype.skeleton;\n/**\n * It specifies the type of format to be used in dateTime format process.\n * \\@default 'DateTime'\n * @deprecated\n * @type {?}\n */\nAxisDirective.prototype.skeletonType;\n/**\n * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.\n * \\@default 1\n * @type {?}\n */\nAxisDirective.prototype.span;\n/**\n * The start angle for the series.\n * \\@default 0\n * @type {?}\n */\nAxisDirective.prototype.startAngle;\n/**\n * It specifies whether the axis to be start from zero.\n * \\@default true\n * @type {?}\n */\nAxisDirective.prototype.startFromZero;\n/**\n * Specifies the stripLine collection for the axis\n * @type {?}\n */\nAxisDirective.prototype.stripLines;\n/**\n * TabIndex value for the axis.\n * \\@default 2\n * @type {?}\n */\nAxisDirective.prototype.tabIndex;\n/**\n * Specifies the placement of a ticks to the axis line. They are, \n * * inside: Renders the ticks inside to the axis line. \n * * outside: Renders the ticks outside to the axis line.\n * \\@default 'Outside'\n * @type {?}\n */\nAxisDirective.prototype.tickPosition;\n/**\n * Specifies the title of an axis.\n * \\@default ''\n * @type {?}\n */\nAxisDirective.prototype.title;\n/**\n * Specifies the titlePadding from axis label\n * \\@default 5\n * @type {?}\n */\nAxisDirective.prototype.titlePadding;\n/**\n * Options for customizing the axis title.\n * @type {?}\n */\nAxisDirective.prototype.titleStyle;\n/**\n * Specifies the type of data the axis is handling. \n * * Double:  Renders a numeric axis. \n * * DateTime: Renders a dateTime axis. \n * * Category: Renders a category axis. \n * * Logarithmic: Renders a log axis.\n * \\@default 'Double'\n * \\@blazortype Syncfusion.EJ2.Blazor.Charts.ValueType\n * \\@isenumeration true\n * @type {?}\n */\nAxisDirective.prototype.valueType;\n/**\n * If set to true, axis label will be visible.\n * \\@default true\n * @type {?}\n */\nAxisDirective.prototype.visible;\n/**\n * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.\n * \\@default 1\n * @type {?}\n */\nAxisDirective.prototype.zoomFactor;\n/**\n * Position of the zoomed axis. Value ranges from 0 to 1.\n * \\@default 0\n * @type {?}\n */\nAxisDirective.prototype.zoomPosition;\n/** @type {?} */\nAxisDirective.prototype.viewContainerRef;\n}\n\n/**\n * Axis Array Directive\n */\nexport class AxesDirective extends ArrayBase<AxesDirective> {\nconstructor() {\n        super('axes');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chart>e-axes',\n    queries: {\n        children: new ContentChildren(AxisDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AxesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAxesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAxesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\nimport { CategoriesDirective } from './categories.directive';\n\nlet /** @type {?} */ input: string[] = ['alignment', 'border', 'categories', 'overflow', 'textStyle'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * MultiLevelLabel Directive\n * ```html\n * <e-axis>\n * <e-multilevellabels>\n * <e-multilevellabel></e-multilevellabel>\n * </e-multilevellabels>\n * </e-axis>\n * ```\n */\nexport class MultiLevelLabelDirective extends ComplexBase<MultiLevelLabelDirective> {\npublic directivePropList: any;\npublic childCategories: any;\npublic tags: string[] = ['categories'];\n/**\n * Defines the position of the multi level labels. They are, \n * * Near: Places the multi level labels at Near. \n * * Center: Places the multi level labels at Center. \n * * Far: Places the multi level labels at Far.\n * \\@default 'Center'\n */\npublic alignment: any;\n/**\n * Border of the multi level labels.\n */\npublic border: any;\n/**\n * multi level categories for multi level labels.\n */\npublic categories: any;\n/**\n * Defines the textOverFlow for multi level labels. They are, \n * * Trim: Trim textOverflow for multi level labels. \n * * Wrap: Wrap textOverflow for multi level labels. \n * * none: None textOverflow for multi level labels.\n * \\@default 'Wrap'\n */\npublic overflow: any;\n/**\n * Options to customize the multi level labels.\n */\npublic textStyle: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-axis>e-multilevellabels>e-multilevellabel',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childCategories: new ContentChild(CategoriesDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction MultiLevelLabelDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMultiLevelLabelDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMultiLevelLabelDirective.ctorParameters;\n/** @type {?} */\nMultiLevelLabelDirective.prototype.directivePropList;\n/** @type {?} */\nMultiLevelLabelDirective.prototype.childCategories;\n/** @type {?} */\nMultiLevelLabelDirective.prototype.tags;\n/**\n * Defines the position of the multi level labels. They are, \n * * Near: Places the multi level labels at Near. \n * * Center: Places the multi level labels at Center. \n * * Far: Places the multi level labels at Far.\n * \\@default 'Center'\n * @type {?}\n */\nMultiLevelLabelDirective.prototype.alignment;\n/**\n * Border of the multi level labels.\n * @type {?}\n */\nMultiLevelLabelDirective.prototype.border;\n/**\n * multi level categories for multi level labels.\n * @type {?}\n */\nMultiLevelLabelDirective.prototype.categories;\n/**\n * Defines the textOverFlow for multi level labels. They are, \n * * Trim: Trim textOverflow for multi level labels. \n * * Wrap: Wrap textOverflow for multi level labels. \n * * none: None textOverflow for multi level labels.\n * \\@default 'Wrap'\n * @type {?}\n */\nMultiLevelLabelDirective.prototype.overflow;\n/**\n * Options to customize the multi level labels.\n * @type {?}\n */\nMultiLevelLabelDirective.prototype.textStyle;\n/** @type {?} */\nMultiLevelLabelDirective.prototype.viewContainerRef;\n}\n\n/**\n * MultiLevelLabel Array Directive\n */\nexport class MultiLevelLabelsDirective extends ArrayBase<MultiLevelLabelsDirective> {\nconstructor() {\n        super('multilevellabels');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-axis>e-multilevellabels',\n    queries: {\n        children: new ContentChildren(MultiLevelLabelDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MultiLevelLabelsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMultiLevelLabelsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMultiLevelLabelsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['customAttributes', 'end', 'maximumTextWidth', 'start', 'text', 'type'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * MultiLevelLabels Directive\n * ```html\n * <e-multilevellabels>\n * <e-multilevellabel>\n * <e-Categories>\n * <e-Category>\n * </e-Category>\n * </e-Categories>\n * </e-multilevellabel>\n * </e-multilevellabels>\n * ```\n */\nexport class CategoryDirective extends ComplexBase<CategoryDirective> {\npublic directivePropList: any;\n/**\n * Border type for labels \n * * Rectangle \n * * Without Top Border \n * * Without Top and BottomBorder \n * * Without Border \n * * Brace \n * * CurlyBrace\n * \\@default 'Rectangle'\n * \\@aspdefaultvalueignore\n * \\@blazordefaultvalueignore\n */\npublic type: any;\n/**\n * multi level labels custom data.\n * \\@default null\n */\npublic customAttributes: any;\n/**\n * End value of the multi level labels\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic end: any;\n/**\n * Maximum width of the text for multi level labels.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic maximumTextWidth: any;\n/**\n * Start value of the multi level labels\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic start: any;\n/**\n * multi level labels text.\n * \\@default ''\n */\npublic text: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-multilevellabel>e-categories>e-category',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction CategoryDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nCategoryDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCategoryDirective.ctorParameters;\n/** @type {?} */\nCategoryDirective.prototype.directivePropList;\n/**\n * Border type for labels \n * * Rectangle \n * * Without Top Border \n * * Without Top and BottomBorder \n * * Without Border \n * * Brace \n * * CurlyBrace\n * \\@default 'Rectangle'\n * \\@aspdefaultvalueignore\n * \\@blazordefaultvalueignore\n * @type {?}\n */\nCategoryDirective.prototype.type;\n/**\n * multi level labels custom data.\n * \\@default null\n * @type {?}\n */\nCategoryDirective.prototype.customAttributes;\n/**\n * End value of the multi level labels\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nCategoryDirective.prototype.end;\n/**\n * Maximum width of the text for multi level labels.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nCategoryDirective.prototype.maximumTextWidth;\n/**\n * Start value of the multi level labels\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nCategoryDirective.prototype.start;\n/**\n * multi level labels text.\n * \\@default ''\n * @type {?}\n */\nCategoryDirective.prototype.text;\n/** @type {?} */\nCategoryDirective.prototype.viewContainerRef;\n}\n\n/**\n * Category Array Directive\n */\nexport class CategoriesDirective extends ArrayBase<CategoriesDirective> {\nconstructor() {\n        super('categories');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-multilevellabel>e-categories',\n    queries: {\n        children: new ContentChildren(CategoryDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CategoriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nCategoriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCategoriesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['border', 'color', 'dashArray', 'end', 'horizontalAlignment', 'isRepeat', 'isSegmented', 'opacity', 'repeatEvery', 'repeatUntil', 'rotation', 'segmentAxisName', 'segmentEnd', 'segmentStart', 'size', 'sizeType', 'start', 'startFromAxis', 'text', 'textStyle', 'verticalAlignment', 'visible', 'zIndex'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * StripLine Directive\n * ```html\n * <e-axis>\n * <e-striplines>\n * <e-stripline></e-stripline>\n * </e-striplines>\n * </e-axis>\n * ```\n */\nexport class StripLineDirective extends ComplexBase<StripLineDirective> {\npublic directivePropList: any;\n/**\n * Border of the strip line.\n */\npublic border: any;\n/**\n * Color of the strip line.\n * \\@default '#808080'\n */\npublic color: any;\n/**\n * Dash Array of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic dashArray: any;\n/**\n * End value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic end: any;\n/**\n * Defines the position of the strip line text horizontally. They are, \n * * Start: Places the strip line text at the start. \n * * Middle: Places the strip line text in the middle. \n * * End: Places the strip line text at the end.\n * \\@default 'Middle'\n */\npublic horizontalAlignment: any;\n/**\n * isRepeat value of the strip line.\n * \\@default false\n * \\@aspdefaultvalueignore\n */\npublic isRepeat: any;\n/**\n * isSegmented value of the strip line\n * \\@default false\n * \\@aspdefaultvalueignore\n */\npublic isSegmented: any;\n/**\n * Strip line Opacity\n * \\@default 1\n */\npublic opacity: any;\n/**\n * repeatEvery value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic repeatEvery: any;\n/**\n * repeatUntil value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic repeatUntil: any;\n/**\n * The angle to which the strip line text gets rotated.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic rotation: any;\n/**\n * segmentAxisName of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic segmentAxisName: any;\n/**\n * segmentEnd value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic segmentEnd: any;\n/**\n * segmentStart value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic segmentStart: any;\n/**\n * Size of the strip line, when it starts from the origin.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic size: any;\n/**\n * Size type of the strip line\n * \\@default Auto\n */\npublic sizeType: any;\n/**\n * Start value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic start: any;\n/**\n *  If set true, strip line get render from axis origin.\n * \n *  \\@default false\n * \n */\npublic startFromAxis: any;\n/**\n * Strip line text.\n * \\@default ''\n */\npublic text: any;\n/**\n * Options to customize the strip line text.\n */\npublic textStyle: any;\n/**\n * Defines the position of the strip line text vertically. They are, \n * * Start: Places the strip line text at the start. \n * * Middle: Places the strip line text in the middle. \n * * End: Places the strip line text at the end.\n * \\@default 'Middle'\n */\npublic verticalAlignment: any;\n/**\n * If set true, strip line for axis renders.\n * \\@default true\n */\npublic visible: any;\n/**\n * Specifies the order of the strip line. They are, \n * * Behind: Places the strip line behind the series elements. \n * * Over: Places the strip line over the series elements.\n * \\@default 'Behind'\n */\npublic zIndex: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-axis>e-striplines>e-stripline',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StripLineDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStripLineDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStripLineDirective.ctorParameters;\n/** @type {?} */\nStripLineDirective.prototype.directivePropList;\n/**\n * Border of the strip line.\n * @type {?}\n */\nStripLineDirective.prototype.border;\n/**\n * Color of the strip line.\n * \\@default '#808080'\n * @type {?}\n */\nStripLineDirective.prototype.color;\n/**\n * Dash Array of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.dashArray;\n/**\n * End value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.end;\n/**\n * Defines the position of the strip line text horizontally. They are, \n * * Start: Places the strip line text at the start. \n * * Middle: Places the strip line text in the middle. \n * * End: Places the strip line text at the end.\n * \\@default 'Middle'\n * @type {?}\n */\nStripLineDirective.prototype.horizontalAlignment;\n/**\n * isRepeat value of the strip line.\n * \\@default false\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.isRepeat;\n/**\n * isSegmented value of the strip line\n * \\@default false\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.isSegmented;\n/**\n * Strip line Opacity\n * \\@default 1\n * @type {?}\n */\nStripLineDirective.prototype.opacity;\n/**\n * repeatEvery value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.repeatEvery;\n/**\n * repeatUntil value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.repeatUntil;\n/**\n * The angle to which the strip line text gets rotated.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.rotation;\n/**\n * segmentAxisName of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.segmentAxisName;\n/**\n * segmentEnd value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.segmentEnd;\n/**\n * segmentStart value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.segmentStart;\n/**\n * Size of the strip line, when it starts from the origin.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.size;\n/**\n * Size type of the strip line\n * \\@default Auto\n * @type {?}\n */\nStripLineDirective.prototype.sizeType;\n/**\n * Start value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.start;\n/**\n *  If set true, strip line get render from axis origin.\n * \n *  \\@default false\n * \n * @type {?}\n */\nStripLineDirective.prototype.startFromAxis;\n/**\n * Strip line text.\n * \\@default ''\n * @type {?}\n */\nStripLineDirective.prototype.text;\n/**\n * Options to customize the strip line text.\n * @type {?}\n */\nStripLineDirective.prototype.textStyle;\n/**\n * Defines the position of the strip line text vertically. They are, \n * * Start: Places the strip line text at the start. \n * * Middle: Places the strip line text in the middle. \n * * End: Places the strip line text at the end.\n * \\@default 'Middle'\n * @type {?}\n */\nStripLineDirective.prototype.verticalAlignment;\n/**\n * If set true, strip line for axis renders.\n * \\@default true\n * @type {?}\n */\nStripLineDirective.prototype.visible;\n/**\n * Specifies the order of the strip line. They are, \n * * Behind: Places the strip line behind the series elements. \n * * Over: Places the strip line over the series elements.\n * \\@default 'Behind'\n * @type {?}\n */\nStripLineDirective.prototype.zIndex;\n/** @type {?} */\nStripLineDirective.prototype.viewContainerRef;\n}\n\n/**\n * StripLine Array Directive\n */\nexport class StripLinesDirective extends ArrayBase<StripLinesDirective> {\nconstructor() {\n        super('striplines');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-axis>e-striplines',\n    queries: {\n        children: new ContentChildren(StripLineDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StripLinesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStripLinesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStripLinesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { TrendlinesDirective } from './trendlines.directive';\nimport { SegmentsDirective } from './segments.directive';\n\nlet /** @type {?} */ input: string[] = ['animation', 'bearFillColor', 'binInterval', 'border', 'boxPlotMode', 'bullFillColor', 'cardinalSplineTension', 'close', 'colorName', 'columnSpacing', 'columnWidth', 'connector', 'cornerRadius', 'dashArray', 'dataSource', 'dragSettings', 'drawType', 'emptyPointSettings', 'enableComplexProperty', 'enableSolidCandles', 'enableTooltip', 'errorBar', 'fill', 'high', 'intermediateSumIndexes', 'isClosed', 'legendImageUrl', 'legendShape', 'low', 'marker', 'maxRadius', 'minRadius', 'name', 'negativeFillColor', 'nonHighlightStyle', 'opacity', 'open', 'pointColorMapping', 'query', 'segmentAxis', 'segments', 'selectionStyle', 'showMean', 'showNormalDistribution', 'size', 'splineType', 'stackingGroup', 'sumIndexes', 'summaryFillColor', 'tooltipFormat', 'tooltipMappingName', 'trendlines', 'type', 'unSelectedStyle', 'visible', 'volume', 'width', 'xAxisName', 'xName', 'yAxisName', 'yName', 'zOrder'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Series Directive\n * ```html\n * <e-series-collection>\n * <e-series></e-series>\n * </e-series-collection>\n * ```\n */\nexport class SeriesDirective extends ComplexBase<SeriesDirective> {\npublic directivePropList: any;\npublic childTrendlines: any;\npublic childSegments: any;\npublic tags: string[] = ['trendlines', 'segments'];\n/**\n * The type of the series are \n * * Line \n * * Column \n * * Area \n * * Bar \n * * Histogram \n * * StackingColumn \n * * StackingArea \n * * StackingBar \n * * StepLine \n * * StepArea \n * * Scatter \n * * Spline \n * * StackingColumn100 \n * * StackingBar100 \n * * StackingArea100 \n * * RangeColumn \n * * Hilo \n * * HiloOpenClose \n * * Waterfall \n * * RangeArea \n * * SplineRangeArea \n * * Bubble \n * * Candle \n * * Polar \n * * Radar \n * * BoxAndWhisker \n * * Pareto\n * \\@default 'Line'\n */\npublic type: any;\n/**\n * Options to customizing animation for the series.\n */\npublic animation: any;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is less than the closing price.\n * \\@default '#2ecd71'\n */\npublic bearFillColor: any;\n/**\n * The bin interval of each histogram points.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic binInterval: any;\n/**\n * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.\n */\npublic border: any;\n/**\n * The mode of the box and whisker char series. They are, \n * Exclusive \n * Inclusive \n * Normal\n * \\@default 'Normal'\n */\npublic boxPlotMode: any;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is higher than the closing price.\n * \\@default '#e74c3d'\n */\npublic bullFillColor: any;\n/**\n * It defines tension of cardinal spline types\n * \\@default 0.5\n */\npublic cardinalSplineTension: any;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic close: any;\n/**\n * The Data Source field that contains the color mapping value. \n * It is applicable for range color mapping properly.\n */\npublic colorName: any;\n/**\n * To render the column series points with particular column spacing. It takes value from 0 - 1.\n * \\@default 0\n */\npublic columnSpacing: any;\n/**\n * To render the column series points with particular column width. If the series type is histogram the \n * default value is 1 otherwise 0.7.\n * \\@default null\n * \\@aspdefaultvalueignore\n * \\@blazordefaultvalue Double.NaN\n */\npublic columnWidth: any;\n/**\n * Defines the appearance of line connecting adjacent points in waterfall charts.\n */\npublic connector: any;\n/**\n * To render the column series points with particular rounded corner.\n */\npublic cornerRadius: any;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n */\npublic dashArray: any;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * \\@default ''\n */\npublic dataSource: any;\n/**\n * Options to customize the drag settings for series\n */\npublic dragSettings: any;\n/**\n * Type of series to be drawn in radar or polar series. They are \n *  'Line' \n *  'Column' \n *  'Area' \n *  'Scatter' \n *  'Spline' \n *  'StackingColumn' \n *  'StackingArea' \n *  'RangeColumn' \n *  'SplineArea'\n * \\@default 'Line'\n */\npublic drawType: any;\n/**\n * options to customize the empty points in series\n */\npublic emptyPointSettings: any;\n/**\n * This property used to improve chart performance via data mapping for series dataSource.\n * \\@default false\n */\npublic enableComplexProperty: any;\n/**\n * This property is applicable for candle series. \n * It enables/disables to visually compare the current values with the previous values in stock.\n * \\@default false\n */\npublic enableSolidCandles: any;\n/**\n * If set true, the Tooltip for series will be visible.\n * \\@default true\n */\npublic enableTooltip: any;\n/**\n * Options for displaying and customizing error bar for individual point in a series.\n */\npublic errorBar: any;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n */\npublic fill: any;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic high: any;\n/**\n * Defines the collection of indexes of the intermediate summary columns in waterfall charts.\n * \\@default []\n * \\@asptype int[]\n */\npublic intermediateSumIndexes: any;\n/**\n * Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.\n * \\@default true\n */\npublic isClosed: any;\n/**\n * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.\n * \\@default ''\n */\npublic legendImageUrl: any;\n/**\n * The shape of the legend. Each series has its own legend shape. They are, \n * * Circle \n * * Rectangle \n * * Triangle \n * * Diamond \n * * Cross \n * * HorizontalLine \n * * VerticalLine \n * * Pentagon \n * * InvertedTriangle \n * * SeriesType \n * * Image\n * \\@default 'SeriesType'\n */\npublic legendShape: any;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic low: any;\n/**\n * Options for displaying and customizing markers for individual points in a series.\n */\npublic marker: any;\n/**\n * Maximum radius\n * \\@default 3\n */\npublic maxRadius: any;\n/**\n * Minimum radius\n * \\@default 1\n */\npublic minRadius: any;\n/**\n * The name of the series visible in legend.\n * \\@default ''\n */\npublic name: any;\n/**\n * Defines the visual representation of the negative changes in waterfall charts.\n * \\@default '#C64E4A'\n */\npublic negativeFillColor: any;\n/**\n * Custom style for the non-highlighted series or points.\n * \\@default null\n */\npublic nonHighlightStyle: any;\n/**\n * The opacity of the series.\n * \\@default 1\n */\npublic opacity: any;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic open: any;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n */\npublic pointColorMapping: any;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * \\@default ''\n */\npublic query: any;\n/**\n * Defines the axis, based on which the line series will be split.\n */\npublic segmentAxis: any;\n/**\n * Defines the collection of regions that helps to differentiate a line series.\n */\npublic segments: any;\n/**\n * Custom style for the selected series or points.\n * \\@default null\n */\npublic selectionStyle: any;\n/**\n * If set true, the mean value for box and whisker will be visible.\n * \\@default true\n */\npublic showMean: any;\n/**\n * The normal distribution of histogram series.\n * \\@default false\n */\npublic showNormalDistribution: any;\n/**\n * The DataSource field that contains the size value of y\n * \\@default ''\n */\npublic size: any;\n/**\n * Defines type of spline to be rendered.\n * \\@default 'Natural'\n */\npublic splineType: any;\n/**\n * This property allows grouping series in `stacked column / bar` charts. \n * Any string value can be provided to the stackingGroup property. \n * If any two or above series have the same value, those series will be grouped together.\n * \\@default ''\n */\npublic stackingGroup: any;\n/**\n * Defines the collection of indexes of the overall summary columns in waterfall charts.\n * \\@default []\n * \\@asptype int[]\n */\npublic sumIndexes: any;\n/**\n * Defines the visual representation of the summaries in waterfall charts.\n * \\@default '#4E81BC'\n */\npublic summaryFillColor: any;\n/**\n * user can format now each series tooltip format separately.\n * \\@default ''\n */\npublic tooltipFormat: any;\n/**\n * The provided value will be considered as a Tooltip name\n * \\@default ''\n */\npublic tooltipMappingName: any;\n/**\n * Defines the collection of trendlines that are used to predict the trend\n */\npublic trendlines: any;\n/**\n * Custom style for the deselected series or points.\n * \\@default null\n */\npublic unSelectedStyle: any;\n/**\n * Specifies the visibility of series.\n * \\@default true\n */\npublic visible: any;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * \\@default ''\n */\npublic volume: any;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n */\npublic width: any;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n */\npublic xAxisName: any;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic xName: any;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n */\npublic yAxisName: any;\n/**\n * The DataSource field that contains the y value.\n * \\@default ''\n */\npublic yName: any;\n/**\n * The z order of the series.\n * \\@default 0\n */\npublic zOrder: any;\n    \n    @Template()\npublic dataLabel_template: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-series-collection>e-series',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childTrendlines: new ContentChild(TrendlinesDirective), \n        childSegments: new ContentChild(SegmentsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dataLabel_template': [{ type: ContentChild, args: ['dataLabelTemplate', ] },],\n};\n}\n\nfunction SeriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSeriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSeriesDirective.ctorParameters;\n/** @type {?} */\nSeriesDirective.propDecorators;\n/** @type {?} */\nSeriesDirective.prototype.directivePropList;\n/** @type {?} */\nSeriesDirective.prototype.childTrendlines;\n/** @type {?} */\nSeriesDirective.prototype.childSegments;\n/** @type {?} */\nSeriesDirective.prototype.tags;\n/**\n * The type of the series are \n * * Line \n * * Column \n * * Area \n * * Bar \n * * Histogram \n * * StackingColumn \n * * StackingArea \n * * StackingBar \n * * StepLine \n * * StepArea \n * * Scatter \n * * Spline \n * * StackingColumn100 \n * * StackingBar100 \n * * StackingArea100 \n * * RangeColumn \n * * Hilo \n * * HiloOpenClose \n * * Waterfall \n * * RangeArea \n * * SplineRangeArea \n * * Bubble \n * * Candle \n * * Polar \n * * Radar \n * * BoxAndWhisker \n * * Pareto\n * \\@default 'Line'\n * @type {?}\n */\nSeriesDirective.prototype.type;\n/**\n * Options to customizing animation for the series.\n * @type {?}\n */\nSeriesDirective.prototype.animation;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is less than the closing price.\n * \\@default '#2ecd71'\n * @type {?}\n */\nSeriesDirective.prototype.bearFillColor;\n/**\n * The bin interval of each histogram points.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nSeriesDirective.prototype.binInterval;\n/**\n * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.\n * @type {?}\n */\nSeriesDirective.prototype.border;\n/**\n * The mode of the box and whisker char series. They are, \n * Exclusive \n * Inclusive \n * Normal\n * \\@default 'Normal'\n * @type {?}\n */\nSeriesDirective.prototype.boxPlotMode;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is higher than the closing price.\n * \\@default '#e74c3d'\n * @type {?}\n */\nSeriesDirective.prototype.bullFillColor;\n/**\n * It defines tension of cardinal spline types\n * \\@default 0.5\n * @type {?}\n */\nSeriesDirective.prototype.cardinalSplineTension;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.close;\n/**\n * The Data Source field that contains the color mapping value. \n * It is applicable for range color mapping properly.\n * @type {?}\n */\nSeriesDirective.prototype.colorName;\n/**\n * To render the column series points with particular column spacing. It takes value from 0 - 1.\n * \\@default 0\n * @type {?}\n */\nSeriesDirective.prototype.columnSpacing;\n/**\n * To render the column series points with particular column width. If the series type is histogram the \n * default value is 1 otherwise 0.7.\n * \\@default null\n * \\@aspdefaultvalueignore\n * \\@blazordefaultvalue Double.NaN\n * @type {?}\n */\nSeriesDirective.prototype.columnWidth;\n/**\n * Defines the appearance of line connecting adjacent points in waterfall charts.\n * @type {?}\n */\nSeriesDirective.prototype.connector;\n/**\n * To render the column series points with particular rounded corner.\n * @type {?}\n */\nSeriesDirective.prototype.cornerRadius;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n * @type {?}\n */\nSeriesDirective.prototype.dashArray;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.dataSource;\n/**\n * Options to customize the drag settings for series\n * @type {?}\n */\nSeriesDirective.prototype.dragSettings;\n/**\n * Type of series to be drawn in radar or polar series. They are \n *  'Line' \n *  'Column' \n *  'Area' \n *  'Scatter' \n *  'Spline' \n *  'StackingColumn' \n *  'StackingArea' \n *  'RangeColumn' \n *  'SplineArea'\n * \\@default 'Line'\n * @type {?}\n */\nSeriesDirective.prototype.drawType;\n/**\n * options to customize the empty points in series\n * @type {?}\n */\nSeriesDirective.prototype.emptyPointSettings;\n/**\n * This property used to improve chart performance via data mapping for series dataSource.\n * \\@default false\n * @type {?}\n */\nSeriesDirective.prototype.enableComplexProperty;\n/**\n * This property is applicable for candle series. \n * It enables/disables to visually compare the current values with the previous values in stock.\n * \\@default false\n * @type {?}\n */\nSeriesDirective.prototype.enableSolidCandles;\n/**\n * If set true, the Tooltip for series will be visible.\n * \\@default true\n * @type {?}\n */\nSeriesDirective.prototype.enableTooltip;\n/**\n * Options for displaying and customizing error bar for individual point in a series.\n * @type {?}\n */\nSeriesDirective.prototype.errorBar;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n * @type {?}\n */\nSeriesDirective.prototype.fill;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.high;\n/**\n * Defines the collection of indexes of the intermediate summary columns in waterfall charts.\n * \\@default []\n * \\@asptype int[]\n * @type {?}\n */\nSeriesDirective.prototype.intermediateSumIndexes;\n/**\n * Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.\n * \\@default true\n * @type {?}\n */\nSeriesDirective.prototype.isClosed;\n/**\n * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.legendImageUrl;\n/**\n * The shape of the legend. Each series has its own legend shape. They are, \n * * Circle \n * * Rectangle \n * * Triangle \n * * Diamond \n * * Cross \n * * HorizontalLine \n * * VerticalLine \n * * Pentagon \n * * InvertedTriangle \n * * SeriesType \n * * Image\n * \\@default 'SeriesType'\n * @type {?}\n */\nSeriesDirective.prototype.legendShape;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.low;\n/**\n * Options for displaying and customizing markers for individual points in a series.\n * @type {?}\n */\nSeriesDirective.prototype.marker;\n/**\n * Maximum radius\n * \\@default 3\n * @type {?}\n */\nSeriesDirective.prototype.maxRadius;\n/**\n * Minimum radius\n * \\@default 1\n * @type {?}\n */\nSeriesDirective.prototype.minRadius;\n/**\n * The name of the series visible in legend.\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.name;\n/**\n * Defines the visual representation of the negative changes in waterfall charts.\n * \\@default '#C64E4A'\n * @type {?}\n */\nSeriesDirective.prototype.negativeFillColor;\n/**\n * Custom style for the non-highlighted series or points.\n * \\@default null\n * @type {?}\n */\nSeriesDirective.prototype.nonHighlightStyle;\n/**\n * The opacity of the series.\n * \\@default 1\n * @type {?}\n */\nSeriesDirective.prototype.opacity;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.open;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.pointColorMapping;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.query;\n/**\n * Defines the axis, based on which the line series will be split.\n * @type {?}\n */\nSeriesDirective.prototype.segmentAxis;\n/**\n * Defines the collection of regions that helps to differentiate a line series.\n * @type {?}\n */\nSeriesDirective.prototype.segments;\n/**\n * Custom style for the selected series or points.\n * \\@default null\n * @type {?}\n */\nSeriesDirective.prototype.selectionStyle;\n/**\n * If set true, the mean value for box and whisker will be visible.\n * \\@default true\n * @type {?}\n */\nSeriesDirective.prototype.showMean;\n/**\n * The normal distribution of histogram series.\n * \\@default false\n * @type {?}\n */\nSeriesDirective.prototype.showNormalDistribution;\n/**\n * The DataSource field that contains the size value of y\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.size;\n/**\n * Defines type of spline to be rendered.\n * \\@default 'Natural'\n * @type {?}\n */\nSeriesDirective.prototype.splineType;\n/**\n * This property allows grouping series in `stacked column / bar` charts. \n * Any string value can be provided to the stackingGroup property. \n * If any two or above series have the same value, those series will be grouped together.\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.stackingGroup;\n/**\n * Defines the collection of indexes of the overall summary columns in waterfall charts.\n * \\@default []\n * \\@asptype int[]\n * @type {?}\n */\nSeriesDirective.prototype.sumIndexes;\n/**\n * Defines the visual representation of the summaries in waterfall charts.\n * \\@default '#4E81BC'\n * @type {?}\n */\nSeriesDirective.prototype.summaryFillColor;\n/**\n * user can format now each series tooltip format separately.\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.tooltipFormat;\n/**\n * The provided value will be considered as a Tooltip name\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.tooltipMappingName;\n/**\n * Defines the collection of trendlines that are used to predict the trend\n * @type {?}\n */\nSeriesDirective.prototype.trendlines;\n/**\n * Custom style for the deselected series or points.\n * \\@default null\n * @type {?}\n */\nSeriesDirective.prototype.unSelectedStyle;\n/**\n * Specifies the visibility of series.\n * \\@default true\n * @type {?}\n */\nSeriesDirective.prototype.visible;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.volume;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n * @type {?}\n */\nSeriesDirective.prototype.width;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n * @type {?}\n */\nSeriesDirective.prototype.xAxisName;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.xName;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n * @type {?}\n */\nSeriesDirective.prototype.yAxisName;\n/**\n * The DataSource field that contains the y value.\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.yName;\n/**\n * The z order of the series.\n * \\@default 0\n * @type {?}\n */\nSeriesDirective.prototype.zOrder;\n/** @type {?} */\nSeriesDirective.prototype.dataLabel_template;\n/** @type {?} */\nSeriesDirective.prototype.viewContainerRef;\n}\n\n/**\n * Series Array Directive\n */\nexport class SeriesCollectionDirective extends ArrayBase<SeriesCollectionDirective> {\nconstructor() {\n        super('series');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-chart>e-series-collection',\n    queries: {\n        children: new ContentChildren(SeriesDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SeriesCollectionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSeriesCollectionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSeriesCollectionDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['color', 'dashArray', 'value'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Series Directive\n * ```html\n * <e-series-collection>\n * <e-series>\n * <e-segments>\n * <e-segment>\n * </e-segment>\n * </e-segments>\n * </e-series-collection>\n * ```\n */\nexport class SegmentDirective extends ComplexBase<SegmentDirective> {\npublic directivePropList: any;\n/**\n * Defines the color of a region.\n * \\@default null\n */\npublic color: any;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n * \\@default '0'\n */\npublic dashArray: any;\n/**\n * Defines the starting point of region.\n * \\@default null\n */\npublic value: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-series>e-segments>e-segment',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction SegmentDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSegmentDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSegmentDirective.ctorParameters;\n/** @type {?} */\nSegmentDirective.prototype.directivePropList;\n/**\n * Defines the color of a region.\n * \\@default null\n * @type {?}\n */\nSegmentDirective.prototype.color;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n * \\@default '0'\n * @type {?}\n */\nSegmentDirective.prototype.dashArray;\n/**\n * Defines the starting point of region.\n * \\@default null\n * @type {?}\n */\nSegmentDirective.prototype.value;\n/** @type {?} */\nSegmentDirective.prototype.viewContainerRef;\n}\n\n/**\n * Segment Array Directive\n */\nexport class SegmentsDirective extends ArrayBase<SegmentsDirective> {\nconstructor() {\n        super('segments');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-series>e-segments',\n    queries: {\n        children: new ContentChildren(SegmentDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SegmentsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSegmentsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSegmentsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'backwardForecast', 'dashArray', 'enableTooltip', 'fill', 'forwardForecast', 'intercept', 'legendShape', 'marker', 'name', 'period', 'polynomialOrder', 'type', 'visible', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Series Directive\n * ```html\n * <e-series-collection>\n * <e-series>\n * <e-trendlines>\n * <e-trendline>\n * </e-trendline>\n * </e-trendlines>\n * </e-series-collection>\n * ```\n */\nexport class TrendlineDirective extends ComplexBase<TrendlineDirective> {\npublic directivePropList: any;\n/**\n * Defines the type of the trendline\n * \\@default 'Linear'\n */\npublic type: any;\n/**\n * Options to customize the animation for trendlines\n */\npublic animation: any;\n/**\n * Defines the period, by which the trend has to backward forecast\n * \\@default 0\n */\npublic backwardForecast: any;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n * \\@default '0'\n */\npublic dashArray: any;\n/**\n * Enables/disables tooltip for trendlines\n * \\@default true\n */\npublic enableTooltip: any;\n/**\n * Defines the fill color of trendline\n * \\@default ''\n */\npublic fill: any;\n/**\n * Defines the period, by which the trend has to forward forecast\n * \\@default 0\n */\npublic forwardForecast: any;\n/**\n * Defines the intercept of the trendline\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic intercept: any;\n/**\n * Sets the legend shape of the trendline\n * \\@default 'SeriesType'\n */\npublic legendShape: any;\n/**\n * Options to customize the marker for trendlines\n * @deprecated\n */\npublic marker: any;\n/**\n * Defines the name of trendline\n * \\@default ''\n */\npublic name: any;\n/**\n * Defines the period, the price changes over which will be considered to predict moving average trend line\n * \\@default 2\n */\npublic period: any;\n/**\n * Defines the polynomial order of the polynomial trendline\n * \\@default 2\n */\npublic polynomialOrder: any;\n/**\n * Specifies the visibility of trendline.\n * \\@default true\n */\npublic visible: any;\n/**\n * Defines the width of the trendline\n * \\@default 1\n */\npublic width: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-series>e-trendlines>e-trendline',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction TrendlineDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTrendlineDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTrendlineDirective.ctorParameters;\n/** @type {?} */\nTrendlineDirective.prototype.directivePropList;\n/**\n * Defines the type of the trendline\n * \\@default 'Linear'\n * @type {?}\n */\nTrendlineDirective.prototype.type;\n/**\n * Options to customize the animation for trendlines\n * @type {?}\n */\nTrendlineDirective.prototype.animation;\n/**\n * Defines the period, by which the trend has to backward forecast\n * \\@default 0\n * @type {?}\n */\nTrendlineDirective.prototype.backwardForecast;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n * \\@default '0'\n * @type {?}\n */\nTrendlineDirective.prototype.dashArray;\n/**\n * Enables/disables tooltip for trendlines\n * \\@default true\n * @type {?}\n */\nTrendlineDirective.prototype.enableTooltip;\n/**\n * Defines the fill color of trendline\n * \\@default ''\n * @type {?}\n */\nTrendlineDirective.prototype.fill;\n/**\n * Defines the period, by which the trend has to forward forecast\n * \\@default 0\n * @type {?}\n */\nTrendlineDirective.prototype.forwardForecast;\n/**\n * Defines the intercept of the trendline\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nTrendlineDirective.prototype.intercept;\n/**\n * Sets the legend shape of the trendline\n * \\@default 'SeriesType'\n * @type {?}\n */\nTrendlineDirective.prototype.legendShape;\n/**\n * Options to customize the marker for trendlines\n * @deprecated\n * @type {?}\n */\nTrendlineDirective.prototype.marker;\n/**\n * Defines the name of trendline\n * \\@default ''\n * @type {?}\n */\nTrendlineDirective.prototype.name;\n/**\n * Defines the period, the price changes over which will be considered to predict moving average trend line\n * \\@default 2\n * @type {?}\n */\nTrendlineDirective.prototype.period;\n/**\n * Defines the polynomial order of the polynomial trendline\n * \\@default 2\n * @type {?}\n */\nTrendlineDirective.prototype.polynomialOrder;\n/**\n * Specifies the visibility of trendline.\n * \\@default true\n * @type {?}\n */\nTrendlineDirective.prototype.visible;\n/**\n * Defines the width of the trendline\n * \\@default 1\n * @type {?}\n */\nTrendlineDirective.prototype.width;\n/** @type {?} */\nTrendlineDirective.prototype.viewContainerRef;\n}\n\n/**\n * Trendline Array Directive\n */\nexport class TrendlinesDirective extends ArrayBase<TrendlinesDirective> {\nconstructor() {\n        super('trendlines');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-series>e-trendlines',\n    queries: {\n        children: new ContentChildren(TrendlineDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TrendlinesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTrendlinesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTrendlinesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["CommonModule","NgModule","BulletChartLegend","BulletTooltip","BulletChartComponent","Injector","ViewContainerRef","Renderer2","__metadata","ElementRef","ComponentMixins","ComponentBase","__decorate","Template","ContentChild","ChangeDetectionStrategy","outputs","inputs","Component","BulletChart","setValue","twoWays","ContentChildren","Directive","ArrayBase","input","ComplexBase","StockLegend","StockChartComponent","StockChart","TooltipRender","SmithchartLegend","SmithchartComponent","Smithchart","SparklineTooltip","SparklineComponent","Sparkline","PeriodSelector","RangeTooltip","RangeNavigatorComponent","RangeNavigator","AccumulationAnnotation","AccumulationDataLabel","AccumulationSelection","AccumulationLegend","AccumulationTooltip","PyramidSeries","FunnelSeries","PieSeries","AccumulationChartComponent","AccumulationChart","Highlight","DataEditing","Export","ParetoSeries","MultiLevelLabel","MultiColoredAreaSeries","MultiColoredLineSeries","DateTimeCategory","Trendlines","ErrorBar","HistogramSeries","BoxAndWhiskerSeries","BollingerBands","StochasticIndicator","MomentumIndicator","RsiIndicator","AtrIndicator","MacdIndicator","AccumulationDistributionIndicator","EmaIndicator","TmaIndicator","SmaIndicator","RadarSeries","PolarSeries","CandleSeries","SplineRangeAreaSeries","RangeAreaSeries","WaterfallSeries","HiloOpenCloseSeries","HiloSeries","ChartAnnotation","Selection","DataLabel","Zoom","Legend","Logarithmic","DateTime","Category","Crosshair","Tooltip","BubbleSeries","RangeColumnSeries","StackingBarSeries","BarSeries","StackingStepAreaSeries","StackingAreaSeries","StackingLineSeries","StackingColumnSeries","StepAreaSeries","StepLineSeries","ScrollBar","AreaSeries","StripLine","SplineAreaSeries","SplineSeries","ColumnSeries","ScatterSeries","LineSeries","ChartComponent","Chart"],"mappings":"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}
