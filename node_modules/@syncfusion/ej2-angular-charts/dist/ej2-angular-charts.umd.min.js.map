{"version":3,"file":"ej2-angular-charts.umd.min.js","sources":["~/@syncfusion/ej2-angular-charts/src/chart/trendlines.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/segments.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/series.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/striplines.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/categories.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/multilevellabels.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/axes.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/rows.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/columns.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/rangecolorsettings.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/annotations.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/selecteddataindexes.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/indicators.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/chart.component.ts","~/@syncfusion/ej2-angular-charts/src/chart/chart.module.ts","~/@syncfusion/ej2-angular-charts/src/chart/chart-all.module.ts","~/@syncfusion/ej2-angular-charts/src/accumulation-chart/series.directive.ts","~/@syncfusion/ej2-angular-charts/src/accumulation-chart/annotations.directive.ts","~/@syncfusion/ej2-angular-charts/src/accumulation-chart/accumulationchart.component.ts","~/@syncfusion/ej2-angular-charts/src/accumulation-chart/accumulationchart.module.ts","~/@syncfusion/ej2-angular-charts/src/accumulation-chart/accumulationchart-all.module.ts","~/@syncfusion/ej2-angular-charts/src/range-navigator/series.directive.ts","~/@syncfusion/ej2-angular-charts/src/range-navigator/rangenavigator.component.ts","~/@syncfusion/ej2-angular-charts/src/range-navigator/rangenavigator.module.ts","~/@syncfusion/ej2-angular-charts/src/range-navigator/rangenavigator-all.module.ts","~/@syncfusion/ej2-angular-charts/src/sparkline/rangebandsettings.directive.ts","~/@syncfusion/ej2-angular-charts/src/sparkline/sparkline.component.ts","~/@syncfusion/ej2-angular-charts/src/sparkline/sparkline.module.ts","~/@syncfusion/ej2-angular-charts/src/sparkline/sparkline-all.module.ts","~/@syncfusion/ej2-angular-charts/src/smithchart/series.directive.ts","~/@syncfusion/ej2-angular-charts/src/smithchart/smithchart.component.ts","~/@syncfusion/ej2-angular-charts/src/smithchart/smithchart.module.ts","~/@syncfusion/ej2-angular-charts/src/smithchart/smithchart-all.module.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/trendlines.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/series.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/axes.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/rows.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/annotations.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/selecteddataindexes.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/periods.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/stockevents.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/indicators.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/stockchart.component.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/stockchart.module.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/stockchart-all.module.ts","~/@syncfusion/ej2-angular-charts/src/bullet-chart/ranges.directive.ts","~/@syncfusion/ej2-angular-charts/src/bullet-chart/bulletchart.component.ts","~/@syncfusion/ej2-angular-charts/src/bullet-chart/bulletchart.module.ts","~/@syncfusion/ej2-angular-charts/src/bullet-chart/bulletchart-all.module.ts"],"sourcesContent":["import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'backwardForecast', 'dashArray', 'enableTooltip', 'fill', 'forwardForecast', 'intercept', 'legendShape', 'marker', 'name', 'period', 'polynomialOrder', 'type', 'visible', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Series Directive\n * ```html\n * <e-series-collection>\n * <e-series>\n * <e-trendlines>\n * <e-trendline>\n * </e-trendline>\n * </e-trendlines>\n * </e-series-collection>\n * ```\n */\nexport class TrendlineDirective extends ComplexBase<TrendlineDirective> {\npublic directivePropList: any;\n/**\n * Defines the type of the trendline\n * \\@default 'Linear'\n */\npublic type: any;\n/**\n * Options to customize the animation for trendlines\n */\npublic animation: any;\n/**\n * Defines the period, by which the trend has to backward forecast\n * \\@default 0\n */\npublic backwardForecast: any;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n * \\@default '0'\n */\npublic dashArray: any;\n/**\n * Enables/disables tooltip for trendlines\n * \\@default true\n */\npublic enableTooltip: any;\n/**\n * Defines the fill color of trendline\n * \\@default ''\n */\npublic fill: any;\n/**\n * Defines the period, by which the trend has to forward forecast\n * \\@default 0\n */\npublic forwardForecast: any;\n/**\n * Defines the intercept of the trendline\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic intercept: any;\n/**\n * Sets the legend shape of the trendline\n * \\@default 'SeriesType'\n */\npublic legendShape: any;\n/**\n * Options to customize the marker for trendlines\n * @deprecated\n */\npublic marker: any;\n/**\n * Defines the name of trendline\n * \\@default ''\n */\npublic name: any;\n/**\n * Defines the period, the price changes over which will be considered to predict moving average trend line\n * \\@default 2\n */\npublic period: any;\n/**\n * Defines the polynomial order of the polynomial trendline\n * \\@default 2\n */\npublic polynomialOrder: any;\n/**\n * Specifies the visibility of trendline.\n * \\@default true\n */\npublic visible: any;\n/**\n * Defines the width of the trendline\n * \\@default 1\n */\npublic width: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-series>e-trendlines>e-trendline',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction TrendlineDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTrendlineDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTrendlineDirective.ctorParameters;\n/** @type {?} */\nTrendlineDirective.prototype.directivePropList;\n/**\n * Defines the type of the trendline\n * \\@default 'Linear'\n * @type {?}\n */\nTrendlineDirective.prototype.type;\n/**\n * Options to customize the animation for trendlines\n * @type {?}\n */\nTrendlineDirective.prototype.animation;\n/**\n * Defines the period, by which the trend has to backward forecast\n * \\@default 0\n * @type {?}\n */\nTrendlineDirective.prototype.backwardForecast;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n * \\@default '0'\n * @type {?}\n */\nTrendlineDirective.prototype.dashArray;\n/**\n * Enables/disables tooltip for trendlines\n * \\@default true\n * @type {?}\n */\nTrendlineDirective.prototype.enableTooltip;\n/**\n * Defines the fill color of trendline\n * \\@default ''\n * @type {?}\n */\nTrendlineDirective.prototype.fill;\n/**\n * Defines the period, by which the trend has to forward forecast\n * \\@default 0\n * @type {?}\n */\nTrendlineDirective.prototype.forwardForecast;\n/**\n * Defines the intercept of the trendline\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nTrendlineDirective.prototype.intercept;\n/**\n * Sets the legend shape of the trendline\n * \\@default 'SeriesType'\n * @type {?}\n */\nTrendlineDirective.prototype.legendShape;\n/**\n * Options to customize the marker for trendlines\n * @deprecated\n * @type {?}\n */\nTrendlineDirective.prototype.marker;\n/**\n * Defines the name of trendline\n * \\@default ''\n * @type {?}\n */\nTrendlineDirective.prototype.name;\n/**\n * Defines the period, the price changes over which will be considered to predict moving average trend line\n * \\@default 2\n * @type {?}\n */\nTrendlineDirective.prototype.period;\n/**\n * Defines the polynomial order of the polynomial trendline\n * \\@default 2\n * @type {?}\n */\nTrendlineDirective.prototype.polynomialOrder;\n/**\n * Specifies the visibility of trendline.\n * \\@default true\n * @type {?}\n */\nTrendlineDirective.prototype.visible;\n/**\n * Defines the width of the trendline\n * \\@default 1\n * @type {?}\n */\nTrendlineDirective.prototype.width;\n/** @type {?} */\nTrendlineDirective.prototype.viewContainerRef;\n}\n\n/**\n * Trendline Array Directive\n */\nexport class TrendlinesDirective extends ArrayBase<TrendlinesDirective> {\nconstructor() {\n        super('trendlines');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-series>e-trendlines',\n    queries: {\n        children: new ContentChildren(TrendlineDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TrendlinesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTrendlinesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTrendlinesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['color', 'dashArray', 'value'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Series Directive\n * ```html\n * <e-series-collection>\n * <e-series>\n * <e-segments>\n * <e-segment>\n * </e-segment>\n * </e-segments>\n * </e-series-collection>\n * ```\n */\nexport class SegmentDirective extends ComplexBase<SegmentDirective> {\npublic directivePropList: any;\n/**\n * Defines the color of a region.\n * \\@default null\n */\npublic color: any;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n * \\@default '0'\n */\npublic dashArray: any;\n/**\n * Defines the starting point of region.\n * \\@default null\n */\npublic value: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-series>e-segments>e-segment',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction SegmentDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSegmentDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSegmentDirective.ctorParameters;\n/** @type {?} */\nSegmentDirective.prototype.directivePropList;\n/**\n * Defines the color of a region.\n * \\@default null\n * @type {?}\n */\nSegmentDirective.prototype.color;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n * \\@default '0'\n * @type {?}\n */\nSegmentDirective.prototype.dashArray;\n/**\n * Defines the starting point of region.\n * \\@default null\n * @type {?}\n */\nSegmentDirective.prototype.value;\n/** @type {?} */\nSegmentDirective.prototype.viewContainerRef;\n}\n\n/**\n * Segment Array Directive\n */\nexport class SegmentsDirective extends ArrayBase<SegmentsDirective> {\nconstructor() {\n        super('segments');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-series>e-segments',\n    queries: {\n        children: new ContentChildren(SegmentDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SegmentsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSegmentsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSegmentsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { TrendlinesDirective } from './trendlines.directive';\nimport { SegmentsDirective } from './segments.directive';\n\nlet /** @type {?} */ input: string[] = ['animation', 'bearFillColor', 'binInterval', 'border', 'boxPlotMode', 'bullFillColor', 'cardinalSplineTension', 'close', 'colorName', 'columnSpacing', 'columnWidth', 'connector', 'cornerRadius', 'dashArray', 'dataSource', 'dragSettings', 'drawType', 'emptyPointSettings', 'enableComplexProperty', 'enableSolidCandles', 'enableTooltip', 'errorBar', 'fill', 'high', 'intermediateSumIndexes', 'isClosed', 'legendImageUrl', 'legendShape', 'low', 'marker', 'maxRadius', 'minRadius', 'name', 'negativeFillColor', 'nonHighlightStyle', 'opacity', 'open', 'pointColorMapping', 'query', 'segmentAxis', 'segments', 'selectionStyle', 'showMean', 'showNormalDistribution', 'size', 'splineType', 'stackingGroup', 'sumIndexes', 'summaryFillColor', 'tooltipFormat', 'tooltipMappingName', 'trendlines', 'type', 'unSelectedStyle', 'visible', 'volume', 'width', 'xAxisName', 'xName', 'yAxisName', 'yName', 'zOrder'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Series Directive\n * ```html\n * <e-series-collection>\n * <e-series></e-series>\n * </e-series-collection>\n * ```\n */\nexport class SeriesDirective extends ComplexBase<SeriesDirective> {\npublic directivePropList: any;\npublic childTrendlines: any;\npublic childSegments: any;\npublic tags: string[] = ['trendlines', 'segments'];\n/**\n * The type of the series are \n * * Line \n * * Column \n * * Area \n * * Bar \n * * Histogram \n * * StackingColumn \n * * StackingArea \n * * StackingBar \n * * StepLine \n * * StepArea \n * * Scatter \n * * Spline \n * * StackingColumn100 \n * * StackingBar100 \n * * StackingArea100 \n * * RangeColumn \n * * Hilo \n * * HiloOpenClose \n * * Waterfall \n * * RangeArea \n * * SplineRangeArea \n * * Bubble \n * * Candle \n * * Polar \n * * Radar \n * * BoxAndWhisker \n * * Pareto\n * \\@default 'Line'\n */\npublic type: any;\n/**\n * Options to customizing animation for the series.\n */\npublic animation: any;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is less than the closing price.\n * \\@default '#2ecd71'\n */\npublic bearFillColor: any;\n/**\n * The bin interval of each histogram points.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic binInterval: any;\n/**\n * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.\n */\npublic border: any;\n/**\n * The mode of the box and whisker char series. They are, \n * Exclusive \n * Inclusive \n * Normal\n * \\@default 'Normal'\n */\npublic boxPlotMode: any;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is higher than the closing price.\n * \\@default '#e74c3d'\n */\npublic bullFillColor: any;\n/**\n * It defines tension of cardinal spline types\n * \\@default 0.5\n */\npublic cardinalSplineTension: any;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic close: any;\n/**\n * The Data Source field that contains the color mapping value. \n * It is applicable for range color mapping properly.\n */\npublic colorName: any;\n/**\n * To render the column series points with particular column spacing. It takes value from 0 - 1.\n * \\@default 0\n */\npublic columnSpacing: any;\n/**\n * To render the column series points with particular column width. If the series type is histogram the \n * default value is 1 otherwise 0.7.\n * \\@default null\n * \\@aspdefaultvalueignore\n * \\@blazordefaultvalue Double.NaN\n */\npublic columnWidth: any;\n/**\n * Defines the appearance of line connecting adjacent points in waterfall charts.\n */\npublic connector: any;\n/**\n * To render the column series points with particular rounded corner.\n */\npublic cornerRadius: any;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n */\npublic dashArray: any;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * \\@default ''\n */\npublic dataSource: any;\n/**\n * Options to customize the drag settings for series\n */\npublic dragSettings: any;\n/**\n * Type of series to be drawn in radar or polar series. They are \n *  'Line' \n *  'Column' \n *  'Area' \n *  'Scatter' \n *  'Spline' \n *  'StackingColumn' \n *  'StackingArea' \n *  'RangeColumn' \n *  'SplineArea'\n * \\@default 'Line'\n */\npublic drawType: any;\n/**\n * options to customize the empty points in series\n */\npublic emptyPointSettings: any;\n/**\n * This property used to improve chart performance via data mapping for series dataSource.\n * \\@default false\n */\npublic enableComplexProperty: any;\n/**\n * This property is applicable for candle series. \n * It enables/disables to visually compare the current values with the previous values in stock.\n * \\@default false\n */\npublic enableSolidCandles: any;\n/**\n * If set true, the Tooltip for series will be visible.\n * \\@default true\n */\npublic enableTooltip: any;\n/**\n * Options for displaying and customizing error bar for individual point in a series.\n */\npublic errorBar: any;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n */\npublic fill: any;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic high: any;\n/**\n * Defines the collection of indexes of the intermediate summary columns in waterfall charts.\n * \\@default []\n * \\@asptype int[]\n */\npublic intermediateSumIndexes: any;\n/**\n * Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.\n * \\@default true\n */\npublic isClosed: any;\n/**\n * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.\n * \\@default ''\n */\npublic legendImageUrl: any;\n/**\n * The shape of the legend. Each series has its own legend shape. They are, \n * * Circle \n * * Rectangle \n * * Triangle \n * * Diamond \n * * Cross \n * * HorizontalLine \n * * VerticalLine \n * * Pentagon \n * * InvertedTriangle \n * * SeriesType \n * * Image\n * \\@default 'SeriesType'\n */\npublic legendShape: any;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic low: any;\n/**\n * Options for displaying and customizing markers for individual points in a series.\n */\npublic marker: any;\n/**\n * Maximum radius\n * \\@default 3\n */\npublic maxRadius: any;\n/**\n * Minimum radius\n * \\@default 1\n */\npublic minRadius: any;\n/**\n * The name of the series visible in legend.\n * \\@default ''\n */\npublic name: any;\n/**\n * Defines the visual representation of the negative changes in waterfall charts.\n * \\@default '#C64E4A'\n */\npublic negativeFillColor: any;\n/**\n * Custom style for the non-highlighted series or points.\n * \\@default null\n */\npublic nonHighlightStyle: any;\n/**\n * The opacity of the series.\n * \\@default 1\n */\npublic opacity: any;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic open: any;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n */\npublic pointColorMapping: any;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * \\@default ''\n */\npublic query: any;\n/**\n * Defines the axis, based on which the line series will be split.\n */\npublic segmentAxis: any;\n/**\n * Defines the collection of regions that helps to differentiate a line series.\n */\npublic segments: any;\n/**\n * Custom style for the selected series or points.\n * \\@default null\n */\npublic selectionStyle: any;\n/**\n * If set true, the mean value for box and whisker will be visible.\n * \\@default true\n */\npublic showMean: any;\n/**\n * The normal distribution of histogram series.\n * \\@default false\n */\npublic showNormalDistribution: any;\n/**\n * The DataSource field that contains the size value of y\n * \\@default ''\n */\npublic size: any;\n/**\n * Defines type of spline to be rendered.\n * \\@default 'Natural'\n */\npublic splineType: any;\n/**\n * This property allows grouping series in `stacked column / bar` charts. \n * Any string value can be provided to the stackingGroup property. \n * If any two or above series have the same value, those series will be grouped together.\n * \\@default ''\n */\npublic stackingGroup: any;\n/**\n * Defines the collection of indexes of the overall summary columns in waterfall charts.\n * \\@default []\n * \\@asptype int[]\n */\npublic sumIndexes: any;\n/**\n * Defines the visual representation of the summaries in waterfall charts.\n * \\@default '#4E81BC'\n */\npublic summaryFillColor: any;\n/**\n * user can format now each series tooltip format separately.\n * \\@default ''\n */\npublic tooltipFormat: any;\n/**\n * The provided value will be considered as a Tooltip name\n * \\@default ''\n */\npublic tooltipMappingName: any;\n/**\n * Defines the collection of trendlines that are used to predict the trend\n */\npublic trendlines: any;\n/**\n * Custom style for the deselected series or points.\n * \\@default null\n */\npublic unSelectedStyle: any;\n/**\n * Specifies the visibility of series.\n * \\@default true\n */\npublic visible: any;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * \\@default ''\n */\npublic volume: any;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n */\npublic width: any;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n */\npublic xAxisName: any;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic xName: any;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n */\npublic yAxisName: any;\n/**\n * The DataSource field that contains the y value.\n * \\@default ''\n */\npublic yName: any;\n/**\n * The z order of the series.\n * \\@default 0\n */\npublic zOrder: any;\n    \n    @Template()\npublic dataLabel_template: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-series-collection>e-series',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childTrendlines: new ContentChild(TrendlinesDirective), \n        childSegments: new ContentChild(SegmentsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dataLabel_template': [{ type: ContentChild, args: ['dataLabelTemplate', ] },],\n};\n}\n\nfunction SeriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSeriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSeriesDirective.ctorParameters;\n/** @type {?} */\nSeriesDirective.propDecorators;\n/** @type {?} */\nSeriesDirective.prototype.directivePropList;\n/** @type {?} */\nSeriesDirective.prototype.childTrendlines;\n/** @type {?} */\nSeriesDirective.prototype.childSegments;\n/** @type {?} */\nSeriesDirective.prototype.tags;\n/**\n * The type of the series are \n * * Line \n * * Column \n * * Area \n * * Bar \n * * Histogram \n * * StackingColumn \n * * StackingArea \n * * StackingBar \n * * StepLine \n * * StepArea \n * * Scatter \n * * Spline \n * * StackingColumn100 \n * * StackingBar100 \n * * StackingArea100 \n * * RangeColumn \n * * Hilo \n * * HiloOpenClose \n * * Waterfall \n * * RangeArea \n * * SplineRangeArea \n * * Bubble \n * * Candle \n * * Polar \n * * Radar \n * * BoxAndWhisker \n * * Pareto\n * \\@default 'Line'\n * @type {?}\n */\nSeriesDirective.prototype.type;\n/**\n * Options to customizing animation for the series.\n * @type {?}\n */\nSeriesDirective.prototype.animation;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is less than the closing price.\n * \\@default '#2ecd71'\n * @type {?}\n */\nSeriesDirective.prototype.bearFillColor;\n/**\n * The bin interval of each histogram points.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nSeriesDirective.prototype.binInterval;\n/**\n * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.\n * @type {?}\n */\nSeriesDirective.prototype.border;\n/**\n * The mode of the box and whisker char series. They are, \n * Exclusive \n * Inclusive \n * Normal\n * \\@default 'Normal'\n * @type {?}\n */\nSeriesDirective.prototype.boxPlotMode;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is higher than the closing price.\n * \\@default '#e74c3d'\n * @type {?}\n */\nSeriesDirective.prototype.bullFillColor;\n/**\n * It defines tension of cardinal spline types\n * \\@default 0.5\n * @type {?}\n */\nSeriesDirective.prototype.cardinalSplineTension;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.close;\n/**\n * The Data Source field that contains the color mapping value. \n * It is applicable for range color mapping properly.\n * @type {?}\n */\nSeriesDirective.prototype.colorName;\n/**\n * To render the column series points with particular column spacing. It takes value from 0 - 1.\n * \\@default 0\n * @type {?}\n */\nSeriesDirective.prototype.columnSpacing;\n/**\n * To render the column series points with particular column width. If the series type is histogram the \n * default value is 1 otherwise 0.7.\n * \\@default null\n * \\@aspdefaultvalueignore\n * \\@blazordefaultvalue Double.NaN\n * @type {?}\n */\nSeriesDirective.prototype.columnWidth;\n/**\n * Defines the appearance of line connecting adjacent points in waterfall charts.\n * @type {?}\n */\nSeriesDirective.prototype.connector;\n/**\n * To render the column series points with particular rounded corner.\n * @type {?}\n */\nSeriesDirective.prototype.cornerRadius;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n * @type {?}\n */\nSeriesDirective.prototype.dashArray;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.dataSource;\n/**\n * Options to customize the drag settings for series\n * @type {?}\n */\nSeriesDirective.prototype.dragSettings;\n/**\n * Type of series to be drawn in radar or polar series. They are \n *  'Line' \n *  'Column' \n *  'Area' \n *  'Scatter' \n *  'Spline' \n *  'StackingColumn' \n *  'StackingArea' \n *  'RangeColumn' \n *  'SplineArea'\n * \\@default 'Line'\n * @type {?}\n */\nSeriesDirective.prototype.drawType;\n/**\n * options to customize the empty points in series\n * @type {?}\n */\nSeriesDirective.prototype.emptyPointSettings;\n/**\n * This property used to improve chart performance via data mapping for series dataSource.\n * \\@default false\n * @type {?}\n */\nSeriesDirective.prototype.enableComplexProperty;\n/**\n * This property is applicable for candle series. \n * It enables/disables to visually compare the current values with the previous values in stock.\n * \\@default false\n * @type {?}\n */\nSeriesDirective.prototype.enableSolidCandles;\n/**\n * If set true, the Tooltip for series will be visible.\n * \\@default true\n * @type {?}\n */\nSeriesDirective.prototype.enableTooltip;\n/**\n * Options for displaying and customizing error bar for individual point in a series.\n * @type {?}\n */\nSeriesDirective.prototype.errorBar;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n * @type {?}\n */\nSeriesDirective.prototype.fill;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.high;\n/**\n * Defines the collection of indexes of the intermediate summary columns in waterfall charts.\n * \\@default []\n * \\@asptype int[]\n * @type {?}\n */\nSeriesDirective.prototype.intermediateSumIndexes;\n/**\n * Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.\n * \\@default true\n * @type {?}\n */\nSeriesDirective.prototype.isClosed;\n/**\n * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.legendImageUrl;\n/**\n * The shape of the legend. Each series has its own legend shape. They are, \n * * Circle \n * * Rectangle \n * * Triangle \n * * Diamond \n * * Cross \n * * HorizontalLine \n * * VerticalLine \n * * Pentagon \n * * InvertedTriangle \n * * SeriesType \n * * Image\n * \\@default 'SeriesType'\n * @type {?}\n */\nSeriesDirective.prototype.legendShape;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.low;\n/**\n * Options for displaying and customizing markers for individual points in a series.\n * @type {?}\n */\nSeriesDirective.prototype.marker;\n/**\n * Maximum radius\n * \\@default 3\n * @type {?}\n */\nSeriesDirective.prototype.maxRadius;\n/**\n * Minimum radius\n * \\@default 1\n * @type {?}\n */\nSeriesDirective.prototype.minRadius;\n/**\n * The name of the series visible in legend.\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.name;\n/**\n * Defines the visual representation of the negative changes in waterfall charts.\n * \\@default '#C64E4A'\n * @type {?}\n */\nSeriesDirective.prototype.negativeFillColor;\n/**\n * Custom style for the non-highlighted series or points.\n * \\@default null\n * @type {?}\n */\nSeriesDirective.prototype.nonHighlightStyle;\n/**\n * The opacity of the series.\n * \\@default 1\n * @type {?}\n */\nSeriesDirective.prototype.opacity;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.open;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.pointColorMapping;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.query;\n/**\n * Defines the axis, based on which the line series will be split.\n * @type {?}\n */\nSeriesDirective.prototype.segmentAxis;\n/**\n * Defines the collection of regions that helps to differentiate a line series.\n * @type {?}\n */\nSeriesDirective.prototype.segments;\n/**\n * Custom style for the selected series or points.\n * \\@default null\n * @type {?}\n */\nSeriesDirective.prototype.selectionStyle;\n/**\n * If set true, the mean value for box and whisker will be visible.\n * \\@default true\n * @type {?}\n */\nSeriesDirective.prototype.showMean;\n/**\n * The normal distribution of histogram series.\n * \\@default false\n * @type {?}\n */\nSeriesDirective.prototype.showNormalDistribution;\n/**\n * The DataSource field that contains the size value of y\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.size;\n/**\n * Defines type of spline to be rendered.\n * \\@default 'Natural'\n * @type {?}\n */\nSeriesDirective.prototype.splineType;\n/**\n * This property allows grouping series in `stacked column / bar` charts. \n * Any string value can be provided to the stackingGroup property. \n * If any two or above series have the same value, those series will be grouped together.\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.stackingGroup;\n/**\n * Defines the collection of indexes of the overall summary columns in waterfall charts.\n * \\@default []\n * \\@asptype int[]\n * @type {?}\n */\nSeriesDirective.prototype.sumIndexes;\n/**\n * Defines the visual representation of the summaries in waterfall charts.\n * \\@default '#4E81BC'\n * @type {?}\n */\nSeriesDirective.prototype.summaryFillColor;\n/**\n * user can format now each series tooltip format separately.\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.tooltipFormat;\n/**\n * The provided value will be considered as a Tooltip name\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.tooltipMappingName;\n/**\n * Defines the collection of trendlines that are used to predict the trend\n * @type {?}\n */\nSeriesDirective.prototype.trendlines;\n/**\n * Custom style for the deselected series or points.\n * \\@default null\n * @type {?}\n */\nSeriesDirective.prototype.unSelectedStyle;\n/**\n * Specifies the visibility of series.\n * \\@default true\n * @type {?}\n */\nSeriesDirective.prototype.visible;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.volume;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n * @type {?}\n */\nSeriesDirective.prototype.width;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n * @type {?}\n */\nSeriesDirective.prototype.xAxisName;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.xName;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n * @type {?}\n */\nSeriesDirective.prototype.yAxisName;\n/**\n * The DataSource field that contains the y value.\n * \\@default ''\n * @type {?}\n */\nSeriesDirective.prototype.yName;\n/**\n * The z order of the series.\n * \\@default 0\n * @type {?}\n */\nSeriesDirective.prototype.zOrder;\n/** @type {?} */\nSeriesDirective.prototype.dataLabel_template;\n/** @type {?} */\nSeriesDirective.prototype.viewContainerRef;\n}\n\n/**\n * Series Array Directive\n */\nexport class SeriesCollectionDirective extends ArrayBase<SeriesCollectionDirective> {\nconstructor() {\n        super('series');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-chart>e-series-collection',\n    queries: {\n        children: new ContentChildren(SeriesDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SeriesCollectionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSeriesCollectionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSeriesCollectionDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['border', 'color', 'dashArray', 'end', 'horizontalAlignment', 'isRepeat', 'isSegmented', 'opacity', 'repeatEvery', 'repeatUntil', 'rotation', 'segmentAxisName', 'segmentEnd', 'segmentStart', 'size', 'sizeType', 'start', 'startFromAxis', 'text', 'textStyle', 'verticalAlignment', 'visible', 'zIndex'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * StripLine Directive\n * ```html\n * <e-axis>\n * <e-striplines>\n * <e-stripline></e-stripline>\n * </e-striplines>\n * </e-axis>\n * ```\n */\nexport class StripLineDirective extends ComplexBase<StripLineDirective> {\npublic directivePropList: any;\n/**\n * Border of the strip line.\n */\npublic border: any;\n/**\n * Color of the strip line.\n * \\@default '#808080'\n */\npublic color: any;\n/**\n * Dash Array of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic dashArray: any;\n/**\n * End value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic end: any;\n/**\n * Defines the position of the strip line text horizontally. They are, \n * * Start: Places the strip line text at the start. \n * * Middle: Places the strip line text in the middle. \n * * End: Places the strip line text at the end.\n * \\@default 'Middle'\n */\npublic horizontalAlignment: any;\n/**\n * isRepeat value of the strip line.\n * \\@default false\n * \\@aspdefaultvalueignore\n */\npublic isRepeat: any;\n/**\n * isSegmented value of the strip line\n * \\@default false\n * \\@aspdefaultvalueignore\n */\npublic isSegmented: any;\n/**\n * Strip line Opacity\n * \\@default 1\n */\npublic opacity: any;\n/**\n * repeatEvery value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic repeatEvery: any;\n/**\n * repeatUntil value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic repeatUntil: any;\n/**\n * The angle to which the strip line text gets rotated.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic rotation: any;\n/**\n * segmentAxisName of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic segmentAxisName: any;\n/**\n * segmentEnd value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic segmentEnd: any;\n/**\n * segmentStart value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic segmentStart: any;\n/**\n * Size of the strip line, when it starts from the origin.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic size: any;\n/**\n * Size type of the strip line\n * \\@default Auto\n */\npublic sizeType: any;\n/**\n * Start value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic start: any;\n/**\n *  If set true, strip line get render from axis origin.\n * \n *  \\@default false\n * \n */\npublic startFromAxis: any;\n/**\n * Strip line text.\n * \\@default ''\n */\npublic text: any;\n/**\n * Options to customize the strip line text.\n */\npublic textStyle: any;\n/**\n * Defines the position of the strip line text vertically. They are, \n * * Start: Places the strip line text at the start. \n * * Middle: Places the strip line text in the middle. \n * * End: Places the strip line text at the end.\n * \\@default 'Middle'\n */\npublic verticalAlignment: any;\n/**\n * If set true, strip line for axis renders.\n * \\@default true\n */\npublic visible: any;\n/**\n * Specifies the order of the strip line. They are, \n * * Behind: Places the strip line behind the series elements. \n * * Over: Places the strip line over the series elements.\n * \\@default 'Behind'\n */\npublic zIndex: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-axis>e-striplines>e-stripline',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StripLineDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStripLineDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStripLineDirective.ctorParameters;\n/** @type {?} */\nStripLineDirective.prototype.directivePropList;\n/**\n * Border of the strip line.\n * @type {?}\n */\nStripLineDirective.prototype.border;\n/**\n * Color of the strip line.\n * \\@default '#808080'\n * @type {?}\n */\nStripLineDirective.prototype.color;\n/**\n * Dash Array of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.dashArray;\n/**\n * End value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.end;\n/**\n * Defines the position of the strip line text horizontally. They are, \n * * Start: Places the strip line text at the start. \n * * Middle: Places the strip line text in the middle. \n * * End: Places the strip line text at the end.\n * \\@default 'Middle'\n * @type {?}\n */\nStripLineDirective.prototype.horizontalAlignment;\n/**\n * isRepeat value of the strip line.\n * \\@default false\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.isRepeat;\n/**\n * isSegmented value of the strip line\n * \\@default false\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.isSegmented;\n/**\n * Strip line Opacity\n * \\@default 1\n * @type {?}\n */\nStripLineDirective.prototype.opacity;\n/**\n * repeatEvery value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.repeatEvery;\n/**\n * repeatUntil value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.repeatUntil;\n/**\n * The angle to which the strip line text gets rotated.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.rotation;\n/**\n * segmentAxisName of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.segmentAxisName;\n/**\n * segmentEnd value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.segmentEnd;\n/**\n * segmentStart value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.segmentStart;\n/**\n * Size of the strip line, when it starts from the origin.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.size;\n/**\n * Size type of the strip line\n * \\@default Auto\n * @type {?}\n */\nStripLineDirective.prototype.sizeType;\n/**\n * Start value of the strip line.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStripLineDirective.prototype.start;\n/**\n *  If set true, strip line get render from axis origin.\n * \n *  \\@default false\n * \n * @type {?}\n */\nStripLineDirective.prototype.startFromAxis;\n/**\n * Strip line text.\n * \\@default ''\n * @type {?}\n */\nStripLineDirective.prototype.text;\n/**\n * Options to customize the strip line text.\n * @type {?}\n */\nStripLineDirective.prototype.textStyle;\n/**\n * Defines the position of the strip line text vertically. They are, \n * * Start: Places the strip line text at the start. \n * * Middle: Places the strip line text in the middle. \n * * End: Places the strip line text at the end.\n * \\@default 'Middle'\n * @type {?}\n */\nStripLineDirective.prototype.verticalAlignment;\n/**\n * If set true, strip line for axis renders.\n * \\@default true\n * @type {?}\n */\nStripLineDirective.prototype.visible;\n/**\n * Specifies the order of the strip line. They are, \n * * Behind: Places the strip line behind the series elements. \n * * Over: Places the strip line over the series elements.\n * \\@default 'Behind'\n * @type {?}\n */\nStripLineDirective.prototype.zIndex;\n/** @type {?} */\nStripLineDirective.prototype.viewContainerRef;\n}\n\n/**\n * StripLine Array Directive\n */\nexport class StripLinesDirective extends ArrayBase<StripLinesDirective> {\nconstructor() {\n        super('striplines');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-axis>e-striplines',\n    queries: {\n        children: new ContentChildren(StripLineDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StripLinesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStripLinesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStripLinesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['customAttributes', 'end', 'maximumTextWidth', 'start', 'text', 'type'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * MultiLevelLabels Directive\n * ```html\n * <e-multilevellabels>\n * <e-multilevellabel>\n * <e-Categories>\n * <e-Category>\n * </e-Category>\n * </e-Categories>\n * </e-multilevellabel>\n * </e-multilevellabels>\n * ```\n */\nexport class CategoryDirective extends ComplexBase<CategoryDirective> {\npublic directivePropList: any;\n/**\n * Border type for labels \n * * Rectangle \n * * Without Top Border \n * * Without Top and BottomBorder \n * * Without Border \n * * Brace \n * * CurlyBrace\n * \\@default 'Rectangle'\n * \\@aspdefaultvalueignore\n * \\@blazordefaultvalueignore\n */\npublic type: any;\n/**\n * multi level labels custom data.\n * \\@default null\n */\npublic customAttributes: any;\n/**\n * End value of the multi level labels\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic end: any;\n/**\n * Maximum width of the text for multi level labels.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic maximumTextWidth: any;\n/**\n * Start value of the multi level labels\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic start: any;\n/**\n * multi level labels text.\n * \\@default ''\n */\npublic text: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-multilevellabel>e-categories>e-category',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction CategoryDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nCategoryDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCategoryDirective.ctorParameters;\n/** @type {?} */\nCategoryDirective.prototype.directivePropList;\n/**\n * Border type for labels \n * * Rectangle \n * * Without Top Border \n * * Without Top and BottomBorder \n * * Without Border \n * * Brace \n * * CurlyBrace\n * \\@default 'Rectangle'\n * \\@aspdefaultvalueignore\n * \\@blazordefaultvalueignore\n * @type {?}\n */\nCategoryDirective.prototype.type;\n/**\n * multi level labels custom data.\n * \\@default null\n * @type {?}\n */\nCategoryDirective.prototype.customAttributes;\n/**\n * End value of the multi level labels\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nCategoryDirective.prototype.end;\n/**\n * Maximum width of the text for multi level labels.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nCategoryDirective.prototype.maximumTextWidth;\n/**\n * Start value of the multi level labels\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nCategoryDirective.prototype.start;\n/**\n * multi level labels text.\n * \\@default ''\n * @type {?}\n */\nCategoryDirective.prototype.text;\n/** @type {?} */\nCategoryDirective.prototype.viewContainerRef;\n}\n\n/**\n * Category Array Directive\n */\nexport class CategoriesDirective extends ArrayBase<CategoriesDirective> {\nconstructor() {\n        super('categories');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-multilevellabel>e-categories',\n    queries: {\n        children: new ContentChildren(CategoryDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CategoriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nCategoriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCategoriesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\nimport { CategoriesDirective } from './categories.directive';\n\nlet /** @type {?} */ input: string[] = ['alignment', 'border', 'categories', 'overflow', 'textStyle'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * MultiLevelLabel Directive\n * ```html\n * <e-axis>\n * <e-multilevellabels>\n * <e-multilevellabel></e-multilevellabel>\n * </e-multilevellabels>\n * </e-axis>\n * ```\n */\nexport class MultiLevelLabelDirective extends ComplexBase<MultiLevelLabelDirective> {\npublic directivePropList: any;\npublic childCategories: any;\npublic tags: string[] = ['categories'];\n/**\n * Defines the position of the multi level labels. They are, \n * * Near: Places the multi level labels at Near. \n * * Center: Places the multi level labels at Center. \n * * Far: Places the multi level labels at Far.\n * \\@default 'Center'\n */\npublic alignment: any;\n/**\n * Border of the multi level labels.\n */\npublic border: any;\n/**\n * multi level categories for multi level labels.\n */\npublic categories: any;\n/**\n * Defines the textOverFlow for multi level labels. They are, \n * * Trim: Trim textOverflow for multi level labels. \n * * Wrap: Wrap textOverflow for multi level labels. \n * * none: None textOverflow for multi level labels.\n * \\@default 'Wrap'\n */\npublic overflow: any;\n/**\n * Options to customize the multi level labels.\n */\npublic textStyle: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-axis>e-multilevellabels>e-multilevellabel',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childCategories: new ContentChild(CategoriesDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction MultiLevelLabelDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMultiLevelLabelDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMultiLevelLabelDirective.ctorParameters;\n/** @type {?} */\nMultiLevelLabelDirective.prototype.directivePropList;\n/** @type {?} */\nMultiLevelLabelDirective.prototype.childCategories;\n/** @type {?} */\nMultiLevelLabelDirective.prototype.tags;\n/**\n * Defines the position of the multi level labels. They are, \n * * Near: Places the multi level labels at Near. \n * * Center: Places the multi level labels at Center. \n * * Far: Places the multi level labels at Far.\n * \\@default 'Center'\n * @type {?}\n */\nMultiLevelLabelDirective.prototype.alignment;\n/**\n * Border of the multi level labels.\n * @type {?}\n */\nMultiLevelLabelDirective.prototype.border;\n/**\n * multi level categories for multi level labels.\n * @type {?}\n */\nMultiLevelLabelDirective.prototype.categories;\n/**\n * Defines the textOverFlow for multi level labels. They are, \n * * Trim: Trim textOverflow for multi level labels. \n * * Wrap: Wrap textOverflow for multi level labels. \n * * none: None textOverflow for multi level labels.\n * \\@default 'Wrap'\n * @type {?}\n */\nMultiLevelLabelDirective.prototype.overflow;\n/**\n * Options to customize the multi level labels.\n * @type {?}\n */\nMultiLevelLabelDirective.prototype.textStyle;\n/** @type {?} */\nMultiLevelLabelDirective.prototype.viewContainerRef;\n}\n\n/**\n * MultiLevelLabel Array Directive\n */\nexport class MultiLevelLabelsDirective extends ArrayBase<MultiLevelLabelsDirective> {\nconstructor() {\n        super('multilevellabels');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-axis>e-multilevellabels',\n    queries: {\n        children: new ContentChildren(MultiLevelLabelDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MultiLevelLabelsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMultiLevelLabelsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMultiLevelLabelsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\nimport { StripLinesDirective } from './striplines.directive';\nimport { MultiLevelLabelsDirective } from './multilevellabels.directive';\n\nlet /** @type {?} */ input: string[] = ['border', 'coefficient', 'columnIndex', 'crossesAt', 'crossesInAxis', 'crosshairTooltip', 'description', 'desiredIntervals', 'edgeLabelPlacement', 'enableAutoIntervalOnZooming', 'enableScrollbarOnZooming', 'enableTrim', 'interval', 'intervalType', 'isIndexed', 'isInversed', 'labelFormat', 'labelIntersectAction', 'labelPadding', 'labelPlacement', 'labelPosition', 'labelRotation', 'labelStyle', 'lineBreakAlignment', 'lineStyle', 'logBase', 'majorGridLines', 'majorTickLines', 'maximum', 'maximumLabelWidth', 'maximumLabels', 'minimum', 'minorGridLines', 'minorTickLines', 'minorTicksPerInterval', 'multiLevelLabels', 'name', 'opposedPosition', 'placeNextToAxisLine', 'plotOffset', 'plotOffsetBottom', 'plotOffsetLeft', 'plotOffsetRight', 'plotOffsetTop', 'rangePadding', 'rowIndex', 'scrollbarSettings', 'skeleton', 'skeletonType', 'span', 'startAngle', 'startFromZero', 'stripLines', 'tabIndex', 'tickPosition', 'title', 'titlePadding', 'titleStyle', 'valueType', 'visible', 'zoomFactor', 'zoomPosition'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Axis Directive\n * ```html\n * <e-axes><e-axis></e-axis></e-axes>\n * ```\n */\nexport class AxisDirective extends ComplexBase<AxisDirective> {\npublic directivePropList: any;\npublic childStripLines: any;\npublic childMultiLevelLabels: any;\npublic tags: string[] = ['stripLines', 'multiLevelLabels'];\n/**\n * Border of the multi level labels.\n */\npublic border: any;\n/**\n * The polar radar radius position.\n * \\@default 100\n */\npublic coefficient: any;\n/**\n * Specifies the index of the column where the axis is associated, \n * when the chart area is divided into multiple plot areas by using `columns`. \n * \n * \\@default 0\n */\npublic columnIndex: any;\n/**\n * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.\n * \\@default null\n */\npublic crossesAt: any;\n/**\n * Specifies axis name with which the axis line has to be crossed\n * \\@default null\n */\npublic crossesInAxis: any;\n/**\n * Options to customize the crosshair ToolTip.\n */\npublic crosshairTooltip: any;\n/**\n * Description for axis and its element.\n * \\@default null\n */\npublic description: any;\n/**\n * With this property, you can request axis to calculate intervals approximately equal to your specified interval.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic desiredIntervals: any;\n/**\n * Specifies the position of labels at the edge of the axis.They are, \n * * None: No action will be performed. \n * * Hide: Edge label will be hidden. \n * * Shift: Shifts the edge labels.\n * \\@default 'None'\n */\npublic edgeLabelPlacement: any;\n/**\n * If set to true, axis interval will be calculated automatically with respect to the zoomed range.\n * \\@default true\n */\npublic enableAutoIntervalOnZooming: any;\n/**\n * Enables the scrollbar for zooming.\n * \\@default true\n */\npublic enableScrollbarOnZooming: any;\n/**\n * Specifies the Trim property for an axis.\n * \\@default false\n */\npublic enableTrim: any;\n/**\n * Specifies the interval for an axis.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic interval: any;\n/**\n * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are, \n * * Auto: Defines the interval of the axis based on data. \n * * Years: Defines the interval of the axis in years. \n * * Months: Defines the interval of the axis in months. \n * * Days: Defines the interval of the axis in days. \n * * Hours: Defines the interval of the axis in hours. \n * * Minutes: Defines the interval of the axis in minutes.\n * \\@default 'Auto'\n */\npublic intervalType: any;\n/**\n * Specifies indexed category  axis.\n * \\@default false\n */\npublic isIndexed: any;\n/**\n * It specifies whether the axis to be rendered in inversed manner or not.\n * \\@default false\n */\npublic isInversed: any;\n/**\n * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc. \n * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.\n * \\@default ''\n */\npublic labelFormat: any;\n/**\n * Specifies the actions like `None`, `Hide`, `Trim`, `Wrap`, `MultipleRows`, `Rotate45`, and `Rotate90` \n * when the axis labels intersect with each other.They are, \n * * None: Shows all the labels. \n * * Hide: Hides the label when it intersects. \n * * Trim: Trim the label when it intersects. \n * * Wrap: Wrap the label when it intersects. \n * * MultipleRows: Shows the label in MultipleRows when it intersects. \n * * Rotate45: Rotates the label to 45 degree when it intersects. \n * * Rotate90: Rotates the label to 90 degree when it intersects.\n * \\@default Trim\n */\npublic labelIntersectAction: any;\n/**\n * Specifies the labelPadding from axis\n * \\@default 5\n */\npublic labelPadding: any;\n/**\n * Specifies the placement of a label for category axis. They are, \n * * betweenTicks: Renders the label between the ticks. \n * * onTicks: Renders the label on the ticks.\n * \\@default 'BetweenTicks'\n */\npublic labelPlacement: any;\n/**\n * Specifies the placement of a labels to the axis line. They are, \n * * inside: Renders the labels inside to the axis line. \n * * outside: Renders the labels outside to the axis line.\n * \\@default 'Outside'\n */\npublic labelPosition: any;\n/**\n * The angle to which the axis label gets rotated.\n * \\@default 0\n */\npublic labelRotation: any;\n/**\n * Options to customize the axis label.\n */\npublic labelStyle: any;\n/**\n * It specifies alignment of the line break labels.\n * \\@default 'Center'\n */\npublic lineBreakAlignment: any;\n/**\n * Options for customizing axis lines.\n */\npublic lineStyle: any;\n/**\n * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.\n * \\@default 10\n */\npublic logBase: any;\n/**\n * Options for customizing major grid lines.\n */\npublic majorGridLines: any;\n/**\n * Options for customizing major tick lines.\n */\npublic majorTickLines: any;\n/**\n * Specifies the maximum range of an axis.\n * \\@default null\n */\npublic maximum: any;\n/**\n * Specifies the maximum width of an axis label.\n * \\@default 34.\n */\npublic maximumLabelWidth: any;\n/**\n * The maximum number of label count per 100 pixels with respect to the axis length.\n * \\@default 3\n */\npublic maximumLabels: any;\n/**\n * Specifies the minimum range of an axis.\n * \\@default null\n */\npublic minimum: any;\n/**\n * Options for customizing minor grid lines.\n */\npublic minorGridLines: any;\n/**\n * Options for customizing minor tick lines.\n */\npublic minorTickLines: any;\n/**\n * Specifies the number of minor ticks per interval.\n * \\@default 0\n */\npublic minorTicksPerInterval: any;\n/**\n * Specifies the multi level labels collection for the axis\n */\npublic multiLevelLabels: any;\n/**\n * Unique identifier of an axis. \n * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.\n * \\@default ''\n */\npublic name: any;\n/**\n * If set to true, the axis will render at the opposite side of its default position.\n * \\@default false\n */\npublic opposedPosition: any;\n/**\n * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line\n * \\@default true\n */\npublic placeNextToAxisLine: any;\n/**\n * Left and right padding for the plot area in pixels.\n * \\@default 0\n */\npublic plotOffset: any;\n/**\n * Bottom padding for the plot area in pixels.\n * \\@default null\n */\npublic plotOffsetBottom: any;\n/**\n * Left padding for the plot area in pixels.\n * \\@default null\n */\npublic plotOffsetLeft: any;\n/**\n * Right padding for the plot area in pixels.\n * \\@default null\n */\npublic plotOffsetRight: any;\n/**\n * Top padding for the plot area in pixels.\n * \\@default null\n */\npublic plotOffsetTop: any;\n/**\n * Specifies the padding for the axis range in terms of interval.They are, \n * * none: Padding cannot be applied to the axis. \n * * normal: Padding is applied to the axis based on the range calculation. \n * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range. \n * * round: Axis range is rounded to the nearest possible value divided by the interval.\n * \\@default 'Auto'\n */\npublic rangePadding: any;\n/**\n * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`. \n * \n * \\@default 0\n */\npublic rowIndex: any;\n/**\n * Option to customize scrollbar with lazy loading\n */\npublic scrollbarSettings: any;\n/**\n * Specifies the skeleton format in which the dateTime format will process.\n * \\@default ''\n */\npublic skeleton: any;\n/**\n * It specifies the type of format to be used in dateTime format process.\n * \\@default 'DateTime'\n * @deprecated\n */\npublic skeletonType: any;\n/**\n * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.\n * \\@default 1\n */\npublic span: any;\n/**\n * The start angle for the series.\n * \\@default 0\n */\npublic startAngle: any;\n/**\n * It specifies whether the axis to be start from zero.\n * \\@default true\n */\npublic startFromZero: any;\n/**\n * Specifies the stripLine collection for the axis\n */\npublic stripLines: any;\n/**\n * TabIndex value for the axis.\n * \\@default 2\n */\npublic tabIndex: any;\n/**\n * Specifies the placement of a ticks to the axis line. They are, \n * * inside: Renders the ticks inside to the axis line. \n * * outside: Renders the ticks outside to the axis line.\n * \\@default 'Outside'\n */\npublic tickPosition: any;\n/**\n * Specifies the title of an axis.\n * \\@default ''\n */\npublic title: any;\n/**\n * Specifies the titlePadding from axis label\n * \\@default 5\n */\npublic titlePadding: any;\n/**\n * Options for customizing the axis title.\n */\npublic titleStyle: any;\n/**\n * Specifies the type of data the axis is handling. \n * * Double:  Renders a numeric axis. \n * * DateTime: Renders a dateTime axis. \n * * Category: Renders a category axis. \n * * Logarithmic: Renders a log axis.\n * \\@default 'Double'\n * \\@blazortype Syncfusion.EJ2.Blazor.Charts.ValueType\n * \\@isenumeration true\n */\npublic valueType: any;\n/**\n * If set to true, axis label will be visible.\n * \\@default true\n */\npublic visible: any;\n/**\n * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.\n * \\@default 1\n */\npublic zoomFactor: any;\n/**\n * Position of the zoomed axis. Value ranges from 0 to 1.\n * \\@default 0\n */\npublic zoomPosition: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-axes>e-axis',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childStripLines: new ContentChild(StripLinesDirective), \n        childMultiLevelLabels: new ContentChild(MultiLevelLabelsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction AxisDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAxisDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAxisDirective.ctorParameters;\n/** @type {?} */\nAxisDirective.prototype.directivePropList;\n/** @type {?} */\nAxisDirective.prototype.childStripLines;\n/** @type {?} */\nAxisDirective.prototype.childMultiLevelLabels;\n/** @type {?} */\nAxisDirective.prototype.tags;\n/**\n * Border of the multi level labels.\n * @type {?}\n */\nAxisDirective.prototype.border;\n/**\n * The polar radar radius position.\n * \\@default 100\n * @type {?}\n */\nAxisDirective.prototype.coefficient;\n/**\n * Specifies the index of the column where the axis is associated, \n * when the chart area is divided into multiple plot areas by using `columns`. \n * \n * \\@default 0\n * @type {?}\n */\nAxisDirective.prototype.columnIndex;\n/**\n * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.crossesAt;\n/**\n * Specifies axis name with which the axis line has to be crossed\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.crossesInAxis;\n/**\n * Options to customize the crosshair ToolTip.\n * @type {?}\n */\nAxisDirective.prototype.crosshairTooltip;\n/**\n * Description for axis and its element.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.description;\n/**\n * With this property, you can request axis to calculate intervals approximately equal to your specified interval.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nAxisDirective.prototype.desiredIntervals;\n/**\n * Specifies the position of labels at the edge of the axis.They are, \n * * None: No action will be performed. \n * * Hide: Edge label will be hidden. \n * * Shift: Shifts the edge labels.\n * \\@default 'None'\n * @type {?}\n */\nAxisDirective.prototype.edgeLabelPlacement;\n/**\n * If set to true, axis interval will be calculated automatically with respect to the zoomed range.\n * \\@default true\n * @type {?}\n */\nAxisDirective.prototype.enableAutoIntervalOnZooming;\n/**\n * Enables the scrollbar for zooming.\n * \\@default true\n * @type {?}\n */\nAxisDirective.prototype.enableScrollbarOnZooming;\n/**\n * Specifies the Trim property for an axis.\n * \\@default false\n * @type {?}\n */\nAxisDirective.prototype.enableTrim;\n/**\n * Specifies the interval for an axis.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nAxisDirective.prototype.interval;\n/**\n * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are, \n * * Auto: Defines the interval of the axis based on data. \n * * Years: Defines the interval of the axis in years. \n * * Months: Defines the interval of the axis in months. \n * * Days: Defines the interval of the axis in days. \n * * Hours: Defines the interval of the axis in hours. \n * * Minutes: Defines the interval of the axis in minutes.\n * \\@default 'Auto'\n * @type {?}\n */\nAxisDirective.prototype.intervalType;\n/**\n * Specifies indexed category  axis.\n * \\@default false\n * @type {?}\n */\nAxisDirective.prototype.isIndexed;\n/**\n * It specifies whether the axis to be rendered in inversed manner or not.\n * \\@default false\n * @type {?}\n */\nAxisDirective.prototype.isInversed;\n/**\n * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc. \n * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.\n * \\@default ''\n * @type {?}\n */\nAxisDirective.prototype.labelFormat;\n/**\n * Specifies the actions like `None`, `Hide`, `Trim`, `Wrap`, `MultipleRows`, `Rotate45`, and `Rotate90` \n * when the axis labels intersect with each other.They are, \n * * None: Shows all the labels. \n * * Hide: Hides the label when it intersects. \n * * Trim: Trim the label when it intersects. \n * * Wrap: Wrap the label when it intersects. \n * * MultipleRows: Shows the label in MultipleRows when it intersects. \n * * Rotate45: Rotates the label to 45 degree when it intersects. \n * * Rotate90: Rotates the label to 90 degree when it intersects.\n * \\@default Trim\n * @type {?}\n */\nAxisDirective.prototype.labelIntersectAction;\n/**\n * Specifies the labelPadding from axis\n * \\@default 5\n * @type {?}\n */\nAxisDirective.prototype.labelPadding;\n/**\n * Specifies the placement of a label for category axis. They are, \n * * betweenTicks: Renders the label between the ticks. \n * * onTicks: Renders the label on the ticks.\n * \\@default 'BetweenTicks'\n * @type {?}\n */\nAxisDirective.prototype.labelPlacement;\n/**\n * Specifies the placement of a labels to the axis line. They are, \n * * inside: Renders the labels inside to the axis line. \n * * outside: Renders the labels outside to the axis line.\n * \\@default 'Outside'\n * @type {?}\n */\nAxisDirective.prototype.labelPosition;\n/**\n * The angle to which the axis label gets rotated.\n * \\@default 0\n * @type {?}\n */\nAxisDirective.prototype.labelRotation;\n/**\n * Options to customize the axis label.\n * @type {?}\n */\nAxisDirective.prototype.labelStyle;\n/**\n * It specifies alignment of the line break labels.\n * \\@default 'Center'\n * @type {?}\n */\nAxisDirective.prototype.lineBreakAlignment;\n/**\n * Options for customizing axis lines.\n * @type {?}\n */\nAxisDirective.prototype.lineStyle;\n/**\n * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.\n * \\@default 10\n * @type {?}\n */\nAxisDirective.prototype.logBase;\n/**\n * Options for customizing major grid lines.\n * @type {?}\n */\nAxisDirective.prototype.majorGridLines;\n/**\n * Options for customizing major tick lines.\n * @type {?}\n */\nAxisDirective.prototype.majorTickLines;\n/**\n * Specifies the maximum range of an axis.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.maximum;\n/**\n * Specifies the maximum width of an axis label.\n * \\@default 34.\n * @type {?}\n */\nAxisDirective.prototype.maximumLabelWidth;\n/**\n * The maximum number of label count per 100 pixels with respect to the axis length.\n * \\@default 3\n * @type {?}\n */\nAxisDirective.prototype.maximumLabels;\n/**\n * Specifies the minimum range of an axis.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.minimum;\n/**\n * Options for customizing minor grid lines.\n * @type {?}\n */\nAxisDirective.prototype.minorGridLines;\n/**\n * Options for customizing minor tick lines.\n * @type {?}\n */\nAxisDirective.prototype.minorTickLines;\n/**\n * Specifies the number of minor ticks per interval.\n * \\@default 0\n * @type {?}\n */\nAxisDirective.prototype.minorTicksPerInterval;\n/**\n * Specifies the multi level labels collection for the axis\n * @type {?}\n */\nAxisDirective.prototype.multiLevelLabels;\n/**\n * Unique identifier of an axis. \n * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.\n * \\@default ''\n * @type {?}\n */\nAxisDirective.prototype.name;\n/**\n * If set to true, the axis will render at the opposite side of its default position.\n * \\@default false\n * @type {?}\n */\nAxisDirective.prototype.opposedPosition;\n/**\n * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line\n * \\@default true\n * @type {?}\n */\nAxisDirective.prototype.placeNextToAxisLine;\n/**\n * Left and right padding for the plot area in pixels.\n * \\@default 0\n * @type {?}\n */\nAxisDirective.prototype.plotOffset;\n/**\n * Bottom padding for the plot area in pixels.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.plotOffsetBottom;\n/**\n * Left padding for the plot area in pixels.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.plotOffsetLeft;\n/**\n * Right padding for the plot area in pixels.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.plotOffsetRight;\n/**\n * Top padding for the plot area in pixels.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.plotOffsetTop;\n/**\n * Specifies the padding for the axis range in terms of interval.They are, \n * * none: Padding cannot be applied to the axis. \n * * normal: Padding is applied to the axis based on the range calculation. \n * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range. \n * * round: Axis range is rounded to the nearest possible value divided by the interval.\n * \\@default 'Auto'\n * @type {?}\n */\nAxisDirective.prototype.rangePadding;\n/**\n * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`. \n * \n * \\@default 0\n * @type {?}\n */\nAxisDirective.prototype.rowIndex;\n/**\n * Option to customize scrollbar with lazy loading\n * @type {?}\n */\nAxisDirective.prototype.scrollbarSettings;\n/**\n * Specifies the skeleton format in which the dateTime format will process.\n * \\@default ''\n * @type {?}\n */\nAxisDirective.prototype.skeleton;\n/**\n * It specifies the type of format to be used in dateTime format process.\n * \\@default 'DateTime'\n * @deprecated\n * @type {?}\n */\nAxisDirective.prototype.skeletonType;\n/**\n * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.\n * \\@default 1\n * @type {?}\n */\nAxisDirective.prototype.span;\n/**\n * The start angle for the series.\n * \\@default 0\n * @type {?}\n */\nAxisDirective.prototype.startAngle;\n/**\n * It specifies whether the axis to be start from zero.\n * \\@default true\n * @type {?}\n */\nAxisDirective.prototype.startFromZero;\n/**\n * Specifies the stripLine collection for the axis\n * @type {?}\n */\nAxisDirective.prototype.stripLines;\n/**\n * TabIndex value for the axis.\n * \\@default 2\n * @type {?}\n */\nAxisDirective.prototype.tabIndex;\n/**\n * Specifies the placement of a ticks to the axis line. They are, \n * * inside: Renders the ticks inside to the axis line. \n * * outside: Renders the ticks outside to the axis line.\n * \\@default 'Outside'\n * @type {?}\n */\nAxisDirective.prototype.tickPosition;\n/**\n * Specifies the title of an axis.\n * \\@default ''\n * @type {?}\n */\nAxisDirective.prototype.title;\n/**\n * Specifies the titlePadding from axis label\n * \\@default 5\n * @type {?}\n */\nAxisDirective.prototype.titlePadding;\n/**\n * Options for customizing the axis title.\n * @type {?}\n */\nAxisDirective.prototype.titleStyle;\n/**\n * Specifies the type of data the axis is handling. \n * * Double:  Renders a numeric axis. \n * * DateTime: Renders a dateTime axis. \n * * Category: Renders a category axis. \n * * Logarithmic: Renders a log axis.\n * \\@default 'Double'\n * \\@blazortype Syncfusion.EJ2.Blazor.Charts.ValueType\n * \\@isenumeration true\n * @type {?}\n */\nAxisDirective.prototype.valueType;\n/**\n * If set to true, axis label will be visible.\n * \\@default true\n * @type {?}\n */\nAxisDirective.prototype.visible;\n/**\n * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.\n * \\@default 1\n * @type {?}\n */\nAxisDirective.prototype.zoomFactor;\n/**\n * Position of the zoomed axis. Value ranges from 0 to 1.\n * \\@default 0\n * @type {?}\n */\nAxisDirective.prototype.zoomPosition;\n/** @type {?} */\nAxisDirective.prototype.viewContainerRef;\n}\n\n/**\n * Axis Array Directive\n */\nexport class AxesDirective extends ArrayBase<AxesDirective> {\nconstructor() {\n        super('axes');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chart>e-axes',\n    queries: {\n        children: new ContentChildren(AxisDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AxesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAxesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAxesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['border', 'height'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Row Directive\n * ```html\n * <e-rows><e-row></e-row><e-rows>\n * ```\n */\nexport class RowDirective extends ComplexBase<RowDirective> {\npublic directivePropList: any;\n/**\n * Options to customize the border of the rows.\n */\npublic border: any;\n/**\n * The height of the row as a string accept input both as '100px' and '100%'. \n * If specified as '100%, row renders to the full height of its chart.\n * \\@default '100%'\n */\npublic height: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-rows>e-row',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RowDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRowDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRowDirective.ctorParameters;\n/** @type {?} */\nRowDirective.prototype.directivePropList;\n/**\n * Options to customize the border of the rows.\n * @type {?}\n */\nRowDirective.prototype.border;\n/**\n * The height of the row as a string accept input both as '100px' and '100%'. \n * If specified as '100%, row renders to the full height of its chart.\n * \\@default '100%'\n * @type {?}\n */\nRowDirective.prototype.height;\n/** @type {?} */\nRowDirective.prototype.viewContainerRef;\n}\n\n/**\n * Row Array Directive\n */\nexport class RowsDirective extends ArrayBase<RowsDirective> {\nconstructor() {\n        super('rows');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chart>e-rows',\n    queries: {\n        children: new ContentChildren(RowDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RowsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRowsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRowsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['border', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Column Directive\n * ```html\n * <e-columns><e-column></e-column><e-columns>\n * ```\n */\nexport class ColumnDirective extends ComplexBase<ColumnDirective> {\npublic directivePropList: any;\n/**\n * Options to customize the border of the columns.\n */\npublic border: any;\n/**\n * The width of the column as a string accepts input both as like '100px' or '100%'. \n * If specified as '100%, column renders to the full width of its chart.\n * \\@default '100%'\n */\npublic width: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-columns>e-column',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction ColumnDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nColumnDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nColumnDirective.ctorParameters;\n/** @type {?} */\nColumnDirective.prototype.directivePropList;\n/**\n * Options to customize the border of the columns.\n * @type {?}\n */\nColumnDirective.prototype.border;\n/**\n * The width of the column as a string accepts input both as like '100px' or '100%'. \n * If specified as '100%, column renders to the full width of its chart.\n * \\@default '100%'\n * @type {?}\n */\nColumnDirective.prototype.width;\n/** @type {?} */\nColumnDirective.prototype.viewContainerRef;\n}\n\n/**\n * Column Array Directive\n */\nexport class ColumnsDirective extends ArrayBase<ColumnsDirective> {\nconstructor() {\n        super('columns');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chart>e-columns',\n    queries: {\n        children: new ContentChildren(ColumnDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ColumnsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nColumnsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nColumnsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['colors', 'end', 'label', 'start'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * RangeColorSetting Directive\n * ```html\n * <e-rangeColorSettings><e-rangeColorSetting></e-rangeColorSetting><e-rangeColorSettings>\n * ```\n */\nexport class RangeColorSettingDirective extends ComplexBase<RangeColorSettingDirective> {\npublic directivePropList: any;\n/**\n * Specify the fill colors of point those lies on the given range, if multiple colors mentioned, then we need to fill gradient\n */\npublic colors: any;\n/**\n * Specify the end value of color mapping range\n */\npublic end: any;\n/**\n * Specify name for the range mapping item.\n */\npublic label: any;\n/**\n * Specify the start value of color mapping range\n */\npublic start: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-rangecolorsettings>e-rangecolorsetting',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RangeColorSettingDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeColorSettingDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeColorSettingDirective.ctorParameters;\n/** @type {?} */\nRangeColorSettingDirective.prototype.directivePropList;\n/**\n * Specify the fill colors of point those lies on the given range, if multiple colors mentioned, then we need to fill gradient\n * @type {?}\n */\nRangeColorSettingDirective.prototype.colors;\n/**\n * Specify the end value of color mapping range\n * @type {?}\n */\nRangeColorSettingDirective.prototype.end;\n/**\n * Specify name for the range mapping item.\n * @type {?}\n */\nRangeColorSettingDirective.prototype.label;\n/**\n * Specify the start value of color mapping range\n * @type {?}\n */\nRangeColorSettingDirective.prototype.start;\n/** @type {?} */\nRangeColorSettingDirective.prototype.viewContainerRef;\n}\n\n/**\n * RangeColorSetting Array Directive\n */\nexport class RangeColorSettingsDirective extends ArrayBase<RangeColorSettingsDirective> {\nconstructor() {\n        super('rangecolorsettings');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chart>e-rangecolorsettings',\n    queries: {\n        children: new ContentChildren(RangeColorSettingDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RangeColorSettingsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeColorSettingsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeColorSettingsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['content', 'coordinateUnits', 'description', 'horizontalAlignment', 'region', 'verticalAlignment', 'x', 'xAxisName', 'y', 'yAxisName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Annotation Directive\n * ```html\n * <e-annotations><e-annotation></e-annotation><e-annotations>\n * ```\n */\nexport class AnnotationDirective extends ComplexBase<AnnotationDirective> {\npublic directivePropList: any;\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n * \\@default 'Pixel'\n */\npublic coordinateUnits: any;\n/**\n * Information about annotation for assistive technology.\n * \\@default null\n */\npublic description: any;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as left side. \n * * Far - Align the annotation element as right side. \n * * Center - Align the annotation element as mid point.\n * \\@default 'Center'\n * @deprecated\n */\npublic horizontalAlignment: any;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n * \\@default 'Chart'\n */\npublic region: any;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n * \\@default 'Middle'\n * @deprecated\n */\npublic verticalAlignment: any;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n * \\@asptype object\n */\npublic x: any;\n/**\n * The name of horizontal axis associated with the annotation. \n * It requires `axes` of chart.\n * \\@default null\n */\npublic xAxisName: any;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n */\npublic y: any;\n/**\n * The name of vertical axis associated with the annotation. \n * It requires `axes` of chart.\n * \\@default null\n */\npublic yAxisName: any;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n * \\@default null\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-annotations>e-annotation',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction AnnotationDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAnnotationDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAnnotationDirective.ctorParameters;\n/** @type {?} */\nAnnotationDirective.propDecorators;\n/** @type {?} */\nAnnotationDirective.prototype.directivePropList;\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n * \\@default 'Pixel'\n * @type {?}\n */\nAnnotationDirective.prototype.coordinateUnits;\n/**\n * Information about annotation for assistive technology.\n * \\@default null\n * @type {?}\n */\nAnnotationDirective.prototype.description;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as left side. \n * * Far - Align the annotation element as right side. \n * * Center - Align the annotation element as mid point.\n * \\@default 'Center'\n * @deprecated\n * @type {?}\n */\nAnnotationDirective.prototype.horizontalAlignment;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n * \\@default 'Chart'\n * @type {?}\n */\nAnnotationDirective.prototype.region;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n * \\@default 'Middle'\n * @deprecated\n * @type {?}\n */\nAnnotationDirective.prototype.verticalAlignment;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n * \\@asptype object\n * @type {?}\n */\nAnnotationDirective.prototype.x;\n/**\n * The name of horizontal axis associated with the annotation. \n * It requires `axes` of chart.\n * \\@default null\n * @type {?}\n */\nAnnotationDirective.prototype.xAxisName;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n * @type {?}\n */\nAnnotationDirective.prototype.y;\n/**\n * The name of vertical axis associated with the annotation. \n * It requires `axes` of chart.\n * \\@default null\n * @type {?}\n */\nAnnotationDirective.prototype.yAxisName;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n * \\@default null\n * @type {?}\n */\nAnnotationDirective.prototype.content;\n/** @type {?} */\nAnnotationDirective.prototype.viewContainerRef;\n}\n\n/**\n * Annotation Array Directive\n */\nexport class AnnotationsDirective extends ArrayBase<AnnotationsDirective> {\nconstructor() {\n        super('annotations');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chart>e-annotations',\n    queries: {\n        children: new ContentChildren(AnnotationDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AnnotationsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAnnotationsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAnnotationsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['point', 'series'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Selected Data Directive\n * ```html\n * <e-selecteddataindexes><e-selecteddataindex></e-selecteddataindex><e-selecteddataindexes>\n * ```\n */\nexport class SelectedDataIndexDirective extends ComplexBase<SelectedDataIndexDirective> {\npublic directivePropList: any;\n/**\n * Specifies the point index\n * \\@default 0\n * \\@asptype int\n */\npublic point: any;\n/**\n * Specifies the series index\n * \\@default 0\n * \\@asptype int\n */\npublic series: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-selecteddataindexes>e-selecteddataindex',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction SelectedDataIndexDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectedDataIndexDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectedDataIndexDirective.ctorParameters;\n/** @type {?} */\nSelectedDataIndexDirective.prototype.directivePropList;\n/**\n * Specifies the point index\n * \\@default 0\n * \\@asptype int\n * @type {?}\n */\nSelectedDataIndexDirective.prototype.point;\n/**\n * Specifies the series index\n * \\@default 0\n * \\@asptype int\n * @type {?}\n */\nSelectedDataIndexDirective.prototype.series;\n/** @type {?} */\nSelectedDataIndexDirective.prototype.viewContainerRef;\n}\n\n/**\n * SelectedDataIndex Array Directive\n */\nexport class SelectedDataIndexesDirective extends ArrayBase<SelectedDataIndexesDirective> {\nconstructor() {\n        super('selecteddataindexes');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chart>e-selecteddataindexes',\n    queries: {\n        children: new ContentChildren(SelectedDataIndexDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SelectedDataIndexesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectedDataIndexesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectedDataIndexesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'bandColor', 'close', 'colorName', 'dPeriod', 'dashArray', 'dataSource', 'enableComplexProperty', 'fastPeriod', 'field', 'fill', 'high', 'kPeriod', 'low', 'lowerLine', 'macdLine', 'macdNegativeColor', 'macdPositiveColor', 'macdType', 'open', 'overBought', 'overSold', 'period', 'periodLine', 'pointColorMapping', 'query', 'segmentAxis', 'segments', 'seriesName', 'showZones', 'slowPeriod', 'standardDeviation', 'type', 'upperLine', 'visible', 'volume', 'width', 'xAxisName', 'xName', 'yAxisName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Indicator Directive\n * ```html\n * <e-indicators>\n * <e-indicator></e-indicator>\n * </e-indicators>\n * ```\n */\nexport class IndicatorDirective extends ComplexBase<IndicatorDirective> {\npublic directivePropList: any;\n/**\n * Defines the type of the technical indicator\n * \\@default 'Sma'\n */\npublic type: any;\n/**\n * Options to customizing animation for the series.\n */\npublic animation: any;\n/**\n * Options for customizing the BollingerBand in the indicator.\n * \\@default 'rgba(211,211,211,0.25)'\n */\npublic bandColor: any;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic close: any;\n/**\n * The Data Source field that contains the color mapping value. \n * It is applicable for range color mapping properly.\n */\npublic colorName: any;\n/**\n * Defines the period, the price changes over which will define the %D value in stochastic indicators\n * \\@default 3\n */\npublic dPeriod: any;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n */\npublic dashArray: any;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * \\@default ''\n */\npublic dataSource: any;\n/**\n * This property used to improve chart performance via data mapping for series dataSource.\n * \\@default false\n */\npublic enableComplexProperty: any;\n/**\n * Sets the fast period to define the Macd line\n * \\@default 26\n */\npublic fastPeriod: any;\n/**\n * Defines the field to compare the current value with previous values\n * \\@default 'Close'\n */\npublic field: any;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n */\npublic fill: any;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic high: any;\n/**\n * Defines the look back period, the price changes over which will define the %K value in stochastic indicators\n * \\@default 14\n */\npublic kPeriod: any;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic low: any;\n/**\n * Defines the appearance of lower line in technical indicators\n */\npublic lowerLine: any;\n/**\n * Defines the appearance of the the MacdLine of Macd indicator\n * \\@default { color: '#ff9933', width: 2 }\n */\npublic macdLine: any;\n/**\n * Defines the color of the negative bars in Macd indicators\n * \\@default '#e74c3d'\n */\npublic macdNegativeColor: any;\n/**\n * Defines the color of the positive bars in Macd indicators\n * \\@default '#2ecd71'\n */\npublic macdPositiveColor: any;\n/**\n * Defines the type of the Macd indicator.\n * \\@default 'Both'\n */\npublic macdType: any;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic open: any;\n/**\n * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators\n * \\@default 80\n */\npublic overBought: any;\n/**\n * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators\n * \\@default 20\n */\npublic overSold: any;\n/**\n * Defines the period, the price changes over which will be considered to predict the trend\n * \\@default 14\n */\npublic period: any;\n/**\n * Defines the appearance of period line in technical indicators\n */\npublic periodLine: any;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n */\npublic pointColorMapping: any;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * \\@default ''\n */\npublic query: any;\n/**\n * Defines the axis, based on which the line series will be split.\n */\npublic segmentAxis: any;\n/**\n * Defines the collection of regions that helps to differentiate a line series.\n */\npublic segments: any;\n/**\n * Defines the name of the series, the data of which has to be depicted as indicator\n * \\@default ''\n */\npublic seriesName: any;\n/**\n * Enables/Disables the over-bought and over-sold regions\n * \\@default true\n */\npublic showZones: any;\n/**\n * Sets the slow period to define the Macd line\n * \\@default 12\n */\npublic slowPeriod: any;\n/**\n * Sets the standard deviation values that helps to define the upper and lower bollinger bands\n * \\@default 2\n */\npublic standardDeviation: any;\n/**\n * Defines the appearance of the upper line in technical indicators\n */\npublic upperLine: any;\n/**\n * Specifies the visibility of series.\n * \\@default true\n */\npublic visible: any;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * \\@default ''\n */\npublic volume: any;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n */\npublic width: any;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n */\npublic xAxisName: any;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic xName: any;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n */\npublic yAxisName: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-indicators>e-indicator',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction IndicatorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nIndicatorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nIndicatorDirective.ctorParameters;\n/** @type {?} */\nIndicatorDirective.prototype.directivePropList;\n/**\n * Defines the type of the technical indicator\n * \\@default 'Sma'\n * @type {?}\n */\nIndicatorDirective.prototype.type;\n/**\n * Options to customizing animation for the series.\n * @type {?}\n */\nIndicatorDirective.prototype.animation;\n/**\n * Options for customizing the BollingerBand in the indicator.\n * \\@default 'rgba(211,211,211,0.25)'\n * @type {?}\n */\nIndicatorDirective.prototype.bandColor;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.close;\n/**\n * The Data Source field that contains the color mapping value. \n * It is applicable for range color mapping properly.\n * @type {?}\n */\nIndicatorDirective.prototype.colorName;\n/**\n * Defines the period, the price changes over which will define the %D value in stochastic indicators\n * \\@default 3\n * @type {?}\n */\nIndicatorDirective.prototype.dPeriod;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n * @type {?}\n */\nIndicatorDirective.prototype.dashArray;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.dataSource;\n/**\n * This property used to improve chart performance via data mapping for series dataSource.\n * \\@default false\n * @type {?}\n */\nIndicatorDirective.prototype.enableComplexProperty;\n/**\n * Sets the fast period to define the Macd line\n * \\@default 26\n * @type {?}\n */\nIndicatorDirective.prototype.fastPeriod;\n/**\n * Defines the field to compare the current value with previous values\n * \\@default 'Close'\n * @type {?}\n */\nIndicatorDirective.prototype.field;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n * @type {?}\n */\nIndicatorDirective.prototype.fill;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.high;\n/**\n * Defines the look back period, the price changes over which will define the %K value in stochastic indicators\n * \\@default 14\n * @type {?}\n */\nIndicatorDirective.prototype.kPeriod;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.low;\n/**\n * Defines the appearance of lower line in technical indicators\n * @type {?}\n */\nIndicatorDirective.prototype.lowerLine;\n/**\n * Defines the appearance of the the MacdLine of Macd indicator\n * \\@default { color: '#ff9933', width: 2 }\n * @type {?}\n */\nIndicatorDirective.prototype.macdLine;\n/**\n * Defines the color of the negative bars in Macd indicators\n * \\@default '#e74c3d'\n * @type {?}\n */\nIndicatorDirective.prototype.macdNegativeColor;\n/**\n * Defines the color of the positive bars in Macd indicators\n * \\@default '#2ecd71'\n * @type {?}\n */\nIndicatorDirective.prototype.macdPositiveColor;\n/**\n * Defines the type of the Macd indicator.\n * \\@default 'Both'\n * @type {?}\n */\nIndicatorDirective.prototype.macdType;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.open;\n/**\n * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators\n * \\@default 80\n * @type {?}\n */\nIndicatorDirective.prototype.overBought;\n/**\n * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators\n * \\@default 20\n * @type {?}\n */\nIndicatorDirective.prototype.overSold;\n/**\n * Defines the period, the price changes over which will be considered to predict the trend\n * \\@default 14\n * @type {?}\n */\nIndicatorDirective.prototype.period;\n/**\n * Defines the appearance of period line in technical indicators\n * @type {?}\n */\nIndicatorDirective.prototype.periodLine;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.pointColorMapping;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.query;\n/**\n * Defines the axis, based on which the line series will be split.\n * @type {?}\n */\nIndicatorDirective.prototype.segmentAxis;\n/**\n * Defines the collection of regions that helps to differentiate a line series.\n * @type {?}\n */\nIndicatorDirective.prototype.segments;\n/**\n * Defines the name of the series, the data of which has to be depicted as indicator\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.seriesName;\n/**\n * Enables/Disables the over-bought and over-sold regions\n * \\@default true\n * @type {?}\n */\nIndicatorDirective.prototype.showZones;\n/**\n * Sets the slow period to define the Macd line\n * \\@default 12\n * @type {?}\n */\nIndicatorDirective.prototype.slowPeriod;\n/**\n * Sets the standard deviation values that helps to define the upper and lower bollinger bands\n * \\@default 2\n * @type {?}\n */\nIndicatorDirective.prototype.standardDeviation;\n/**\n * Defines the appearance of the upper line in technical indicators\n * @type {?}\n */\nIndicatorDirective.prototype.upperLine;\n/**\n * Specifies the visibility of series.\n * \\@default true\n * @type {?}\n */\nIndicatorDirective.prototype.visible;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.volume;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n * @type {?}\n */\nIndicatorDirective.prototype.width;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n * @type {?}\n */\nIndicatorDirective.prototype.xAxisName;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nIndicatorDirective.prototype.xName;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n * @type {?}\n */\nIndicatorDirective.prototype.yAxisName;\n/** @type {?} */\nIndicatorDirective.prototype.viewContainerRef;\n}\n\n/**\n * Indicator Array Directive\n */\nexport class IndicatorsDirective extends ArrayBase<IndicatorsDirective> {\nconstructor() {\n        super('indicators');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-chart>e-indicators',\n    queries: {\n        children: new ContentChildren(IndicatorDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction IndicatorsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nIndicatorsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nIndicatorsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Chart } from '@syncfusion/ej2-charts';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { SeriesCollectionDirective } from './series.directive';\nimport { AxesDirective } from './axes.directive';\nimport { RowsDirective } from './rows.directive';\nimport { ColumnsDirective } from './columns.directive';\nimport { RangeColorSettingsDirective } from './rangecolorsettings.directive';\nimport { AnnotationsDirective } from './annotations.directive';\nimport { SelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { IndicatorsDirective } from './indicators.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['allowExport','allowMultiSelection','annotations','axes','background','backgroundImage','border','chartArea','columns','crosshair','currencyCode','dataSource','description','enableAnimation','enableAutoIntervalOnBothAxis','enableCanvas','enableExport','enablePersistence','enableRtl','enableSideBySidePlacement','height','highlightMode','highlightPattern','indicators','isMultiSelect','isTransposed','legendSettings','locale','margin','palettes','primaryXAxis','primaryYAxis','rangeColorSettings','rows','selectedDataIndexes','selectionMode','selectionPattern','series','subTitle','subTitleStyle','tabIndex','theme','title','titleStyle','tooltip','useGroupingSeparator','width','zoomSettings'];\nexport const /** @type {?} */ outputs: string[] = ['afterExport','animationComplete','annotationRender','axisLabelClick','axisLabelRender','axisMultiLabelRender','axisRangeCalculated','beforeExport','beforePrint','beforeResize','chartMouseClick','chartMouseDown','chartMouseLeave','chartMouseMove','chartMouseUp','drag','dragComplete','dragEnd','dragStart','legendClick','legendRender','load','loaded','multiLevelLabelClick','onZooming','pointClick','pointDoubleClick','pointMove','pointRender','resized','scrollChanged','scrollEnd','scrollStart','selectionComplete','seriesRender','sharedTooltipRender','textRender','tooltipRender','zoomComplete','dataSourceChange'];\nexport const /** @type {?} */ twoWays: string[] = ['dataSource'];\n/**\n * Chart Component\n * ```html\n * <ejschart></ejschart>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class ChartComponent extends Chart implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childSeries: QueryList<SeriesCollectionDirective>;\npublic childAxes: QueryList<AxesDirective>;\npublic childRows: QueryList<RowsDirective>;\npublic childColumns: QueryList<ColumnsDirective>;\npublic childRangeColorSettings: QueryList<RangeColorSettingsDirective>;\npublic childAnnotations: QueryList<AnnotationsDirective>;\npublic childSelectedDataIndexes: QueryList<SelectedDataIndexesDirective>;\npublic childIndicators: QueryList<IndicatorsDirective>;\npublic tags: string[] = ['series', 'axes', 'rows', 'columns', 'rangeColorSettings', 'annotations', 'selectedDataIndexes', 'indicators'];\npublic dataSourceChange: any;\n    \n    @Template()\npublic tooltip_template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsScatterSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsColumnSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSplineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSplineAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStripLine');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsScrollBar');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStepLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStepAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStackingColumnSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStackingLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStackingAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStackingStepAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsBarSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStackingBarSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRangeColumnSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsBubbleSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsCrosshair');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsCategory');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDateTime');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsLogarithmic');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsLegend');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsZoom');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDataLabel');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSelection');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsChartAnnotation');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsHiloSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsHiloOpenCloseSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsWaterfallSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRangeAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSplineRangeAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsCandleSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsPolarSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRadarSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsEmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationDistributionIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMacdIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAtrIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRsiIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMomentumIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStochasticIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsBollingerBands');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsBoxAndWhiskerSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsHistogramSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsErrorBar');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTrendlines');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDateTimeCategory');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMultiColoredLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMultiColoredAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMultiLevelLabel');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsParetoSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDataEditing');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsHighlight');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childSeries;\n        \n\t    if (this.childAxes) {\n            this.tagObjects[1].instance = this.childAxes;\n        }\n        \n\t    if (this.childRows) {\n            this.tagObjects[2].instance = this.childRows;\n        }\n        \n\t    if (this.childColumns) {\n            this.tagObjects[3].instance = this.childColumns;\n        }\n        \n\t    if (this.childRangeColorSettings) {\n            this.tagObjects[4].instance = this.childRangeColorSettings;\n        }\n        \n\t    if (this.childAnnotations) {\n            this.tagObjects[5].instance = this.childAnnotations;\n        }\n        \n\t    if (this.childSelectedDataIndexes) {\n            this.tagObjects[6].instance = this.childSelectedDataIndexes;\n        }\n        \n\t    if (this.childIndicators) {\n            this.tagObjects[7].instance = this.childIndicators;\n        }\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-chart',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    queries: {\n        childSeries: new ContentChild(SeriesCollectionDirective), \n        childAxes: new ContentChild(AxesDirective), \n        childRows: new ContentChild(RowsDirective), \n        childColumns: new ContentChild(ColumnsDirective), \n        childRangeColorSettings: new ContentChild(RangeColorSettingsDirective), \n        childAnnotations: new ContentChild(AnnotationsDirective), \n        childSelectedDataIndexes: new ContentChild(SelectedDataIndexesDirective), \n        childIndicators: new ContentChild(IndicatorsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate', ] },],\n};\n}\n\nfunction ChartComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nChartComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChartComponent.ctorParameters;\n/** @type {?} */\nChartComponent.propDecorators;\n/** @type {?} */\nChartComponent.prototype.context;\n/** @type {?} */\nChartComponent.prototype.tagObjects;\n/** @type {?} */\nChartComponent.prototype.childSeries;\n/** @type {?} */\nChartComponent.prototype.childAxes;\n/** @type {?} */\nChartComponent.prototype.childRows;\n/** @type {?} */\nChartComponent.prototype.childColumns;\n/** @type {?} */\nChartComponent.prototype.childRangeColorSettings;\n/** @type {?} */\nChartComponent.prototype.childAnnotations;\n/** @type {?} */\nChartComponent.prototype.childSelectedDataIndexes;\n/** @type {?} */\nChartComponent.prototype.childIndicators;\n/** @type {?} */\nChartComponent.prototype.tags;\n/** @type {?} */\nChartComponent.prototype.dataSourceChange;\n/** @type {?} */\nChartComponent.prototype.tooltip_template;\n/** @type {?} */\nChartComponent.prototype.registerEvents;\n/** @type {?} */\nChartComponent.prototype.addTwoWay;\n/** @type {?} */\nChartComponent.prototype.ngEle;\n/** @type {?} */\nChartComponent.prototype.srenderer;\n/** @type {?} */\nChartComponent.prototype.viewContainerRef;\n/** @type {?} */\nChartComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TrendlineDirective, TrendlinesDirective } from './trendlines.directive';\nimport { SegmentDirective, SegmentsDirective } from './segments.directive';\nimport { SeriesDirective, SeriesCollectionDirective } from './series.directive';\nimport { StripLineDirective, StripLinesDirective } from './striplines.directive';\nimport { CategoryDirective, CategoriesDirective } from './categories.directive';\nimport { MultiLevelLabelDirective, MultiLevelLabelsDirective } from './multilevellabels.directive';\nimport { AxisDirective, AxesDirective } from './axes.directive';\nimport { RowDirective, RowsDirective } from './rows.directive';\nimport { ColumnDirective, ColumnsDirective } from './columns.directive';\nimport { RangeColorSettingDirective, RangeColorSettingsDirective } from './rangecolorsettings.directive';\nimport { AnnotationDirective, AnnotationsDirective } from './annotations.directive';\nimport { SelectedDataIndexDirective, SelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { IndicatorDirective, IndicatorsDirective } from './indicators.directive';\nimport { ChartComponent } from './chart.component';\n/**\n * NgModule definition for the Chart component.\n */\nexport class ChartModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        ChartComponent,\n        TrendlineDirective,\n        TrendlinesDirective,\n        SegmentDirective,\n        SegmentsDirective,\n        SeriesDirective,\n        SeriesCollectionDirective,\n        StripLineDirective,\n        StripLinesDirective,\n        CategoryDirective,\n        CategoriesDirective,\n        MultiLevelLabelDirective,\n        MultiLevelLabelsDirective,\n        AxisDirective,\n        AxesDirective,\n        RowDirective,\n        RowsDirective,\n        ColumnDirective,\n        ColumnsDirective,\n        RangeColorSettingDirective,\n        RangeColorSettingsDirective,\n        AnnotationDirective,\n        AnnotationsDirective,\n        SelectedDataIndexDirective,\n        SelectedDataIndexesDirective,\n        IndicatorDirective,\n        IndicatorsDirective\n    ],\n    exports: [\n        ChartComponent,\n        TrendlineDirective,\n        TrendlinesDirective,\n        SegmentDirective,\n        SegmentsDirective,\n        SeriesDirective,\n        SeriesCollectionDirective,\n        StripLineDirective,\n        StripLinesDirective,\n        CategoryDirective,\n        CategoriesDirective,\n        MultiLevelLabelDirective,\n        MultiLevelLabelsDirective,\n        AxisDirective,\n        AxesDirective,\n        RowDirective,\n        RowsDirective,\n        ColumnDirective,\n        ColumnsDirective,\n        RangeColorSettingDirective,\n        RangeColorSettingsDirective,\n        AnnotationDirective,\n        AnnotationsDirective,\n        SelectedDataIndexDirective,\n        SelectedDataIndexesDirective,\n        IndicatorDirective,\n        IndicatorsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChartModule_tsickle_Closure_declarations() {\n/** @type {?} */\nChartModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChartModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TrendlineDirective, TrendlinesDirective } from './trendlines.directive';\nimport { SegmentDirective, SegmentsDirective } from './segments.directive';\nimport { SeriesDirective, SeriesCollectionDirective } from './series.directive';\nimport { StripLineDirective, StripLinesDirective } from './striplines.directive';\nimport { CategoryDirective, CategoriesDirective } from './categories.directive';\nimport { MultiLevelLabelDirective, MultiLevelLabelsDirective } from './multilevellabels.directive';\nimport { AxisDirective, AxesDirective } from './axes.directive';\nimport { RowDirective, RowsDirective } from './rows.directive';\nimport { ColumnDirective, ColumnsDirective } from './columns.directive';\nimport { RangeColorSettingDirective, RangeColorSettingsDirective } from './rangecolorsettings.directive';\nimport { AnnotationDirective, AnnotationsDirective } from './annotations.directive';\nimport { SelectedDataIndexDirective, SelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { IndicatorDirective, IndicatorsDirective } from './indicators.directive';\nimport { ChartComponent } from './chart.component';\nimport { ChartModule } from './chart.module';\nimport {LineSeries, ScatterSeries, ColumnSeries, SplineSeries, SplineAreaSeries, StripLine, AreaSeries, ScrollBar, StepLineSeries, StepAreaSeries, StackingColumnSeries, StackingLineSeries, StackingAreaSeries, StackingStepAreaSeries, BarSeries, StackingBarSeries, RangeColumnSeries, BubbleSeries, Tooltip, Crosshair, Category, DateTime, Logarithmic, Legend, Zoom, DataLabel, Selection, ChartAnnotation, HiloSeries, HiloOpenCloseSeries, WaterfallSeries, RangeAreaSeries, SplineRangeAreaSeries, CandleSeries, PolarSeries, RadarSeries, SmaIndicator, TmaIndicator, EmaIndicator, AccumulationDistributionIndicator, MacdIndicator, AtrIndicator, RsiIndicator, MomentumIndicator, StochasticIndicator, BollingerBands, BoxAndWhiskerSeries, HistogramSeries, ErrorBar, Trendlines, DateTimeCategory, MultiColoredLineSeries, MultiColoredAreaSeries, MultiLevelLabel, ParetoSeries, Export, DataEditing, Highlight} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ LineSeriesService: ValueProvider = { provide: 'ChartsLineSeries', useValue: LineSeries};\nexport const /** @type {?} */ ScatterSeriesService: ValueProvider = { provide: 'ChartsScatterSeries', useValue: ScatterSeries};\nexport const /** @type {?} */ ColumnSeriesService: ValueProvider = { provide: 'ChartsColumnSeries', useValue: ColumnSeries};\nexport const /** @type {?} */ SplineSeriesService: ValueProvider = { provide: 'ChartsSplineSeries', useValue: SplineSeries};\nexport const /** @type {?} */ SplineAreaSeriesService: ValueProvider = { provide: 'ChartsSplineAreaSeries', useValue: SplineAreaSeries};\nexport const /** @type {?} */ StripLineService: ValueProvider = { provide: 'ChartsStripLine', useValue: StripLine};\nexport const /** @type {?} */ AreaSeriesService: ValueProvider = { provide: 'ChartsAreaSeries', useValue: AreaSeries};\nexport const /** @type {?} */ ScrollBarService: ValueProvider = { provide: 'ChartsScrollBar', useValue: ScrollBar};\nexport const /** @type {?} */ StepLineSeriesService: ValueProvider = { provide: 'ChartsStepLineSeries', useValue: StepLineSeries};\nexport const /** @type {?} */ StepAreaSeriesService: ValueProvider = { provide: 'ChartsStepAreaSeries', useValue: StepAreaSeries};\nexport const /** @type {?} */ StackingColumnSeriesService: ValueProvider = { provide: 'ChartsStackingColumnSeries', useValue: StackingColumnSeries};\nexport const /** @type {?} */ StackingLineSeriesService: ValueProvider = { provide: 'ChartsStackingLineSeries', useValue: StackingLineSeries};\nexport const /** @type {?} */ StackingAreaSeriesService: ValueProvider = { provide: 'ChartsStackingAreaSeries', useValue: StackingAreaSeries};\nexport const /** @type {?} */ StackingStepAreaSeriesService: ValueProvider = { provide: 'ChartsStackingStepAreaSeries', useValue: StackingStepAreaSeries};\nexport const /** @type {?} */ BarSeriesService: ValueProvider = { provide: 'ChartsBarSeries', useValue: BarSeries};\nexport const /** @type {?} */ StackingBarSeriesService: ValueProvider = { provide: 'ChartsStackingBarSeries', useValue: StackingBarSeries};\nexport const /** @type {?} */ RangeColumnSeriesService: ValueProvider = { provide: 'ChartsRangeColumnSeries', useValue: RangeColumnSeries};\nexport const /** @type {?} */ BubbleSeriesService: ValueProvider = { provide: 'ChartsBubbleSeries', useValue: BubbleSeries};\nexport const /** @type {?} */ TooltipService: ValueProvider = { provide: 'ChartsTooltip', useValue: Tooltip};\nexport const /** @type {?} */ CrosshairService: ValueProvider = { provide: 'ChartsCrosshair', useValue: Crosshair};\nexport const /** @type {?} */ CategoryService: ValueProvider = { provide: 'ChartsCategory', useValue: Category};\nexport const /** @type {?} */ DateTimeService: ValueProvider = { provide: 'ChartsDateTime', useValue: DateTime};\nexport const /** @type {?} */ LogarithmicService: ValueProvider = { provide: 'ChartsLogarithmic', useValue: Logarithmic};\nexport const /** @type {?} */ LegendService: ValueProvider = { provide: 'ChartsLegend', useValue: Legend};\nexport const /** @type {?} */ ZoomService: ValueProvider = { provide: 'ChartsZoom', useValue: Zoom};\nexport const /** @type {?} */ DataLabelService: ValueProvider = { provide: 'ChartsDataLabel', useValue: DataLabel};\nexport const /** @type {?} */ SelectionService: ValueProvider = { provide: 'ChartsSelection', useValue: Selection};\nexport const /** @type {?} */ ChartAnnotationService: ValueProvider = { provide: 'ChartsChartAnnotation', useValue: ChartAnnotation};\nexport const /** @type {?} */ HiloSeriesService: ValueProvider = { provide: 'ChartsHiloSeries', useValue: HiloSeries};\nexport const /** @type {?} */ HiloOpenCloseSeriesService: ValueProvider = { provide: 'ChartsHiloOpenCloseSeries', useValue: HiloOpenCloseSeries};\nexport const /** @type {?} */ WaterfallSeriesService: ValueProvider = { provide: 'ChartsWaterfallSeries', useValue: WaterfallSeries};\nexport const /** @type {?} */ RangeAreaSeriesService: ValueProvider = { provide: 'ChartsRangeAreaSeries', useValue: RangeAreaSeries};\nexport const /** @type {?} */ SplineRangeAreaSeriesService: ValueProvider = { provide: 'ChartsSplineRangeAreaSeries', useValue: SplineRangeAreaSeries};\nexport const /** @type {?} */ CandleSeriesService: ValueProvider = { provide: 'ChartsCandleSeries', useValue: CandleSeries};\nexport const /** @type {?} */ PolarSeriesService: ValueProvider = { provide: 'ChartsPolarSeries', useValue: PolarSeries};\nexport const /** @type {?} */ RadarSeriesService: ValueProvider = { provide: 'ChartsRadarSeries', useValue: RadarSeries};\nexport const /** @type {?} */ SmaIndicatorService: ValueProvider = { provide: 'ChartsSmaIndicator', useValue: SmaIndicator};\nexport const /** @type {?} */ TmaIndicatorService: ValueProvider = { provide: 'ChartsTmaIndicator', useValue: TmaIndicator};\nexport const /** @type {?} */ EmaIndicatorService: ValueProvider = { provide: 'ChartsEmaIndicator', useValue: EmaIndicator};\nexport const /** @type {?} */ AccumulationDistributionIndicatorService: ValueProvider = { provide: 'ChartsAccumulationDistributionIndicator', useValue: AccumulationDistributionIndicator};\nexport const /** @type {?} */ MacdIndicatorService: ValueProvider = { provide: 'ChartsMacdIndicator', useValue: MacdIndicator};\nexport const /** @type {?} */ AtrIndicatorService: ValueProvider = { provide: 'ChartsAtrIndicator', useValue: AtrIndicator};\nexport const /** @type {?} */ RsiIndicatorService: ValueProvider = { provide: 'ChartsRsiIndicator', useValue: RsiIndicator};\nexport const /** @type {?} */ MomentumIndicatorService: ValueProvider = { provide: 'ChartsMomentumIndicator', useValue: MomentumIndicator};\nexport const /** @type {?} */ StochasticIndicatorService: ValueProvider = { provide: 'ChartsStochasticIndicator', useValue: StochasticIndicator};\nexport const /** @type {?} */ BollingerBandsService: ValueProvider = { provide: 'ChartsBollingerBands', useValue: BollingerBands};\nexport const /** @type {?} */ BoxAndWhiskerSeriesService: ValueProvider = { provide: 'ChartsBoxAndWhiskerSeries', useValue: BoxAndWhiskerSeries};\nexport const /** @type {?} */ HistogramSeriesService: ValueProvider = { provide: 'ChartsHistogramSeries', useValue: HistogramSeries};\nexport const /** @type {?} */ ErrorBarService: ValueProvider = { provide: 'ChartsErrorBar', useValue: ErrorBar};\nexport const /** @type {?} */ TrendlinesService: ValueProvider = { provide: 'ChartsTrendlines', useValue: Trendlines};\nexport const /** @type {?} */ DateTimeCategoryService: ValueProvider = { provide: 'ChartsDateTimeCategory', useValue: DateTimeCategory};\nexport const /** @type {?} */ MultiColoredLineSeriesService: ValueProvider = { provide: 'ChartsMultiColoredLineSeries', useValue: MultiColoredLineSeries};\nexport const /** @type {?} */ MultiColoredAreaSeriesService: ValueProvider = { provide: 'ChartsMultiColoredAreaSeries', useValue: MultiColoredAreaSeries};\nexport const /** @type {?} */ MultiLevelLabelService: ValueProvider = { provide: 'ChartsMultiLevelLabel', useValue: MultiLevelLabel};\nexport const /** @type {?} */ ParetoSeriesService: ValueProvider = { provide: 'ChartsParetoSeries', useValue: ParetoSeries};\nexport const /** @type {?} */ ExportService: ValueProvider = { provide: 'ChartsExport', useValue: Export};\nexport const /** @type {?} */ DataEditingService: ValueProvider = { provide: 'ChartsDataEditing', useValue: DataEditing};\nexport const /** @type {?} */ HighlightService: ValueProvider = { provide: 'ChartsHighlight', useValue: Highlight};\n/**\n * NgModule definition for the Chart component with providers.\n */\nexport class ChartAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, ChartModule],\n    exports: [\n        ChartModule\n    ],\n    providers:[\n        LineSeriesService,\n        ScatterSeriesService,\n        ColumnSeriesService,\n        SplineSeriesService,\n        SplineAreaSeriesService,\n        StripLineService,\n        AreaSeriesService,\n        ScrollBarService,\n        StepLineSeriesService,\n        StepAreaSeriesService,\n        StackingColumnSeriesService,\n        StackingLineSeriesService,\n        StackingAreaSeriesService,\n        StackingStepAreaSeriesService,\n        BarSeriesService,\n        StackingBarSeriesService,\n        RangeColumnSeriesService,\n        BubbleSeriesService,\n        TooltipService,\n        CrosshairService,\n        CategoryService,\n        DateTimeService,\n        LogarithmicService,\n        LegendService,\n        ZoomService,\n        DataLabelService,\n        SelectionService,\n        ChartAnnotationService,\n        HiloSeriesService,\n        HiloOpenCloseSeriesService,\n        WaterfallSeriesService,\n        RangeAreaSeriesService,\n        SplineRangeAreaSeriesService,\n        CandleSeriesService,\n        PolarSeriesService,\n        RadarSeriesService,\n        SmaIndicatorService,\n        TmaIndicatorService,\n        EmaIndicatorService,\n        AccumulationDistributionIndicatorService,\n        MacdIndicatorService,\n        AtrIndicatorService,\n        RsiIndicatorService,\n        MomentumIndicatorService,\n        StochasticIndicatorService,\n        BollingerBandsService,\n        BoxAndWhiskerSeriesService,\n        HistogramSeriesService,\n        ErrorBarService,\n        TrendlinesService,\n        DateTimeCategoryService,\n        MultiColoredLineSeriesService,\n        MultiColoredAreaSeriesService,\n        MultiLevelLabelService,\n        ParetoSeriesService,\n        ExportService,\n        DataEditingService,\n        HighlightService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChartAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nChartAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChartAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'border', 'dataLabel', 'dataSource', 'emptyPointSettings', 'enableTooltip', 'endAngle', 'explode', 'explodeAll', 'explodeIndex', 'explodeOffset', 'gapRatio', 'groupMode', 'groupTo', 'height', 'innerRadius', 'legendImageUrl', 'legendShape', 'name', 'neckHeight', 'neckWidth', 'opacity', 'palettes', 'pointColorMapping', 'pyramidMode', 'query', 'radius', 'selectionStyle', 'startAngle', 'tooltipMappingName', 'type', 'visible', 'width', 'xName', 'yName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * AccumulationSeries Directive\n * ```html\n * <e-accumulation-series-collection>\n * <e-accumulation-series></e-accumulation-series>\n * </e-accumulation-series-collection>\n * ```\n */\nexport class AccumulationSeriesDirective extends ComplexBase<AccumulationSeriesDirective> {\npublic directivePropList: any;\n/**\n * Specify the type of the series in accumulation chart.\n * \\@default 'Pie'\n */\npublic type: any;\n/**\n * Options for customizing the animation for series.\n */\npublic animation: any;\n/**\n * Options for customizing the border of the series.\n */\npublic border: any;\n/**\n * The data label for the series.\n */\npublic dataLabel: any;\n/**\n * Specifies the dataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * \\@default ''\n */\npublic dataSource: any;\n/**\n * options to customize the empty points in series\n */\npublic emptyPointSettings: any;\n/**\n * To enable or disable tooltip for a series.\n * \\@default true\n */\npublic enableTooltip: any;\n/**\n * End angle for a series.\n * \\@default null\n */\npublic endAngle: any;\n/**\n * If set true, series points will be exploded on mouse click or touch.\n * \\@default false\n */\npublic explode: any;\n/**\n * If set true, all the points in the series will get exploded on load.\n * \\@default false\n */\npublic explodeAll: any;\n/**\n * Index of the point, to be exploded on load.\n * \\@default null\n * \\@aspdefaultvalueignore\n * \\@blazordefaultvalue Double.NaN\n */\npublic explodeIndex: any;\n/**\n * Distance of the point from the center, which takes values in both pixels and percentage.\n * \\@default '30%'\n */\npublic explodeOffset: any;\n/**\n * Defines the distance between the segments of a funnel/pyramid series. The range will be from 0 to 1\n * \\@default 0\n */\npublic gapRatio: any;\n/**\n * AccumulationSeries y values less than groupMode are combined into single slice named others\n * \\@default Value\n */\npublic groupMode: any;\n/**\n * AccumulationSeries y values less than groupTo are combined into single slice named others\n * \\@default null\n */\npublic groupTo: any;\n/**\n * Defines the height of the funnel/pyramid with respect to the chart area\n * \\@default '80%'\n */\npublic height: any;\n/**\n * When the innerRadius value is greater than 0 percentage, a donut will appear in pie series. It takes values only in percentage.\n * \\@default '0'\n */\npublic innerRadius: any;\n/**\n * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.\n * \\@default ''\n */\npublic legendImageUrl: any;\n/**\n * The shape of the legend. Each series has its own legend shape. They are \n * * Circle - Renders a circle. \n * * Rectangle - Renders a rectangle. \n * * Triangle - Renders a triangle. \n * * Diamond - Renders a diamond. \n * * Cross - Renders a cross. \n * * HorizontalLine - Renders a horizontalLine. \n * * VerticalLine - Renders a verticalLine. \n * * Pentagon - Renders a pentagon. \n * * InvertedTriangle - Renders a invertedTriangle. \n * * SeriesType -Render a legend shape based on series type. \n * * Image -Render a image.     *\n * \\@default 'SeriesType'\n */\npublic legendShape: any;\n/**\n * Specifies the series name\n * \\@default ''\n */\npublic name: any;\n/**\n * Defines the height of the funnel neck with respect to the chart area\n * \\@default '20%'\n */\npublic neckHeight: any;\n/**\n * Defines the width of the funnel neck with respect to the chart area\n * \\@default '20%'\n */\npublic neckWidth: any;\n/**\n * The opacity of the series.\n * \\@default 1.\n */\npublic opacity: any;\n/**\n * Palette for series points.\n * \\@default []\n */\npublic palettes: any;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n */\npublic pointColorMapping: any;\n/**\n * Defines how the values have to be reflected, whether through height/surface of the segments\n * \\@default 'Linear'\n */\npublic pyramidMode: any;\n/**\n * Specifies Query to select data from dataSource. This property is applicable only when the dataSource is `ej.DataManager`.\n * \\@default null\n */\npublic query: any;\n/**\n * Radius of the pie series and its values in percentage.\n * \\@default '80%'\n */\npublic radius: any;\n/**\n * Custom style for the selected series or points.\n * \\@default null\n */\npublic selectionStyle: any;\n/**\n * Start angle for a series.\n * \\@default 0\n */\npublic startAngle: any;\n/**\n * The provided value will be considered as a Tooltip Mapping name\n * \\@default ''\n */\npublic tooltipMappingName: any;\n/**\n * Specifies the series visibility.\n * \\@default true\n */\npublic visible: any;\n/**\n * Defines the width of the funnel/pyramid with respect to the chart area\n * \\@default '80%'\n */\npublic width: any;\n/**\n * The DataSource field which contains the x value.\n * \\@default ''\n */\npublic xName: any;\n/**\n * The DataSource field which contains the y value.\n * \\@default ''\n */\npublic yName: any;\n    \n    @Template()\npublic dataLabel_template: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-accumulation-series-collection>e-accumulation-series',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dataLabel_template': [{ type: ContentChild, args: ['dataLabelTemplate', ] },],\n};\n}\n\nfunction AccumulationSeriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationSeriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationSeriesDirective.ctorParameters;\n/** @type {?} */\nAccumulationSeriesDirective.propDecorators;\n/** @type {?} */\nAccumulationSeriesDirective.prototype.directivePropList;\n/**\n * Specify the type of the series in accumulation chart.\n * \\@default 'Pie'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.type;\n/**\n * Options for customizing the animation for series.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.animation;\n/**\n * Options for customizing the border of the series.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.border;\n/**\n * The data label for the series.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.dataLabel;\n/**\n * Specifies the dataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * \\@default ''\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.dataSource;\n/**\n * options to customize the empty points in series\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.emptyPointSettings;\n/**\n * To enable or disable tooltip for a series.\n * \\@default true\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.enableTooltip;\n/**\n * End angle for a series.\n * \\@default null\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.endAngle;\n/**\n * If set true, series points will be exploded on mouse click or touch.\n * \\@default false\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.explode;\n/**\n * If set true, all the points in the series will get exploded on load.\n * \\@default false\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.explodeAll;\n/**\n * Index of the point, to be exploded on load.\n * \\@default null\n * \\@aspdefaultvalueignore\n * \\@blazordefaultvalue Double.NaN\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.explodeIndex;\n/**\n * Distance of the point from the center, which takes values in both pixels and percentage.\n * \\@default '30%'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.explodeOffset;\n/**\n * Defines the distance between the segments of a funnel/pyramid series. The range will be from 0 to 1\n * \\@default 0\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.gapRatio;\n/**\n * AccumulationSeries y values less than groupMode are combined into single slice named others\n * \\@default Value\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.groupMode;\n/**\n * AccumulationSeries y values less than groupTo are combined into single slice named others\n * \\@default null\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.groupTo;\n/**\n * Defines the height of the funnel/pyramid with respect to the chart area\n * \\@default '80%'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.height;\n/**\n * When the innerRadius value is greater than 0 percentage, a donut will appear in pie series. It takes values only in percentage.\n * \\@default '0'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.innerRadius;\n/**\n * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.\n * \\@default ''\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.legendImageUrl;\n/**\n * The shape of the legend. Each series has its own legend shape. They are \n * * Circle - Renders a circle. \n * * Rectangle - Renders a rectangle. \n * * Triangle - Renders a triangle. \n * * Diamond - Renders a diamond. \n * * Cross - Renders a cross. \n * * HorizontalLine - Renders a horizontalLine. \n * * VerticalLine - Renders a verticalLine. \n * * Pentagon - Renders a pentagon. \n * * InvertedTriangle - Renders a invertedTriangle. \n * * SeriesType -Render a legend shape based on series type. \n * * Image -Render a image.     *\n * \\@default 'SeriesType'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.legendShape;\n/**\n * Specifies the series name\n * \\@default ''\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.name;\n/**\n * Defines the height of the funnel neck with respect to the chart area\n * \\@default '20%'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.neckHeight;\n/**\n * Defines the width of the funnel neck with respect to the chart area\n * \\@default '20%'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.neckWidth;\n/**\n * The opacity of the series.\n * \\@default 1.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.opacity;\n/**\n * Palette for series points.\n * \\@default []\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.palettes;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.pointColorMapping;\n/**\n * Defines how the values have to be reflected, whether through height/surface of the segments\n * \\@default 'Linear'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.pyramidMode;\n/**\n * Specifies Query to select data from dataSource. This property is applicable only when the dataSource is `ej.DataManager`.\n * \\@default null\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.query;\n/**\n * Radius of the pie series and its values in percentage.\n * \\@default '80%'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.radius;\n/**\n * Custom style for the selected series or points.\n * \\@default null\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.selectionStyle;\n/**\n * Start angle for a series.\n * \\@default 0\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.startAngle;\n/**\n * The provided value will be considered as a Tooltip Mapping name\n * \\@default ''\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.tooltipMappingName;\n/**\n * Specifies the series visibility.\n * \\@default true\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.visible;\n/**\n * Defines the width of the funnel/pyramid with respect to the chart area\n * \\@default '80%'\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.width;\n/**\n * The DataSource field which contains the x value.\n * \\@default ''\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.xName;\n/**\n * The DataSource field which contains the y value.\n * \\@default ''\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.yName;\n/** @type {?} */\nAccumulationSeriesDirective.prototype.dataLabel_template;\n/** @type {?} */\nAccumulationSeriesDirective.prototype.viewContainerRef;\n}\n\n/**\n * AccumulationSeries Array Directive\n */\nexport class AccumulationSeriesCollectionDirective extends ArrayBase<AccumulationSeriesCollectionDirective> {\nconstructor() {\n        super('series');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-accumulationchart>e-accumulation-series-collection',\n    queries: {\n        children: new ContentChildren(AccumulationSeriesDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AccumulationSeriesCollectionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationSeriesCollectionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationSeriesCollectionDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['content', 'coordinateUnits', 'description', 'horizontalAlignment', 'region', 'verticalAlignment', 'x', 'y'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * AccumulationAnnotations Directive\n * ```html\n * <e-accumulation-annotations>\n * <e-accumulation-annotation></e-accumulation-annotation>\n * </e-accumulation-annotations>\n * ```\n */\nexport class AccumulationAnnotationDirective extends ComplexBase<AccumulationAnnotationDirective> {\npublic directivePropList: any;\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n * \\@default 'Pixel'\n */\npublic coordinateUnits: any;\n/**\n * Information about annotation for assistive technology.\n * \\@default null\n */\npublic description: any;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as top side. \n * * Far - Align the annotation element as bottom side. \n * * Center - Align the annotation element as mid point.\n * \\@default 'Center'\n * @deprecated\n */\npublic horizontalAlignment: any;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n * \\@default 'Chart'\n */\npublic region: any;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n * \\@default 'Middle'\n * @deprecated\n */\npublic verticalAlignment: any;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n */\npublic x: any;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n */\npublic y: any;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n * \\@default null\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-accumulation-annotations>e-accumulation-annotation',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction AccumulationAnnotationDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationAnnotationDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationAnnotationDirective.ctorParameters;\n/** @type {?} */\nAccumulationAnnotationDirective.propDecorators;\n/** @type {?} */\nAccumulationAnnotationDirective.prototype.directivePropList;\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n * \\@default 'Pixel'\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.coordinateUnits;\n/**\n * Information about annotation for assistive technology.\n * \\@default null\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.description;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as top side. \n * * Far - Align the annotation element as bottom side. \n * * Center - Align the annotation element as mid point.\n * \\@default 'Center'\n * @deprecated\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.horizontalAlignment;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n * \\@default 'Chart'\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.region;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n * \\@default 'Middle'\n * @deprecated\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.verticalAlignment;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.x;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.y;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n * \\@default null\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.content;\n/** @type {?} */\nAccumulationAnnotationDirective.prototype.viewContainerRef;\n}\n\n/**\n * AccumulationAnnotation Array Directive\n */\nexport class AccumulationAnnotationsDirective extends ArrayBase<AccumulationAnnotationsDirective> {\nconstructor() {\n        super('annotations');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-accumulationchart>e-accumulation-annotations',\n    queries: {\n        children: new ContentChildren(AccumulationAnnotationDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AccumulationAnnotationsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationAnnotationsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationAnnotationsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { AccumulationChart } from '@syncfusion/ej2-charts';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { AccumulationSeriesCollectionDirective } from './series.directive';\nimport { AccumulationAnnotationsDirective } from './annotations.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['allowExport','annotations','background','backgroundImage','border','center','currencyCode','dataSource','enableAnimation','enableBorderOnMouseMove','enableExport','enablePersistence','enableRtl','enableSmartLabels','height','highLightMode','highlightPattern','isMultiSelect','legendSettings','locale','margin','selectedDataIndexes','selectionMode','selectionPattern','series','subTitle','subTitleStyle','theme','title','titleStyle','tooltip','useGroupingSeparator','width'];\nexport const /** @type {?} */ outputs: string[] = ['afterExport','animationComplete','annotationRender','beforePrint','beforeResize','chartMouseClick','chartMouseDown','chartMouseLeave','chartMouseMove','chartMouseUp','legendRender','load','loaded','pointClick','pointMove','pointRender','resized','seriesRender','textRender','tooltipRender','dataSourceChange'];\nexport const /** @type {?} */ twoWays: string[] = ['dataSource'];\n/**\n * AccumulationChart Component\n * ```html\n * <ejs-accumulationchart></ejs-accumulationchart>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class AccumulationChartComponent extends AccumulationChart implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childSeries: QueryList<AccumulationSeriesCollectionDirective>;\npublic childAnnotations: QueryList<AccumulationAnnotationsDirective>;\npublic tags: string[] = ['series', 'annotations'];\npublic dataSourceChange: any;\n    \n    @Template()\npublic tooltip_template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsPieSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsFunnelSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsPyramidSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationLegend');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationSelection');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationDataLabel');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationAnnotation');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childSeries;\n        if (this.childAnnotations) {\n                    this.tagObjects[1].instance = /** @type {?} */(( this.childAnnotations as any));\n                }\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-accumulationchart',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childSeries: new ContentChild(AccumulationSeriesCollectionDirective), \n        childAnnotations: new ContentChild(AccumulationAnnotationsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate', ] },],\n};\n}\n\nfunction AccumulationChartComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationChartComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationChartComponent.ctorParameters;\n/** @type {?} */\nAccumulationChartComponent.propDecorators;\n/** @type {?} */\nAccumulationChartComponent.prototype.context;\n/** @type {?} */\nAccumulationChartComponent.prototype.tagObjects;\n/** @type {?} */\nAccumulationChartComponent.prototype.childSeries;\n/** @type {?} */\nAccumulationChartComponent.prototype.childAnnotations;\n/** @type {?} */\nAccumulationChartComponent.prototype.tags;\n/** @type {?} */\nAccumulationChartComponent.prototype.dataSourceChange;\n/** @type {?} */\nAccumulationChartComponent.prototype.tooltip_template;\n/** @type {?} */\nAccumulationChartComponent.prototype.registerEvents;\n/** @type {?} */\nAccumulationChartComponent.prototype.addTwoWay;\n/** @type {?} */\nAccumulationChartComponent.prototype.ngEle;\n/** @type {?} */\nAccumulationChartComponent.prototype.srenderer;\n/** @type {?} */\nAccumulationChartComponent.prototype.viewContainerRef;\n/** @type {?} */\nAccumulationChartComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AccumulationSeriesDirective, AccumulationSeriesCollectionDirective } from './series.directive';\nimport { AccumulationAnnotationDirective, AccumulationAnnotationsDirective } from './annotations.directive';\nimport { AccumulationChartComponent } from './accumulationchart.component';\n/**\n * NgModule definition for the AccumulationChart component.\n */\nexport class AccumulationChartModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        AccumulationChartComponent,\n        AccumulationSeriesDirective,\n        AccumulationSeriesCollectionDirective,\n        AccumulationAnnotationDirective,\n        AccumulationAnnotationsDirective\n    ],\n    exports: [\n        AccumulationChartComponent,\n        AccumulationSeriesDirective,\n        AccumulationSeriesCollectionDirective,\n        AccumulationAnnotationDirective,\n        AccumulationAnnotationsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AccumulationChartModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationChartModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationChartModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AccumulationSeriesDirective, AccumulationSeriesCollectionDirective } from './series.directive';\nimport { AccumulationAnnotationDirective, AccumulationAnnotationsDirective } from './annotations.directive';\nimport { AccumulationChartComponent } from './accumulationchart.component';\nimport { AccumulationChartModule } from './accumulationchart.module';\nimport {PieSeries, FunnelSeries, PyramidSeries, AccumulationTooltip, AccumulationLegend, AccumulationSelection, AccumulationDataLabel, AccumulationAnnotation} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ PieSeriesService: ValueProvider = { provide: 'ChartsPieSeries', useValue: PieSeries};\nexport const /** @type {?} */ FunnelSeriesService: ValueProvider = { provide: 'ChartsFunnelSeries', useValue: FunnelSeries};\nexport const /** @type {?} */ PyramidSeriesService: ValueProvider = { provide: 'ChartsPyramidSeries', useValue: PyramidSeries};\nexport const /** @type {?} */ AccumulationTooltipService: ValueProvider = { provide: 'ChartsAccumulationTooltip', useValue: AccumulationTooltip};\nexport const /** @type {?} */ AccumulationLegendService: ValueProvider = { provide: 'ChartsAccumulationLegend', useValue: AccumulationLegend};\nexport const /** @type {?} */ AccumulationSelectionService: ValueProvider = { provide: 'ChartsAccumulationSelection', useValue: AccumulationSelection};\nexport const /** @type {?} */ AccumulationDataLabelService: ValueProvider = { provide: 'ChartsAccumulationDataLabel', useValue: AccumulationDataLabel};\nexport const /** @type {?} */ AccumulationAnnotationService: ValueProvider = { provide: 'ChartsAccumulationAnnotation', useValue: AccumulationAnnotation};\n/**\n * NgModule definition for the AccumulationChart component with providers.\n */\nexport class AccumulationChartAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, AccumulationChartModule],\n    exports: [\n        AccumulationChartModule\n    ],\n    providers:[\n        PieSeriesService,\n        FunnelSeriesService,\n        PyramidSeriesService,\n        AccumulationTooltipService,\n        AccumulationLegendService,\n        AccumulationSelectionService,\n        AccumulationDataLabelService,\n        AccumulationAnnotationService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AccumulationChartAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationChartAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationChartAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'border', 'dashArray', 'dataSource', 'fill', 'opacity', 'query', 'type', 'width', 'xName', 'yName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * RangenavigatorSeries Directive\n * ```html\n * <e-rangenavigator-series-collection>\n * <e-rangenavigator-series></e-rangenavigator-series>\n * </e-rangenavigator-series-collection>\n * ```\n */\nexport class RangenavigatorSeriesDirective extends ComplexBase<RangenavigatorSeriesDirective> {\npublic directivePropList: any;\n/**\n * It defines the series type of the range navigator\n * \\@default 'Line'\n */\npublic type: any;\n/**\n * Options to customizing animation for the series.\n */\npublic animation: any;\n/**\n * Options for customizing the color and width of the series border.\n */\npublic border: any;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n */\npublic dashArray: any;\n/**\n * It defines the data source for a series.\n * \\@default null\n */\npublic dataSource: any;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n */\npublic fill: any;\n/**\n * The opacity for the background.\n * \\@default 1\n */\npublic opacity: any;\n/**\n * It defines the query for the data source\n * \\@default null\n */\npublic query: any;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n */\npublic width: any;\n/**\n * It defines the xName for the series\n * \\@default null\n */\npublic xName: any;\n/**\n * It defines the yName for the series\n * \\@default null\n */\npublic yName: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-rangenavigator-series-collection>e-rangenavigator-series',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RangenavigatorSeriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangenavigatorSeriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangenavigatorSeriesDirective.ctorParameters;\n/** @type {?} */\nRangenavigatorSeriesDirective.prototype.directivePropList;\n/**\n * It defines the series type of the range navigator\n * \\@default 'Line'\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.type;\n/**\n * Options to customizing animation for the series.\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.animation;\n/**\n * Options for customizing the color and width of the series border.\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.border;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.dashArray;\n/**\n * It defines the data source for a series.\n * \\@default null\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.dataSource;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.fill;\n/**\n * The opacity for the background.\n * \\@default 1\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.opacity;\n/**\n * It defines the query for the data source\n * \\@default null\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.query;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.width;\n/**\n * It defines the xName for the series\n * \\@default null\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.xName;\n/**\n * It defines the yName for the series\n * \\@default null\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.yName;\n/** @type {?} */\nRangenavigatorSeriesDirective.prototype.viewContainerRef;\n}\n\n/**\n * RangenavigatorSeries Array Directive\n */\nexport class RangenavigatorSeriesCollectionDirective extends ArrayBase<RangenavigatorSeriesCollectionDirective> {\nconstructor() {\n        super('series');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-rangenavigator>e-rangenavigator-series-collection',\n    queries: {\n        children: new ContentChildren(RangenavigatorSeriesDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RangenavigatorSeriesCollectionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangenavigatorSeriesCollectionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangenavigatorSeriesCollectionDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { RangeNavigator } from '@syncfusion/ej2-charts';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { RangenavigatorSeriesCollectionDirective } from './series.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['allowIntervalData','allowSnapping','animationDuration','background','dataSource','disableRangeSelector','enableDeferredUpdate','enableGrouping','enablePersistence','enableRtl','groupBy','height','interval','intervalType','labelFormat','labelIntersectAction','labelPosition','labelStyle','locale','logBase','majorGridLines','majorTickLines','margin','maximum','minimum','navigatorBorder','navigatorStyleSettings','periodSelectorSettings','query','secondaryLabelAlignment','series','skeleton','skeletonType','theme','tickPosition','tooltip','useGroupingSeparator','value','valueType','width','xName','yName'];\nexport const /** @type {?} */ outputs: string[] = ['beforePrint','changed','labelRender','load','loaded','resized','selectorRender','tooltipRender','dataSourceChange'];\nexport const /** @type {?} */ twoWays: string[] = ['dataSource'];\n/**\n * RangeNavigator Component\n * ```html\n * <ejs-rangenavigator></ejs-rangenavigator>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class RangeNavigatorComponent extends RangeNavigator implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childSeries: QueryList<RangenavigatorSeriesCollectionDirective>;\npublic tags: string[] = ['series'];\npublic dataSourceChange: any;\n    \n    @Template()\npublic tooltip_template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsRangeTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsPeriodSelector');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStepLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDateTime');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsLogarithmic');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childSeries;\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-rangenavigator',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childSeries: new ContentChild(RangenavigatorSeriesCollectionDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate', ] },],\n};\n}\n\nfunction RangeNavigatorComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeNavigatorComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeNavigatorComponent.ctorParameters;\n/** @type {?} */\nRangeNavigatorComponent.propDecorators;\n/** @type {?} */\nRangeNavigatorComponent.prototype.context;\n/** @type {?} */\nRangeNavigatorComponent.prototype.tagObjects;\n/** @type {?} */\nRangeNavigatorComponent.prototype.childSeries;\n/** @type {?} */\nRangeNavigatorComponent.prototype.tags;\n/** @type {?} */\nRangeNavigatorComponent.prototype.dataSourceChange;\n/** @type {?} */\nRangeNavigatorComponent.prototype.tooltip_template;\n/** @type {?} */\nRangeNavigatorComponent.prototype.registerEvents;\n/** @type {?} */\nRangeNavigatorComponent.prototype.addTwoWay;\n/** @type {?} */\nRangeNavigatorComponent.prototype.ngEle;\n/** @type {?} */\nRangeNavigatorComponent.prototype.srenderer;\n/** @type {?} */\nRangeNavigatorComponent.prototype.viewContainerRef;\n/** @type {?} */\nRangeNavigatorComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RangenavigatorSeriesDirective, RangenavigatorSeriesCollectionDirective } from './series.directive';\nimport { RangeNavigatorComponent } from './rangenavigator.component';\n/**\n * NgModule definition for the RangeNavigator component.\n */\nexport class RangeNavigatorModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        RangeNavigatorComponent,\n        RangenavigatorSeriesDirective,\n        RangenavigatorSeriesCollectionDirective\n    ],\n    exports: [\n        RangeNavigatorComponent,\n        RangenavigatorSeriesDirective,\n        RangenavigatorSeriesCollectionDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RangeNavigatorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeNavigatorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeNavigatorModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RangenavigatorSeriesDirective, RangenavigatorSeriesCollectionDirective } from './series.directive';\nimport { RangeNavigatorComponent } from './rangenavigator.component';\nimport { RangeNavigatorModule } from './rangenavigator.module';\nimport {RangeTooltip, PeriodSelector} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ RangeTooltipService: ValueProvider = { provide: 'ChartsRangeTooltip', useValue: RangeTooltip};\nexport const /** @type {?} */ PeriodSelectorService: ValueProvider = { provide: 'ChartsPeriodSelector', useValue: PeriodSelector};\n/**\n * NgModule definition for the RangeNavigator component with providers.\n */\nexport class RangeNavigatorAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, RangeNavigatorModule],\n    exports: [\n        RangeNavigatorModule\n    ],\n    providers:[\n        RangeTooltipService,\n        PeriodSelectorService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RangeNavigatorAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeNavigatorAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeNavigatorAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['color', 'endRange', 'opacity', 'startRange'];\nlet /** @type {?} */ outputs: string[] = [];\nexport class RangeBandSettingDirective extends ComplexBase<RangeBandSettingDirective> {\npublic directivePropList: any;\n/**\n * To configure sparkline rangeband color\n */\npublic color: any;\n/**\n * To configure sparkline end range\n * \\@aspdefaultvalueignore\n */\npublic endRange: any;\n/**\n * To configure sparkline rangeband opacity\n * \\@default 1\n */\npublic opacity: any;\n/**\n * To configure sparkline start range\n * \\@aspdefaultvalueignore\n */\npublic startRange: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-rangeBandSettings>e-rangeBandSetting',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RangeBandSettingDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeBandSettingDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeBandSettingDirective.ctorParameters;\n/** @type {?} */\nRangeBandSettingDirective.prototype.directivePropList;\n/**\n * To configure sparkline rangeband color\n * @type {?}\n */\nRangeBandSettingDirective.prototype.color;\n/**\n * To configure sparkline end range\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nRangeBandSettingDirective.prototype.endRange;\n/**\n * To configure sparkline rangeband opacity\n * \\@default 1\n * @type {?}\n */\nRangeBandSettingDirective.prototype.opacity;\n/**\n * To configure sparkline start range\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nRangeBandSettingDirective.prototype.startRange;\n/** @type {?} */\nRangeBandSettingDirective.prototype.viewContainerRef;\n}\n\n/**\n * RangeBandSetting Array Directive\n */\nexport class RangeBandSettingsDirective extends ArrayBase<RangeBandSettingsDirective> {\nconstructor() {\n        super('rangebandsettings');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-sparkline>e-rangeBandSettings',\n    queries: {\n        children: new ContentChildren(RangeBandSettingDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RangeBandSettingsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeBandSettingsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeBandSettingsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Sparkline } from '@syncfusion/ej2-charts';\n\nimport { RangeBandSettingsDirective } from './rangebandsettings.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['axisSettings','border','containerArea','dataLabelSettings','dataSource','enablePersistence','enableRtl','endPointColor','fill','format','height','highPointColor','lineWidth','locale','lowPointColor','markerSettings','negativePointColor','opacity','padding','palette','query','rangeBandSettings','rangePadding','startPointColor','theme','tiePointColor','tooltipSettings','type','useGroupingSeparator','valueType','width','xName','yName'];\nexport const /** @type {?} */ outputs: string[] = ['axisRendering','dataLabelRendering','load','loaded','markerRendering','pointRegionMouseClick','pointRegionMouseMove','pointRendering','resize','seriesRendering','sparklineMouseClick','sparklineMouseMove','tooltipInitialize'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Sparkline Component\n * ```html\n * <ejs-sparkline></ejs-sparkline>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class SparklineComponent extends Sparkline implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childRangeBandSettings: QueryList<RangeBandSettingsDirective>;\npublic tags: string[] = ['rangeBandSettings'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsSparklineTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childRangeBandSettings;\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-sparkline',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childRangeBandSettings: new ContentChild(RangeBandSettingsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction SparklineComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSparklineComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSparklineComponent.ctorParameters;\n/** @type {?} */\nSparklineComponent.prototype.context;\n/** @type {?} */\nSparklineComponent.prototype.tagObjects;\n/** @type {?} */\nSparklineComponent.prototype.childRangeBandSettings;\n/** @type {?} */\nSparklineComponent.prototype.tags;\n/** @type {?} */\nSparklineComponent.prototype.registerEvents;\n/** @type {?} */\nSparklineComponent.prototype.addTwoWay;\n/** @type {?} */\nSparklineComponent.prototype.ngEle;\n/** @type {?} */\nSparklineComponent.prototype.srenderer;\n/** @type {?} */\nSparklineComponent.prototype.viewContainerRef;\n/** @type {?} */\nSparklineComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RangeBandSettingDirective, RangeBandSettingsDirective } from './rangebandsettings.directive';\nimport { SparklineComponent } from './sparkline.component';\n/**\n * NgModule definition for the Sparkline component.\n */\nexport class SparklineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        SparklineComponent,\n        RangeBandSettingDirective,\n        RangeBandSettingsDirective\n    ],\n    exports: [\n        SparklineComponent,\n        RangeBandSettingDirective,\n        RangeBandSettingsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SparklineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSparklineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSparklineModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RangeBandSettingDirective, RangeBandSettingsDirective } from './rangebandsettings.directive';\nimport { SparklineComponent } from './sparkline.component';\nimport { SparklineModule } from './sparkline.module';\nimport {SparklineTooltip} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ SparklineTooltipService: ValueProvider = { provide: 'ChartsSparklineTooltip', useValue: SparklineTooltip};\n/**\n * NgModule definition for the Sparkline component with providers.\n */\nexport class SparklineAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, SparklineModule],\n    exports: [\n        SparklineModule\n    ],\n    providers:[\n        SparklineTooltipService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SparklineAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSparklineAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSparklineAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animationDuration', 'dataSource', 'enableAnimation', 'enableSmartLabels', 'fill', 'marker', 'name', 'opacity', 'points', 'reactance', 'resistance', 'tooltip', 'tooltipMappingName', 'visibility', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\nexport class SmithchartSeriesDirective extends ComplexBase<SmithchartSeriesDirective> {\npublic directivePropList: any;\n/**\n * perform animation of series based on animation duration.\n * \\@default '2000ms'\n */\npublic animationDuration: any;\n/**\n * Specifies the dataSource\n * \\@default null\n * \\@isdatamanager false\n */\npublic dataSource: any;\n/**\n * enable or disable the animation of series.\n * \\@default false\n */\npublic enableAnimation: any;\n/**\n * avoid the overlap of dataLabels.\n * \\@default false\n */\npublic enableSmartLabels: any;\n/**\n * color for series.\n * \\@default null\n */\npublic fill: any;\n/**\n * options for customizing marker\n */\npublic marker: any;\n/**\n * The name of the series visible in legend.\n * \\@default ''\n */\npublic name: any;\n/**\n * opacity for series.\n * \\@default 1\n */\npublic opacity: any;\n/**\n * points for series.\n * \\@default []\n */\npublic points: any;\n/**\n * reactance name for dataSource\n * \\@default ''\n */\npublic reactance: any;\n/**\n * resistance name for dataSource\n * \\@default ''\n */\npublic resistance: any;\n/**\n * options for customizing tooltip\n */\npublic tooltip: any;\n/**\n * tooltip mapping name for the series\n * \\@default ''\n */\npublic tooltipMappingName: any;\n/**\n * visibility for series.\n * \\@default 'visible'\n */\npublic visibility: any;\n/**\n * width for series.\n * \\@default 1\n */\npublic width: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-seriesCollection>e-series',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction SmithchartSeriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSmithchartSeriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSmithchartSeriesDirective.ctorParameters;\n/** @type {?} */\nSmithchartSeriesDirective.prototype.directivePropList;\n/**\n * perform animation of series based on animation duration.\n * \\@default '2000ms'\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.animationDuration;\n/**\n * Specifies the dataSource\n * \\@default null\n * \\@isdatamanager false\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.dataSource;\n/**\n * enable or disable the animation of series.\n * \\@default false\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.enableAnimation;\n/**\n * avoid the overlap of dataLabels.\n * \\@default false\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.enableSmartLabels;\n/**\n * color for series.\n * \\@default null\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.fill;\n/**\n * options for customizing marker\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.marker;\n/**\n * The name of the series visible in legend.\n * \\@default ''\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.name;\n/**\n * opacity for series.\n * \\@default 1\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.opacity;\n/**\n * points for series.\n * \\@default []\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.points;\n/**\n * reactance name for dataSource\n * \\@default ''\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.reactance;\n/**\n * resistance name for dataSource\n * \\@default ''\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.resistance;\n/**\n * options for customizing tooltip\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.tooltip;\n/**\n * tooltip mapping name for the series\n * \\@default ''\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.tooltipMappingName;\n/**\n * visibility for series.\n * \\@default 'visible'\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.visibility;\n/**\n * width for series.\n * \\@default 1\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.width;\n/** @type {?} */\nSmithchartSeriesDirective.prototype.viewContainerRef;\n}\n\n/**\n * SmithchartSeries Array Directive\n */\nexport class SmithchartSeriesCollectionDirective extends ArrayBase<SmithchartSeriesCollectionDirective> {\nconstructor() {\n        super('series');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-smithchart>e-seriesCollection',\n    queries: {\n        children: new ContentChildren(SmithchartSeriesDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SmithchartSeriesCollectionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSmithchartSeriesCollectionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSmithchartSeriesCollectionDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Smithchart } from '@syncfusion/ej2-charts';\n\nimport { SmithchartSeriesCollectionDirective } from './series.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['background','border','elementSpacing','enablePersistence','enableRtl','font','height','horizontalAxis','legendSettings','locale','margin','radialAxis','radius','renderType','series','theme','title','width'];\nexport const /** @type {?} */ outputs: string[] = ['animationComplete','axisLabelRender','beforePrint','legendRender','load','loaded','seriesRender','subtitleRender','textRender','titleRender','tooltipRender'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Smithchart Component\n * ```html\n * <ejs-smithchart></ejs-smithchart>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class SmithchartComponent extends Smithchart implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childSeries: QueryList<SmithchartSeriesCollectionDirective>;\npublic tags: string[] = ['series'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsSmithchartLegend');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTooltipRender');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childSeries;\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-smithchart',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childSeries: new ContentChild(SmithchartSeriesCollectionDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction SmithchartComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSmithchartComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSmithchartComponent.ctorParameters;\n/** @type {?} */\nSmithchartComponent.prototype.context;\n/** @type {?} */\nSmithchartComponent.prototype.tagObjects;\n/** @type {?} */\nSmithchartComponent.prototype.childSeries;\n/** @type {?} */\nSmithchartComponent.prototype.tags;\n/** @type {?} */\nSmithchartComponent.prototype.registerEvents;\n/** @type {?} */\nSmithchartComponent.prototype.addTwoWay;\n/** @type {?} */\nSmithchartComponent.prototype.ngEle;\n/** @type {?} */\nSmithchartComponent.prototype.srenderer;\n/** @type {?} */\nSmithchartComponent.prototype.viewContainerRef;\n/** @type {?} */\nSmithchartComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SmithchartSeriesDirective, SmithchartSeriesCollectionDirective } from './series.directive';\nimport { SmithchartComponent } from './smithchart.component';\n/**\n * NgModule definition for the Smithchart component.\n */\nexport class SmithchartModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        SmithchartComponent,\n        SmithchartSeriesDirective,\n        SmithchartSeriesCollectionDirective\n    ],\n    exports: [\n        SmithchartComponent,\n        SmithchartSeriesDirective,\n        SmithchartSeriesCollectionDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SmithchartModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSmithchartModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSmithchartModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SmithchartSeriesDirective, SmithchartSeriesCollectionDirective } from './series.directive';\nimport { SmithchartComponent } from './smithchart.component';\nimport { SmithchartModule } from './smithchart.module';\nimport {SmithchartLegend, TooltipRender} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ SmithchartLegendService: ValueProvider = { provide: 'ChartsSmithchartLegend', useValue: SmithchartLegend};\nexport const /** @type {?} */ TooltipRenderService: ValueProvider = { provide: 'ChartsTooltipRender', useValue: TooltipRender};\n/**\n * NgModule definition for the Smithchart component with providers.\n */\nexport class SmithchartAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, SmithchartModule],\n    exports: [\n        SmithchartModule\n    ],\n    providers:[\n        SmithchartLegendService,\n        TooltipRenderService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SmithchartAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSmithchartAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSmithchartAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'backwardForecast', 'dashArray', 'enableTooltip', 'fill', 'forwardForecast', 'intercept', 'legendShape', 'marker', 'name', 'period', 'polynomialOrder', 'type', 'visible', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Series Directive\n * ```html\n * <e-stockchart-series-collection>\n * <e-stockchart-series>\n * <e-trendlines>\n * </e-trendline>\n * <e-trendline>\n * </e-trendlines>\n * </e-stockchart-series>\n * </e-stockchart-series-collection>\n * ```\n */\nexport class StockChartTrendlineDirective extends ComplexBase<StockChartTrendlineDirective> {\npublic directivePropList: any;\n/**\n * Defines the type of the trendline\n * \\@default 'Linear'\n */\npublic type: any;\n/**\n * Options to customize the animation for trendlines\n */\npublic animation: any;\n/**\n * Defines the period, by which the trend has to backward forecast\n * \\@default 0\n */\npublic backwardForecast: any;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n * \\@default '0'\n */\npublic dashArray: any;\n/**\n * Enables/disables tooltip for trendlines\n * \\@default true\n */\npublic enableTooltip: any;\n/**\n * Defines the fill color of trendline\n * \\@default ''\n */\npublic fill: any;\n/**\n * Defines the period, by which the trend has to forward forecast\n * \\@default 0\n */\npublic forwardForecast: any;\n/**\n * Defines the intercept of the trendline\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic intercept: any;\n/**\n * Sets the legend shape of the trendline\n * \\@default 'SeriesType'\n */\npublic legendShape: any;\n/**\n * Options to customize the marker for trendlines\n * @deprecated\n */\npublic marker: any;\n/**\n * Defines the name of trendline\n * \\@default ''\n */\npublic name: any;\n/**\n * Defines the period, the price changes over which will be considered to predict moving average trend line\n * \\@default 2\n */\npublic period: any;\n/**\n * Defines the polynomial order of the polynomial trendline\n * \\@default 2\n */\npublic polynomialOrder: any;\n/**\n * Specifies the visibility of trendline.\n * \\@default true\n */\npublic visible: any;\n/**\n * Defines the width of the trendline\n * \\@default 1\n */\npublic width: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-series>e-trendlines>e-trendline',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartTrendlineDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartTrendlineDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartTrendlineDirective.ctorParameters;\n/** @type {?} */\nStockChartTrendlineDirective.prototype.directivePropList;\n/**\n * Defines the type of the trendline\n * \\@default 'Linear'\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.type;\n/**\n * Options to customize the animation for trendlines\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.animation;\n/**\n * Defines the period, by which the trend has to backward forecast\n * \\@default 0\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.backwardForecast;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n * \\@default '0'\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.dashArray;\n/**\n * Enables/disables tooltip for trendlines\n * \\@default true\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.enableTooltip;\n/**\n * Defines the fill color of trendline\n * \\@default ''\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.fill;\n/**\n * Defines the period, by which the trend has to forward forecast\n * \\@default 0\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.forwardForecast;\n/**\n * Defines the intercept of the trendline\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.intercept;\n/**\n * Sets the legend shape of the trendline\n * \\@default 'SeriesType'\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.legendShape;\n/**\n * Options to customize the marker for trendlines\n * @deprecated\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.marker;\n/**\n * Defines the name of trendline\n * \\@default ''\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.name;\n/**\n * Defines the period, the price changes over which will be considered to predict moving average trend line\n * \\@default 2\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.period;\n/**\n * Defines the polynomial order of the polynomial trendline\n * \\@default 2\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.polynomialOrder;\n/**\n * Specifies the visibility of trendline.\n * \\@default true\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.visible;\n/**\n * Defines the width of the trendline\n * \\@default 1\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.width;\n/** @type {?} */\nStockChartTrendlineDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartTrendline Array Directive\n */\nexport class StockChartTrendlinesDirective extends ArrayBase<StockChartTrendlinesDirective> {\nconstructor() {\n        super('trendlines');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-series>e-trendlines',\n    queries: {\n        children: new ContentChildren(StockChartTrendlineDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartTrendlinesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartTrendlinesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartTrendlinesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\nimport { StockChartTrendlinesDirective } from './trendlines.directive';\n\nlet /** @type {?} */ input: string[] = ['animation', 'bearFillColor', 'border', 'bullFillColor', 'cardinalSplineTension', 'close', 'columnSpacing', 'columnWidth', 'cornerRadius', 'dashArray', 'dataSource', 'emptyPointSettings', 'enableSolidCandles', 'enableTooltip', 'fill', 'high', 'legendImageUrl', 'legendShape', 'low', 'marker', 'name', 'opacity', 'open', 'pointColorMapping', 'query', 'selectionStyle', 'tooltipMappingName', 'trendlines', 'type', 'visible', 'volume', 'width', 'xAxisName', 'xName', 'yAxisName', 'yName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Series Directive\n * ```html\n * <e-stockchart-series-collection>\n * <e-stockchart-series></e-stockchart-series>\n * </e-stockchart-series-collection>\n * ```\n */\nexport class StockChartSeriesDirective extends ComplexBase<StockChartSeriesDirective> {\npublic directivePropList: any;\npublic childTrendlines: any;\npublic tags: string[] = ['trendlines'];\n/**\n * The type of the series are \n * * Line \n * * Column \n * * Area \n * * Spline \n * * Hilo \n * * HiloOpenClose \n * * Candle\n * \\@default 'Candle'\n */\npublic type: any;\n/**\n * Options to customizing animation for the series.\n */\npublic animation: any;\n/**\n * This property is used in stock charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is less than the closing price.\n * \\@default '#2ecd71'\n */\npublic bearFillColor: any;\n/**\n * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.\n */\npublic border: any;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is higher than the closing price.\n * \\@default '#e74c3d'\n */\npublic bullFillColor: any;\n/**\n * It defines tension of cardinal spline types\n * \\@default 0.5\n */\npublic cardinalSplineTension: any;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic close: any;\n/**\n * To render the column series points with particular column spacing. It takes value from 0 - 1.\n * \\@default 0\n */\npublic columnSpacing: any;\n/**\n * To render the column series points with particular column width. If the series type is histogram the \n * default value is 1 otherwise 0.7.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic columnWidth: any;\n/**\n * To render the column series points with particular rounded corner.\n */\npublic cornerRadius: any;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n */\npublic dashArray: any;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager.\n * \\@default ''\n */\npublic dataSource: any;\n/**\n * options to customize the empty points in series\n */\npublic emptyPointSettings: any;\n/**\n * This property is applicable for candle series. \n * It enables/disables to visually compare the current values with the previous values in stock.\n * \\@default false\n */\npublic enableSolidCandles: any;\n/**\n * If set true, the Tooltip for series will be visible.\n * \\@default true\n */\npublic enableTooltip: any;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n */\npublic fill: any;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic high: any;\n/**\n * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.\n * \\@default ''\n */\npublic legendImageUrl: any;\n/**\n * The shape of the legend. Each series has its own legend shape. They are \n * * Circle - Renders a circle. \n * * Rectangle - Renders a rectangle. \n * * Triangle - Renders a triangle. \n * * Diamond - Renders a diamond. \n * * Cross - Renders a cross. \n * * HorizontalLine - Renders a horizontalLine. \n * * VerticalLine - Renders a verticalLine. \n * * Pentagon - Renders a pentagon. \n * * InvertedTriangle - Renders a invertedTriangle. \n * * SeriesType -Render a legend shape based on series type. \n * * Image -Render a image.     *\n * \\@default 'SeriesType'\n */\npublic legendShape: any;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic low: any;\n/**\n * Options for displaying and customizing markers for individual points in a series.\n */\npublic marker: any;\n/**\n * The name of the series visible in legend.\n * \\@default ''\n */\npublic name: any;\n/**\n * The opacity of the series.\n * \\@default 1\n */\npublic opacity: any;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic open: any;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n */\npublic pointColorMapping: any;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * \\@default null\n */\npublic query: any;\n/**\n * Custom style for the selected series or points.\n * \\@default null\n */\npublic selectionStyle: any;\n/**\n * The provided value will be considered as a Tooltip name\n * \\@default ''\n */\npublic tooltipMappingName: any;\n/**\n * Defines the collection of trendlines that are used to predict the trend\n */\npublic trendlines: any;\n/**\n * Specifies the visibility of series.\n * \\@default true\n */\npublic visible: any;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * \\@default ''\n */\npublic volume: any;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n */\npublic width: any;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators\n * \\@default null\n */\npublic xAxisName: any;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic xName: any;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators\n * \\@default null\n */\npublic yAxisName: any;\n/**\n * The DataSource field that contains the y value.\n * \\@default ''\n */\npublic yName: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-series-collection>e-stockchart-series',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childTrendlines: new ContentChild(StockChartTrendlinesDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartSeriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartSeriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartSeriesDirective.ctorParameters;\n/** @type {?} */\nStockChartSeriesDirective.prototype.directivePropList;\n/** @type {?} */\nStockChartSeriesDirective.prototype.childTrendlines;\n/** @type {?} */\nStockChartSeriesDirective.prototype.tags;\n/**\n * The type of the series are \n * * Line \n * * Column \n * * Area \n * * Spline \n * * Hilo \n * * HiloOpenClose \n * * Candle\n * \\@default 'Candle'\n * @type {?}\n */\nStockChartSeriesDirective.prototype.type;\n/**\n * Options to customizing animation for the series.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.animation;\n/**\n * This property is used in stock charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is less than the closing price.\n * \\@default '#2ecd71'\n * @type {?}\n */\nStockChartSeriesDirective.prototype.bearFillColor;\n/**\n * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.border;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is higher than the closing price.\n * \\@default '#e74c3d'\n * @type {?}\n */\nStockChartSeriesDirective.prototype.bullFillColor;\n/**\n * It defines tension of cardinal spline types\n * \\@default 0.5\n * @type {?}\n */\nStockChartSeriesDirective.prototype.cardinalSplineTension;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.close;\n/**\n * To render the column series points with particular column spacing. It takes value from 0 - 1.\n * \\@default 0\n * @type {?}\n */\nStockChartSeriesDirective.prototype.columnSpacing;\n/**\n * To render the column series points with particular column width. If the series type is histogram the \n * default value is 1 otherwise 0.7.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStockChartSeriesDirective.prototype.columnWidth;\n/**\n * To render the column series points with particular rounded corner.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.cornerRadius;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n * @type {?}\n */\nStockChartSeriesDirective.prototype.dashArray;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager.\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.dataSource;\n/**\n * options to customize the empty points in series\n * @type {?}\n */\nStockChartSeriesDirective.prototype.emptyPointSettings;\n/**\n * This property is applicable for candle series. \n * It enables/disables to visually compare the current values with the previous values in stock.\n * \\@default false\n * @type {?}\n */\nStockChartSeriesDirective.prototype.enableSolidCandles;\n/**\n * If set true, the Tooltip for series will be visible.\n * \\@default true\n * @type {?}\n */\nStockChartSeriesDirective.prototype.enableTooltip;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n * @type {?}\n */\nStockChartSeriesDirective.prototype.fill;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.high;\n/**\n * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.legendImageUrl;\n/**\n * The shape of the legend. Each series has its own legend shape. They are \n * * Circle - Renders a circle. \n * * Rectangle - Renders a rectangle. \n * * Triangle - Renders a triangle. \n * * Diamond - Renders a diamond. \n * * Cross - Renders a cross. \n * * HorizontalLine - Renders a horizontalLine. \n * * VerticalLine - Renders a verticalLine. \n * * Pentagon - Renders a pentagon. \n * * InvertedTriangle - Renders a invertedTriangle. \n * * SeriesType -Render a legend shape based on series type. \n * * Image -Render a image.     *\n * \\@default 'SeriesType'\n * @type {?}\n */\nStockChartSeriesDirective.prototype.legendShape;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.low;\n/**\n * Options for displaying and customizing markers for individual points in a series.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.marker;\n/**\n * The name of the series visible in legend.\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.name;\n/**\n * The opacity of the series.\n * \\@default 1\n * @type {?}\n */\nStockChartSeriesDirective.prototype.opacity;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.open;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.pointColorMapping;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * \\@default null\n * @type {?}\n */\nStockChartSeriesDirective.prototype.query;\n/**\n * Custom style for the selected series or points.\n * \\@default null\n * @type {?}\n */\nStockChartSeriesDirective.prototype.selectionStyle;\n/**\n * The provided value will be considered as a Tooltip name\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.tooltipMappingName;\n/**\n * Defines the collection of trendlines that are used to predict the trend\n * @type {?}\n */\nStockChartSeriesDirective.prototype.trendlines;\n/**\n * Specifies the visibility of series.\n * \\@default true\n * @type {?}\n */\nStockChartSeriesDirective.prototype.visible;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.volume;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n * @type {?}\n */\nStockChartSeriesDirective.prototype.width;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators\n * \\@default null\n * @type {?}\n */\nStockChartSeriesDirective.prototype.xAxisName;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.xName;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators\n * \\@default null\n * @type {?}\n */\nStockChartSeriesDirective.prototype.yAxisName;\n/**\n * The DataSource field that contains the y value.\n * \\@default ''\n * @type {?}\n */\nStockChartSeriesDirective.prototype.yName;\n/** @type {?} */\nStockChartSeriesDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartSeries Array Directive\n */\nexport class StockChartSeriesCollectionDirective extends ArrayBase<StockChartSeriesCollectionDirective> {\nconstructor() {\n        super('series');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-series-collection',\n    queries: {\n        children: new ContentChildren(StockChartSeriesDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartSeriesCollectionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartSeriesCollectionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartSeriesCollectionDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['coefficient', 'crossesAt', 'crossesInAxis', 'crosshairTooltip', 'description', 'desiredIntervals', 'edgeLabelPlacement', 'enableAutoIntervalOnZooming', 'enableTrim', 'interval', 'intervalType', 'isInversed', 'labelFormat', 'labelIntersectAction', 'labelPlacement', 'labelPosition', 'labelRotation', 'labelStyle', 'lineStyle', 'logBase', 'majorGridLines', 'majorTickLines', 'maximum', 'maximumLabelWidth', 'maximumLabels', 'minimum', 'minorGridLines', 'minorTickLines', 'minorTicksPerInterval', 'name', 'opposedPosition', 'placeNextToAxisLine', 'plotOffset', 'rangePadding', 'rowIndex', 'skeleton', 'skeletonType', 'span', 'startAngle', 'stripLines', 'tabIndex', 'tickPosition', 'title', 'titleStyle', 'valueType', 'visible', 'zoomFactor', 'zoomPosition'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Axis Directive\n * ```html\n * <e-stockchart-axes><e-stockchart-axis></e-stockchart-axis></e-stockchart-axes>\n * ```\n */\nexport class StockChartAxisDirective extends ComplexBase<StockChartAxisDirective> {\npublic directivePropList: any;\n/**\n * The polar radar radius position.\n * \\@default 100\n */\npublic coefficient: any;\n/**\n * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.\n * \\@default null\n */\npublic crossesAt: any;\n/**\n * Specifies axis name with which the axis line has to be crossed\n * \\@default null\n */\npublic crossesInAxis: any;\n/**\n * Options to customize the crosshair ToolTip.\n */\npublic crosshairTooltip: any;\n/**\n * Description for axis and its element.\n * \\@default null\n */\npublic description: any;\n/**\n * With this property, you can request axis to calculate intervals approximately equal to your specified interval.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic desiredIntervals: any;\n/**\n * Specifies the position of labels at the edge of the axis.They are, \n * * None: No action will be performed. \n * * Hide: Edge label will be hidden. \n * * Shift: Shifts the edge labels.\n * \\@default 'None'\n */\npublic edgeLabelPlacement: any;\n/**\n * If set to true, axis interval will be calculated automatically with respect to the zoomed range.\n * \\@default true\n */\npublic enableAutoIntervalOnZooming: any;\n/**\n * Specifies the Trim property for an axis.\n * \\@default false\n */\npublic enableTrim: any;\n/**\n * Specifies the interval for an axis.\n * \\@default null\n * \\@aspdefaultvalueignore\n */\npublic interval: any;\n/**\n * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are, \n * * Auto: Defines the interval of the axis based on data. \n * * Years: Defines the interval of the axis in years. \n * * Months: Defines the interval of the axis in months. \n * * Days: Defines the interval of the axis in days. \n * * Hours: Defines the interval of the axis in hours. \n * * Minutes: Defines the interval of the axis in minutes.\n * \\@default 'Auto'\n */\npublic intervalType: any;\n/**\n * It specifies whether the axis to be rendered in inversed manner or not.\n * \\@default false\n */\npublic isInversed: any;\n/**\n * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc. \n * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.\n * \\@default ''\n */\npublic labelFormat: any;\n/**\n * Specifies the actions like `Hide`, `Rotate45`, and `Rotate90` when the axis labels intersect with each other.They are, \n * * None: Shows all the labels. \n * * Hide: Hides the label when it intersects. \n * * Rotate45: Rotates the label to 45 degree when it intersects. \n * * Rotate90: Rotates the label to 90 degree when it intersects.\n * \\@default Hide\n */\npublic labelIntersectAction: any;\n/**\n * Specifies the placement of a label for category axis. They are, \n * * betweenTicks: Renders the label between the ticks. \n * * onTicks: Renders the label on the ticks.\n * \\@default 'BetweenTicks'\n */\npublic labelPlacement: any;\n/**\n * Specifies the placement of a labels to the axis line. They are, \n * * inside: Renders the labels inside to the axis line. \n * * outside: Renders the labels outside to the axis line.\n * \\@default 'Outside'\n */\npublic labelPosition: any;\n/**\n * The angle to which the axis label gets rotated.\n * \\@default 0\n */\npublic labelRotation: any;\n/**\n * Options to customize the axis label.\n */\npublic labelStyle: any;\n/**\n * Options for customizing axis lines.\n */\npublic lineStyle: any;\n/**\n * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.\n * \\@default 10\n */\npublic logBase: any;\n/**\n * Options for customizing major grid lines.\n */\npublic majorGridLines: any;\n/**\n * Options for customizing major tick lines.\n */\npublic majorTickLines: any;\n/**\n * Specifies the maximum range of an axis.\n * \\@default null\n */\npublic maximum: any;\n/**\n * Specifies the maximum width of an axis label.\n * \\@default 34.\n */\npublic maximumLabelWidth: any;\n/**\n * The maximum number of label count per 100 pixels with respect to the axis length.\n * \\@default 3\n */\npublic maximumLabels: any;\n/**\n * Specifies the minimum range of an axis.\n * \\@default null\n */\npublic minimum: any;\n/**\n * Options for customizing minor grid lines.\n */\npublic minorGridLines: any;\n/**\n * Options for customizing minor tick lines.\n */\npublic minorTickLines: any;\n/**\n * Specifies the number of minor ticks per interval.\n * \\@default 0\n */\npublic minorTicksPerInterval: any;\n/**\n * Unique identifier of an axis. \n * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.\n * \\@default ''\n */\npublic name: any;\n/**\n * If set to true, the axis will render at the opposite side of its default position.\n * \\@default false\n */\npublic opposedPosition: any;\n/**\n * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line\n * \\@default true\n */\npublic placeNextToAxisLine: any;\n/**\n * Left and right padding for the plot area in pixels.\n * \\@default 0\n */\npublic plotOffset: any;\n/**\n * Specifies the padding for the axis range in terms of interval.They are, \n * * none: Padding cannot be applied to the axis. \n * * normal: Padding is applied to the axis based on the range calculation. \n * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range. \n * * round: Axis range is rounded to the nearest possible value divided by the interval.\n * \\@default 'Auto'\n */\npublic rangePadding: any;\n/**\n * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`. \n * \n * \\@default 0\n */\npublic rowIndex: any;\n/**\n * Specifies the skeleton format in which the dateTime format will process.\n * \\@default ''\n */\npublic skeleton: any;\n/**\n * It specifies the type of format to be used in dateTime format process.\n * \\@default 'DateTime'\n */\npublic skeletonType: any;\n/**\n * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.\n * \\@default 1\n */\npublic span: any;\n/**\n * The start angle for the series.\n * \\@default 0\n */\npublic startAngle: any;\n/**\n * Specifies the stripLine collection for the axis\n */\npublic stripLines: any;\n/**\n * TabIndex value for the axis.\n * \\@default 2\n */\npublic tabIndex: any;\n/**\n * Specifies the placement of a ticks to the axis line. They are, \n * * inside: Renders the ticks inside to the axis line. \n * * outside: Renders the ticks outside to the axis line.\n * \\@default 'Outside'\n */\npublic tickPosition: any;\n/**\n * Specifies the title of an axis.\n * \\@default ''\n */\npublic title: any;\n/**\n * Options for customizing the axis title.\n */\npublic titleStyle: any;\n/**\n * Specifies the type of data the axis is handling. \n * * Double:  Renders a numeric axis. \n * * DateTime: Renders a dateTime axis. \n * * Category: Renders a category axis. \n * * Logarithmic: Renders a log axis.\n * \\@default 'Double'\n * \\@blazortype Syncfusion.EJ2.Blazor.Charts.ValueType\n * \\@isenumeration true\n */\npublic valueType: any;\n/**\n * If set to true, axis label will be visible.\n * \\@default true\n */\npublic visible: any;\n/**\n * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.\n * \\@default 1\n */\npublic zoomFactor: any;\n/**\n * Position of the zoomed axis. Value ranges from 0 to 1.\n * \\@default 0\n */\npublic zoomPosition: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-axes>e-stockchart-axis',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartAxisDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartAxisDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartAxisDirective.ctorParameters;\n/** @type {?} */\nStockChartAxisDirective.prototype.directivePropList;\n/**\n * The polar radar radius position.\n * \\@default 100\n * @type {?}\n */\nStockChartAxisDirective.prototype.coefficient;\n/**\n * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.\n * \\@default null\n * @type {?}\n */\nStockChartAxisDirective.prototype.crossesAt;\n/**\n * Specifies axis name with which the axis line has to be crossed\n * \\@default null\n * @type {?}\n */\nStockChartAxisDirective.prototype.crossesInAxis;\n/**\n * Options to customize the crosshair ToolTip.\n * @type {?}\n */\nStockChartAxisDirective.prototype.crosshairTooltip;\n/**\n * Description for axis and its element.\n * \\@default null\n * @type {?}\n */\nStockChartAxisDirective.prototype.description;\n/**\n * With this property, you can request axis to calculate intervals approximately equal to your specified interval.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStockChartAxisDirective.prototype.desiredIntervals;\n/**\n * Specifies the position of labels at the edge of the axis.They are, \n * * None: No action will be performed. \n * * Hide: Edge label will be hidden. \n * * Shift: Shifts the edge labels.\n * \\@default 'None'\n * @type {?}\n */\nStockChartAxisDirective.prototype.edgeLabelPlacement;\n/**\n * If set to true, axis interval will be calculated automatically with respect to the zoomed range.\n * \\@default true\n * @type {?}\n */\nStockChartAxisDirective.prototype.enableAutoIntervalOnZooming;\n/**\n * Specifies the Trim property for an axis.\n * \\@default false\n * @type {?}\n */\nStockChartAxisDirective.prototype.enableTrim;\n/**\n * Specifies the interval for an axis.\n * \\@default null\n * \\@aspdefaultvalueignore\n * @type {?}\n */\nStockChartAxisDirective.prototype.interval;\n/**\n * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are, \n * * Auto: Defines the interval of the axis based on data. \n * * Years: Defines the interval of the axis in years. \n * * Months: Defines the interval of the axis in months. \n * * Days: Defines the interval of the axis in days. \n * * Hours: Defines the interval of the axis in hours. \n * * Minutes: Defines the interval of the axis in minutes.\n * \\@default 'Auto'\n * @type {?}\n */\nStockChartAxisDirective.prototype.intervalType;\n/**\n * It specifies whether the axis to be rendered in inversed manner or not.\n * \\@default false\n * @type {?}\n */\nStockChartAxisDirective.prototype.isInversed;\n/**\n * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc. \n * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.\n * \\@default ''\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelFormat;\n/**\n * Specifies the actions like `Hide`, `Rotate45`, and `Rotate90` when the axis labels intersect with each other.They are, \n * * None: Shows all the labels. \n * * Hide: Hides the label when it intersects. \n * * Rotate45: Rotates the label to 45 degree when it intersects. \n * * Rotate90: Rotates the label to 90 degree when it intersects.\n * \\@default Hide\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelIntersectAction;\n/**\n * Specifies the placement of a label for category axis. They are, \n * * betweenTicks: Renders the label between the ticks. \n * * onTicks: Renders the label on the ticks.\n * \\@default 'BetweenTicks'\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelPlacement;\n/**\n * Specifies the placement of a labels to the axis line. They are, \n * * inside: Renders the labels inside to the axis line. \n * * outside: Renders the labels outside to the axis line.\n * \\@default 'Outside'\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelPosition;\n/**\n * The angle to which the axis label gets rotated.\n * \\@default 0\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelRotation;\n/**\n * Options to customize the axis label.\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelStyle;\n/**\n * Options for customizing axis lines.\n * @type {?}\n */\nStockChartAxisDirective.prototype.lineStyle;\n/**\n * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.\n * \\@default 10\n * @type {?}\n */\nStockChartAxisDirective.prototype.logBase;\n/**\n * Options for customizing major grid lines.\n * @type {?}\n */\nStockChartAxisDirective.prototype.majorGridLines;\n/**\n * Options for customizing major tick lines.\n * @type {?}\n */\nStockChartAxisDirective.prototype.majorTickLines;\n/**\n * Specifies the maximum range of an axis.\n * \\@default null\n * @type {?}\n */\nStockChartAxisDirective.prototype.maximum;\n/**\n * Specifies the maximum width of an axis label.\n * \\@default 34.\n * @type {?}\n */\nStockChartAxisDirective.prototype.maximumLabelWidth;\n/**\n * The maximum number of label count per 100 pixels with respect to the axis length.\n * \\@default 3\n * @type {?}\n */\nStockChartAxisDirective.prototype.maximumLabels;\n/**\n * Specifies the minimum range of an axis.\n * \\@default null\n * @type {?}\n */\nStockChartAxisDirective.prototype.minimum;\n/**\n * Options for customizing minor grid lines.\n * @type {?}\n */\nStockChartAxisDirective.prototype.minorGridLines;\n/**\n * Options for customizing minor tick lines.\n * @type {?}\n */\nStockChartAxisDirective.prototype.minorTickLines;\n/**\n * Specifies the number of minor ticks per interval.\n * \\@default 0\n * @type {?}\n */\nStockChartAxisDirective.prototype.minorTicksPerInterval;\n/**\n * Unique identifier of an axis. \n * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.\n * \\@default ''\n * @type {?}\n */\nStockChartAxisDirective.prototype.name;\n/**\n * If set to true, the axis will render at the opposite side of its default position.\n * \\@default false\n * @type {?}\n */\nStockChartAxisDirective.prototype.opposedPosition;\n/**\n * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line\n * \\@default true\n * @type {?}\n */\nStockChartAxisDirective.prototype.placeNextToAxisLine;\n/**\n * Left and right padding for the plot area in pixels.\n * \\@default 0\n * @type {?}\n */\nStockChartAxisDirective.prototype.plotOffset;\n/**\n * Specifies the padding for the axis range in terms of interval.They are, \n * * none: Padding cannot be applied to the axis. \n * * normal: Padding is applied to the axis based on the range calculation. \n * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range. \n * * round: Axis range is rounded to the nearest possible value divided by the interval.\n * \\@default 'Auto'\n * @type {?}\n */\nStockChartAxisDirective.prototype.rangePadding;\n/**\n * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`. \n * \n * \\@default 0\n * @type {?}\n */\nStockChartAxisDirective.prototype.rowIndex;\n/**\n * Specifies the skeleton format in which the dateTime format will process.\n * \\@default ''\n * @type {?}\n */\nStockChartAxisDirective.prototype.skeleton;\n/**\n * It specifies the type of format to be used in dateTime format process.\n * \\@default 'DateTime'\n * @type {?}\n */\nStockChartAxisDirective.prototype.skeletonType;\n/**\n * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.\n * \\@default 1\n * @type {?}\n */\nStockChartAxisDirective.prototype.span;\n/**\n * The start angle for the series.\n * \\@default 0\n * @type {?}\n */\nStockChartAxisDirective.prototype.startAngle;\n/**\n * Specifies the stripLine collection for the axis\n * @type {?}\n */\nStockChartAxisDirective.prototype.stripLines;\n/**\n * TabIndex value for the axis.\n * \\@default 2\n * @type {?}\n */\nStockChartAxisDirective.prototype.tabIndex;\n/**\n * Specifies the placement of a ticks to the axis line. They are, \n * * inside: Renders the ticks inside to the axis line. \n * * outside: Renders the ticks outside to the axis line.\n * \\@default 'Outside'\n * @type {?}\n */\nStockChartAxisDirective.prototype.tickPosition;\n/**\n * Specifies the title of an axis.\n * \\@default ''\n * @type {?}\n */\nStockChartAxisDirective.prototype.title;\n/**\n * Options for customizing the axis title.\n * @type {?}\n */\nStockChartAxisDirective.prototype.titleStyle;\n/**\n * Specifies the type of data the axis is handling. \n * * Double:  Renders a numeric axis. \n * * DateTime: Renders a dateTime axis. \n * * Category: Renders a category axis. \n * * Logarithmic: Renders a log axis.\n * \\@default 'Double'\n * \\@blazortype Syncfusion.EJ2.Blazor.Charts.ValueType\n * \\@isenumeration true\n * @type {?}\n */\nStockChartAxisDirective.prototype.valueType;\n/**\n * If set to true, axis label will be visible.\n * \\@default true\n * @type {?}\n */\nStockChartAxisDirective.prototype.visible;\n/**\n * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.\n * \\@default 1\n * @type {?}\n */\nStockChartAxisDirective.prototype.zoomFactor;\n/**\n * Position of the zoomed axis. Value ranges from 0 to 1.\n * \\@default 0\n * @type {?}\n */\nStockChartAxisDirective.prototype.zoomPosition;\n/** @type {?} */\nStockChartAxisDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartAxis Array Directive\n */\nexport class StockChartAxesDirective extends ArrayBase<StockChartAxesDirective> {\nconstructor() {\n        super('axes');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-axes',\n    queries: {\n        children: new ContentChildren(StockChartAxisDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartAxesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartAxesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartAxesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['border', 'height'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Row Directive\n * ```html\n * <e-rows><e-row></e-row><e-rows>\n * ```\n */\nexport class StockChartRowDirective extends ComplexBase<StockChartRowDirective> {\npublic directivePropList: any;\n/**\n * Options to customize the border of the rows.\n */\npublic border: any;\n/**\n * The height of the row as a string accept input both as '100px' and '100%'. \n * If specified as '100%, row renders to the full height of its chart.\n * \\@default '100%'\n */\npublic height: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-rows>e-striplines>e-stockchart-row',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartRowDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartRowDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartRowDirective.ctorParameters;\n/** @type {?} */\nStockChartRowDirective.prototype.directivePropList;\n/**\n * Options to customize the border of the rows.\n * @type {?}\n */\nStockChartRowDirective.prototype.border;\n/**\n * The height of the row as a string accept input both as '100px' and '100%'. \n * If specified as '100%, row renders to the full height of its chart.\n * \\@default '100%'\n * @type {?}\n */\nStockChartRowDirective.prototype.height;\n/** @type {?} */\nStockChartRowDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartRow Array Directive\n */\nexport class StockChartRowsDirective extends ArrayBase<StockChartRowsDirective> {\nconstructor() {\n        super('rows');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-rows',\n    queries: {\n        children: new ContentChildren(StockChartRowDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartRowsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartRowsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartRowsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['content', 'coordinateUnits', 'description', 'horizontalAlignment', 'region', 'verticalAlignment', 'x', 'xAxisName', 'y', 'yAxisName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Annotation Directive\n * ```html\n * <e-stockchart-annotations><e-stockchart-annotation></e-stockchart-annotation><e-stockchart-annotations>\n * ```\n */\nexport class StockChartAnnotationDirective extends ComplexBase<StockChartAnnotationDirective> {\npublic directivePropList: any;\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n * \\@default 'Pixel'\n */\npublic coordinateUnits: any;\n/**\n * Information about annotation for assistive technology.\n * \\@default null\n */\npublic description: any;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as left side. \n * * Far - Align the annotation element as right side. \n * * Center - Align the annotation element as mid point.\n * \\@default 'Center'\n */\npublic horizontalAlignment: any;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n * \\@default 'Chart'\n */\npublic region: any;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n * \\@default 'Middle'\n */\npublic verticalAlignment: any;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n */\npublic x: any;\n/**\n * The name of horizontal axis associated with the annotation. \n * It requires `axes` of chart.\n * \\@default null\n */\npublic xAxisName: any;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n */\npublic y: any;\n/**\n * The name of vertical axis associated with the annotation. \n * It requires `axes` of chart.\n * \\@default null\n */\npublic yAxisName: any;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n * \\@default null\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart-annotations>e-stockchart-annotation',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction StockChartAnnotationDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartAnnotationDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartAnnotationDirective.ctorParameters;\n/** @type {?} */\nStockChartAnnotationDirective.propDecorators;\n/** @type {?} */\nStockChartAnnotationDirective.prototype.directivePropList;\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n * \\@default 'Pixel'\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.coordinateUnits;\n/**\n * Information about annotation for assistive technology.\n * \\@default null\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.description;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as left side. \n * * Far - Align the annotation element as right side. \n * * Center - Align the annotation element as mid point.\n * \\@default 'Center'\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.horizontalAlignment;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n * \\@default 'Chart'\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.region;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n * \\@default 'Middle'\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.verticalAlignment;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.x;\n/**\n * The name of horizontal axis associated with the annotation. \n * It requires `axes` of chart.\n * \\@default null\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.xAxisName;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * \\@default '0'\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.y;\n/**\n * The name of vertical axis associated with the annotation. \n * It requires `axes` of chart.\n * \\@default null\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.yAxisName;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n * \\@default null\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.content;\n/** @type {?} */\nStockChartAnnotationDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartAnnotation Array Directive\n */\nexport class StockChartAnnotationsDirective extends ArrayBase<StockChartAnnotationsDirective> {\nconstructor() {\n        super('annotations');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-annotations',\n    queries: {\n        children: new ContentChildren(StockChartAnnotationDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartAnnotationsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartAnnotationsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartAnnotationsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['point', 'series'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Selected Data Directive\n * ```html\n * <e-selecteddataindexes><e-selecteddataindex></e-selecteddataindex><e-selecteddataindexes>\n * ```\n */\nexport class StockChartSelectedDataIndexDirective extends ComplexBase<StockChartSelectedDataIndexDirective> {\npublic directivePropList: any;\n/**\n * Specifies index of point\n * \\@default 0\n * \\@asptype int\n */\npublic point: any;\n/**\n * Specifies index of series\n * \\@default 0\n * \\@asptype int\n */\npublic series: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart-selectedDataIndexes>e-stockchart-selectedDataIndex',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartSelectedDataIndexDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartSelectedDataIndexDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartSelectedDataIndexDirective.ctorParameters;\n/** @type {?} */\nStockChartSelectedDataIndexDirective.prototype.directivePropList;\n/**\n * Specifies index of point\n * \\@default 0\n * \\@asptype int\n * @type {?}\n */\nStockChartSelectedDataIndexDirective.prototype.point;\n/**\n * Specifies index of series\n * \\@default 0\n * \\@asptype int\n * @type {?}\n */\nStockChartSelectedDataIndexDirective.prototype.series;\n/** @type {?} */\nStockChartSelectedDataIndexDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartSelectedDataIndex Array Directive\n */\nexport class StockChartSelectedDataIndexesDirective extends ArrayBase<StockChartSelectedDataIndexesDirective> {\nconstructor() {\n        super('selecteddataindexes');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-selectedDataIndexes',\n    queries: {\n        children: new ContentChildren(StockChartSelectedDataIndexDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartSelectedDataIndexesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartSelectedDataIndexesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartSelectedDataIndexesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['interval', 'intervalType', 'selected', 'text'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Indicator Directive\n * ```html\n * <e-stockchart-periods>\n * <e-stockchart-period></e-stockchart-period>\n * </e-stockchart-periods>\n * ```\n */\nexport class StockChartPeriodDirective extends ComplexBase<StockChartPeriodDirective> {\npublic directivePropList: any;\n/**\n * Count value for the button\n * \\@default 1\n */\npublic interval: any;\n/**\n * IntervalType of button\n * \\@default 'Years'\n */\npublic intervalType: any;\n/**\n * To select the default period\n * \\@default false\n */\npublic selected: any;\n/**\n * Text to be displayed on the button\n * \\@default null\n */\npublic text: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-indicators>e-stockchart-period',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartPeriodDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartPeriodDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartPeriodDirective.ctorParameters;\n/** @type {?} */\nStockChartPeriodDirective.prototype.directivePropList;\n/**\n * Count value for the button\n * \\@default 1\n * @type {?}\n */\nStockChartPeriodDirective.prototype.interval;\n/**\n * IntervalType of button\n * \\@default 'Years'\n * @type {?}\n */\nStockChartPeriodDirective.prototype.intervalType;\n/**\n * To select the default period\n * \\@default false\n * @type {?}\n */\nStockChartPeriodDirective.prototype.selected;\n/**\n * Text to be displayed on the button\n * \\@default null\n * @type {?}\n */\nStockChartPeriodDirective.prototype.text;\n/** @type {?} */\nStockChartPeriodDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartPeriod Array Directive\n */\nexport class StockChartPeriodsDirective extends ArrayBase<StockChartPeriodsDirective> {\nconstructor() {\n        super('periods');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-periods',\n    queries: {\n        children: new ContentChildren(StockChartPeriodDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartPeriodsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartPeriodsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartPeriodsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['background', 'border', 'date', 'description', 'placeAt', 'seriesIndexes', 'showOnSeries', 'text', 'textStyle', 'type'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * StockEvents\n * ```html\n * <e-stockchart-stockevents>\n * <e-stockchart-stockevent></e-stockchart-stockevent>\n * </e-stockchart-stockevents>\n * ```\n */\nexport class StockEventDirective extends ComplexBase<StockEventDirective> {\npublic directivePropList: any;\n/**\n * Specifies type of stock events \n * * Circle \n * * Square \n * * Flag \n * * Text \n * * Sign \n * * Triangle \n * * InvertedTriangle \n * * ArrowUp \n * * ArrowDown \n * * ArrowLeft \n * * ArrowRight\n * \\@default 'Circle'\n */\npublic type: any;\n/**\n * The background of the stock event that accepts value in hex and rgba as a valid CSS color string.\n * \\@default 'transparent'\n */\npublic background: any;\n/**\n * Options to customize the border of the stock events.\n */\npublic border: any;\n/**\n * Date value of stock event in which stock event shows.\n */\npublic date: any;\n/**\n * Specifies the description for the chart which renders in tooltip for stock event.\n */\npublic description: any;\n/**\n * Corresponding values in which stock event placed. \n * * Close \n * * Open \n * * High \n * * Close\n * \\@default 'close'\n */\npublic placeAt: any;\n/**\n * To render stock events in particular series. \n * By default stock events will render for all series.\n * \\@default []\n */\npublic seriesIndexes: any;\n/**\n * Enables the stock events to be render on series. If it disabled, stock event rendered on primaryXAxis.\n * \\@default true\n */\npublic showOnSeries: any;\n/**\n * Specifies the text for the stock chart text.\n */\npublic text: any;\n/**\n * Options to customize the styles for stock events text.\n */\npublic textStyle: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-indicators>e-stockchart-stockevent',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockEventDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockEventDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockEventDirective.ctorParameters;\n/** @type {?} */\nStockEventDirective.prototype.directivePropList;\n/**\n * Specifies type of stock events \n * * Circle \n * * Square \n * * Flag \n * * Text \n * * Sign \n * * Triangle \n * * InvertedTriangle \n * * ArrowUp \n * * ArrowDown \n * * ArrowLeft \n * * ArrowRight\n * \\@default 'Circle'\n * @type {?}\n */\nStockEventDirective.prototype.type;\n/**\n * The background of the stock event that accepts value in hex and rgba as a valid CSS color string.\n * \\@default 'transparent'\n * @type {?}\n */\nStockEventDirective.prototype.background;\n/**\n * Options to customize the border of the stock events.\n * @type {?}\n */\nStockEventDirective.prototype.border;\n/**\n * Date value of stock event in which stock event shows.\n * @type {?}\n */\nStockEventDirective.prototype.date;\n/**\n * Specifies the description for the chart which renders in tooltip for stock event.\n * @type {?}\n */\nStockEventDirective.prototype.description;\n/**\n * Corresponding values in which stock event placed. \n * * Close \n * * Open \n * * High \n * * Close\n * \\@default 'close'\n * @type {?}\n */\nStockEventDirective.prototype.placeAt;\n/**\n * To render stock events in particular series. \n * By default stock events will render for all series.\n * \\@default []\n * @type {?}\n */\nStockEventDirective.prototype.seriesIndexes;\n/**\n * Enables the stock events to be render on series. If it disabled, stock event rendered on primaryXAxis.\n * \\@default true\n * @type {?}\n */\nStockEventDirective.prototype.showOnSeries;\n/**\n * Specifies the text for the stock chart text.\n * @type {?}\n */\nStockEventDirective.prototype.text;\n/**\n * Options to customize the styles for stock events text.\n * @type {?}\n */\nStockEventDirective.prototype.textStyle;\n/** @type {?} */\nStockEventDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockEvent Array Directive\n */\nexport class StockEventsDirective extends ArrayBase<StockEventsDirective> {\nconstructor() {\n        super('stockevents');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-stockevents',\n    queries: {\n        children: new ContentChildren(StockEventDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockEventsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockEventsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockEventsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'bandColor', 'close', 'dPeriod', 'dashArray', 'dataSource', 'fastPeriod', 'field', 'fill', 'high', 'kPeriod', 'low', 'lowerLine', 'macdLine', 'macdNegativeColor', 'macdPositiveColor', 'macdType', 'open', 'overBought', 'overSold', 'period', 'periodLine', 'pointColorMapping', 'query', 'seriesName', 'showZones', 'slowPeriod', 'standardDeviation', 'type', 'upperLine', 'volume', 'width', 'xAxisName', 'xName', 'yAxisName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Indicator Directive\n * ```html\n * <e-stockchart-indicators>\n * <e-stockchart-indicator></e-stockchart-indicator>\n * </e-stockchart-indicators>\n * ```\n */\nexport class StockChartIndicatorDirective extends ComplexBase<StockChartIndicatorDirective> {\npublic directivePropList: any;\n/**\n * Defines the type of the technical indicator\n * \\@default 'Sma'\n */\npublic type: any;\n/**\n * Options to customizing animation for the series.\n */\npublic animation: any;\n/**\n * Options for customizing the BollingerBand in the indicator.\n * \\@default 'rgba(211,211,211,0.25)'\n */\npublic bandColor: any;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic close: any;\n/**\n * Defines the period, the price changes over which will define the %D value in stochastic indicators\n * \\@default 3\n */\npublic dPeriod: any;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n */\npublic dashArray: any;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * \\@default ''\n */\npublic dataSource: any;\n/**\n * Sets the fast period to define the Macd line\n * \\@default 26\n */\npublic fastPeriod: any;\n/**\n * Defines the field to compare the current value with previous values\n * \\@default 'Close'\n */\npublic field: any;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n */\npublic fill: any;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic high: any;\n/**\n * Defines the look back period, the price changes over which will define the %K value in stochastic indicators\n * \\@default 14\n */\npublic kPeriod: any;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic low: any;\n/**\n * Defines the appearance of lower line in technical indicators\n */\npublic lowerLine: any;\n/**\n * Defines the appearance of the the MacdLine of Macd indicator\n * \\@default { color: '#ff9933', width: 2 }\n */\npublic macdLine: any;\n/**\n * Defines the color of the negative bars in Macd indicators\n * \\@default '#e74c3d'\n */\npublic macdNegativeColor: any;\n/**\n * Defines the color of the positive bars in Macd indicators\n * \\@default '#2ecd71'\n */\npublic macdPositiveColor: any;\n/**\n * Defines the type of the Macd indicator.\n * \\@default 'Both'\n */\npublic macdType: any;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic open: any;\n/**\n * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators\n * \\@default 80\n */\npublic overBought: any;\n/**\n * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators\n * \\@default 20\n */\npublic overSold: any;\n/**\n * Defines the period, the price changes over which will be considered to predict the trend\n * \\@default 14\n */\npublic period: any;\n/**\n * Defines the appearance of period line in technical indicators\n */\npublic periodLine: any;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n */\npublic pointColorMapping: any;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * \\@default null\n */\npublic query: any;\n/**\n * Defines the name of the series, the data of which has to be depicted as indicator\n * \\@default ''\n */\npublic seriesName: any;\n/**\n * Enables/Disables the over-bought and over-sold regions\n * \\@default true\n */\npublic showZones: any;\n/**\n * Sets the slow period to define the Macd line\n * \\@default 12\n */\npublic slowPeriod: any;\n/**\n * Sets the standard deviation values that helps to define the upper and lower bollinger bands\n * \\@default 2\n */\npublic standardDeviation: any;\n/**\n * Defines the appearance of the upper line in technical indicators\n */\npublic upperLine: any;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * \\@default ''\n */\npublic volume: any;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n */\npublic width: any;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n */\npublic xAxisName: any;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * \\@default ''\n */\npublic xName: any;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n */\npublic yAxisName: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-indicators>e-stockchart-indicator',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartIndicatorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartIndicatorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartIndicatorDirective.ctorParameters;\n/** @type {?} */\nStockChartIndicatorDirective.prototype.directivePropList;\n/**\n * Defines the type of the technical indicator\n * \\@default 'Sma'\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.type;\n/**\n * Options to customizing animation for the series.\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.animation;\n/**\n * Options for customizing the BollingerBand in the indicator.\n * \\@default 'rgba(211,211,211,0.25)'\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.bandColor;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.close;\n/**\n * Defines the period, the price changes over which will define the %D value in stochastic indicators\n * \\@default 3\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.dPeriod;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * \\@default '0'\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.dashArray;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.dataSource;\n/**\n * Sets the fast period to define the Macd line\n * \\@default 26\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.fastPeriod;\n/**\n * Defines the field to compare the current value with previous values\n * \\@default 'Close'\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.field;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * \\@default null\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.fill;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.high;\n/**\n * Defines the look back period, the price changes over which will define the %K value in stochastic indicators\n * \\@default 14\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.kPeriod;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.low;\n/**\n * Defines the appearance of lower line in technical indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.lowerLine;\n/**\n * Defines the appearance of the the MacdLine of Macd indicator\n * \\@default { color: '#ff9933', width: 2 }\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.macdLine;\n/**\n * Defines the color of the negative bars in Macd indicators\n * \\@default '#e74c3d'\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.macdNegativeColor;\n/**\n * Defines the color of the positive bars in Macd indicators\n * \\@default '#2ecd71'\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.macdPositiveColor;\n/**\n * Defines the type of the Macd indicator.\n * \\@default 'Both'\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.macdType;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.open;\n/**\n * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators\n * \\@default 80\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.overBought;\n/**\n * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators\n * \\@default 20\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.overSold;\n/**\n * Defines the period, the price changes over which will be considered to predict the trend\n * \\@default 14\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.period;\n/**\n * Defines the appearance of period line in technical indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.periodLine;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.pointColorMapping;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * \\@default null\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.query;\n/**\n * Defines the name of the series, the data of which has to be depicted as indicator\n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.seriesName;\n/**\n * Enables/Disables the over-bought and over-sold regions\n * \\@default true\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.showZones;\n/**\n * Sets the slow period to define the Macd line\n * \\@default 12\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.slowPeriod;\n/**\n * Sets the standard deviation values that helps to define the upper and lower bollinger bands\n * \\@default 2\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.standardDeviation;\n/**\n * Defines the appearance of the upper line in technical indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.upperLine;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.volume;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * \\@default 1\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.width;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.xAxisName;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * \\@default ''\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.xName;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * \\@default null\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.yAxisName;\n/** @type {?} */\nStockChartIndicatorDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartIndicator Array Directive\n */\nexport class StockChartIndicatorsDirective extends ArrayBase<StockChartIndicatorsDirective> {\nconstructor() {\n        super('indicators');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-indicators',\n    queries: {\n        children: new ContentChildren(StockChartIndicatorDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartIndicatorsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartIndicatorsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartIndicatorsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { StockChart } from '@syncfusion/ej2-charts';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { StockChartSeriesCollectionDirective } from './series.directive';\nimport { StockChartAxesDirective } from './axes.directive';\nimport { StockChartRowsDirective } from './rows.directive';\nimport { StockChartAnnotationsDirective } from './annotations.directive';\nimport { StockChartSelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { StockChartPeriodsDirective } from './periods.directive';\nimport { StockEventsDirective } from './stockevents.directive';\nimport { StockChartIndicatorsDirective } from './indicators.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['annotations','axes','background','border','chartArea','crosshair','dataSource','enableCustomRange','enablePeriodSelector','enablePersistence','enableRtl','enableSelector','exportType','height','indicatorType','indicators','isMultiSelect','isSelect','isTransposed','legendSettings','locale','margin','periods','primaryXAxis','primaryYAxis','rows','selectedDataIndexes','selectionMode','series','seriesType','stockEvents','theme','title','titleStyle','tooltip','trendlineType','width','zoomSettings'];\nexport const /** @type {?} */ outputs: string[] = ['axisLabelRender','legendClick','legendRender','load','loaded','onZooming','pointClick','pointMove','rangeChange','selectorRender','seriesRender','stockChartMouseClick','stockChartMouseDown','stockChartMouseLeave','stockChartMouseMove','stockChartMouseUp','stockEventRender','tooltipRender','dataSourceChange'];\nexport const /** @type {?} */ twoWays: string[] = ['dataSource'];\n/**\n * Stock Chart Component\n * ```html\n * <ejs-stockchart></ejs-stockchart>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class StockChartComponent extends StockChart implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childSeries: QueryList<StockChartSeriesCollectionDirective>;\npublic childAxes: QueryList<StockChartAxesDirective>;\npublic childRows: QueryList<StockChartRowsDirective>;\npublic childAnnotations: QueryList<StockChartAnnotationsDirective>;\npublic childSelectedDataIndexes: QueryList<StockChartSelectedDataIndexesDirective>;\npublic childPeriods: QueryList<StockChartPeriodsDirective>;\npublic childStockEvents: QueryList<StockEventsDirective>;\npublic childIndicators: QueryList<StockChartIndicatorsDirective>;\npublic tags: string[] = ['series', 'axes', 'rows', 'annotations', 'selectedDataIndexes', 'periods', 'stockEvents', 'indicators'];\npublic dataSourceChange: any;\n    \n    @Template()\npublic tooltip_template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsColumnSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSplineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSplineAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStripLine');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRangeAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsCrosshair');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDateTime');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsZoom');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDataLabel');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSelection');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsChartAnnotation');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsHiloSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsHiloOpenCloseSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsCandleSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsEmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationDistributionIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMacdIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAtrIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRsiIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMomentumIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStochasticIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsBollingerBands');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTrendlines');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRangeTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStockLegend');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childSeries;\n        if (this.childAxes) {\n                    this.tagObjects[1].instance = /** @type {?} */(( this.childAxes as any));\n                }\n        if (this.childRows) {\n                    this.tagObjects[2].instance = /** @type {?} */(( this.childRows as any));\n                }\n        if (this.childAnnotations) {\n                    this.tagObjects[3].instance = /** @type {?} */(( this.childAnnotations as any));\n                }\n        if (this.childSelectedDataIndexes) {\n                    this.tagObjects[4].instance = /** @type {?} */(( this.childSelectedDataIndexes as any));\n                }\n        if (this.childPeriods) {\n                    this.tagObjects[5].instance = /** @type {?} */(( this.childPeriods as any));\n                }\n        if (this.childStockEvents) {\n                    this.tagObjects[6].instance = /** @type {?} */(( this.childStockEvents as any));\n                }\n        if (this.childIndicators) {\n                    this.tagObjects[7].instance = /** @type {?} */(( this.childIndicators as any));\n                }\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-stockchart',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childSeries: new ContentChild(StockChartSeriesCollectionDirective), \n        childAxes: new ContentChild(StockChartAxesDirective), \n        childRows: new ContentChild(StockChartRowsDirective), \n        childAnnotations: new ContentChild(StockChartAnnotationsDirective), \n        childSelectedDataIndexes: new ContentChild(StockChartSelectedDataIndexesDirective), \n        childPeriods: new ContentChild(StockChartPeriodsDirective), \n        childStockEvents: new ContentChild(StockEventsDirective), \n        childIndicators: new ContentChild(StockChartIndicatorsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate', ] },],\n};\n}\n\nfunction StockChartComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartComponent.ctorParameters;\n/** @type {?} */\nStockChartComponent.propDecorators;\n/** @type {?} */\nStockChartComponent.prototype.context;\n/** @type {?} */\nStockChartComponent.prototype.tagObjects;\n/** @type {?} */\nStockChartComponent.prototype.childSeries;\n/** @type {?} */\nStockChartComponent.prototype.childAxes;\n/** @type {?} */\nStockChartComponent.prototype.childRows;\n/** @type {?} */\nStockChartComponent.prototype.childAnnotations;\n/** @type {?} */\nStockChartComponent.prototype.childSelectedDataIndexes;\n/** @type {?} */\nStockChartComponent.prototype.childPeriods;\n/** @type {?} */\nStockChartComponent.prototype.childStockEvents;\n/** @type {?} */\nStockChartComponent.prototype.childIndicators;\n/** @type {?} */\nStockChartComponent.prototype.tags;\n/** @type {?} */\nStockChartComponent.prototype.dataSourceChange;\n/** @type {?} */\nStockChartComponent.prototype.tooltip_template;\n/** @type {?} */\nStockChartComponent.prototype.registerEvents;\n/** @type {?} */\nStockChartComponent.prototype.addTwoWay;\n/** @type {?} */\nStockChartComponent.prototype.ngEle;\n/** @type {?} */\nStockChartComponent.prototype.srenderer;\n/** @type {?} */\nStockChartComponent.prototype.viewContainerRef;\n/** @type {?} */\nStockChartComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockChartTrendlineDirective, StockChartTrendlinesDirective } from './trendlines.directive';\nimport { StockChartSeriesDirective, StockChartSeriesCollectionDirective } from './series.directive';\nimport { StockChartAxisDirective, StockChartAxesDirective } from './axes.directive';\nimport { StockChartRowDirective, StockChartRowsDirective } from './rows.directive';\nimport { StockChartAnnotationDirective, StockChartAnnotationsDirective } from './annotations.directive';\nimport { StockChartSelectedDataIndexDirective, StockChartSelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { StockChartPeriodDirective, StockChartPeriodsDirective } from './periods.directive';\nimport { StockEventDirective, StockEventsDirective } from './stockevents.directive';\nimport { StockChartIndicatorDirective, StockChartIndicatorsDirective } from './indicators.directive';\nimport { StockChartComponent } from './stockchart.component';\n/**\n * NgModule definition for the StockChart component.\n */\nexport class StockChartModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        StockChartComponent,\n        StockChartTrendlineDirective,\n        StockChartTrendlinesDirective,\n        StockChartSeriesDirective,\n        StockChartSeriesCollectionDirective,\n        StockChartAxisDirective,\n        StockChartAxesDirective,\n        StockChartRowDirective,\n        StockChartRowsDirective,\n        StockChartAnnotationDirective,\n        StockChartAnnotationsDirective,\n        StockChartSelectedDataIndexDirective,\n        StockChartSelectedDataIndexesDirective,\n        StockChartPeriodDirective,\n        StockChartPeriodsDirective,\n        StockEventDirective,\n        StockEventsDirective,\n        StockChartIndicatorDirective,\n        StockChartIndicatorsDirective\n    ],\n    exports: [\n        StockChartComponent,\n        StockChartTrendlineDirective,\n        StockChartTrendlinesDirective,\n        StockChartSeriesDirective,\n        StockChartSeriesCollectionDirective,\n        StockChartAxisDirective,\n        StockChartAxesDirective,\n        StockChartRowDirective,\n        StockChartRowsDirective,\n        StockChartAnnotationDirective,\n        StockChartAnnotationsDirective,\n        StockChartSelectedDataIndexDirective,\n        StockChartSelectedDataIndexesDirective,\n        StockChartPeriodDirective,\n        StockChartPeriodsDirective,\n        StockEventDirective,\n        StockEventsDirective,\n        StockChartIndicatorDirective,\n        StockChartIndicatorsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockChartTrendlineDirective, StockChartTrendlinesDirective } from './trendlines.directive';\nimport { StockChartSeriesDirective, StockChartSeriesCollectionDirective } from './series.directive';\nimport { StockChartAxisDirective, StockChartAxesDirective } from './axes.directive';\nimport { StockChartRowDirective, StockChartRowsDirective } from './rows.directive';\nimport { StockChartAnnotationDirective, StockChartAnnotationsDirective } from './annotations.directive';\nimport { StockChartSelectedDataIndexDirective, StockChartSelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { StockChartPeriodDirective, StockChartPeriodsDirective } from './periods.directive';\nimport { StockEventDirective, StockEventsDirective } from './stockevents.directive';\nimport { StockChartIndicatorDirective, StockChartIndicatorsDirective } from './indicators.directive';\nimport { StockChartComponent } from './stockchart.component';\nimport { StockChartModule } from './stockchart.module';\nimport {StockLegend} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ StockLegendService: ValueProvider = { provide: 'ChartsStockLegend', useValue: StockLegend};\n/**\n * NgModule definition for the StockChart component with providers.\n */\nexport class StockChartAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, StockChartModule],\n    exports: [\n        StockChartModule\n    ],\n    providers:[\n        StockLegendService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['color', 'end', 'index', 'legendImageUrl', 'name', 'opacity', 'shape'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * BulletRange Directive\n * ```html\n * <e-bullet-range-collection>\n * <e-bullet-range></e-bullet-range>\n * </e-bullet-range-collection>\n * ```\n */\nexport class BulletRangeDirective extends ComplexBase<BulletRangeDirective> {\npublic directivePropList: any;\n/**\n * Default value for qualitative range Color\n * \\@default null\n */\npublic color: any;\n/**\n * Default value for qualitative range end value\n * \\@default null\n */\npublic end: any;\n/**\n * Default value for qualitative range Color\n * \\@default null\n */\npublic index: any;\n/**\n * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.\n * \\@default ''\n */\npublic legendImageUrl: any;\n/**\n * Default value for qualitative range name\n * \\@default null\n */\npublic name: any;\n/**\n * Range opacity\n * \\@default 1\n */\npublic opacity: any;\n/**\n * The shape of the legend. Each ranges has its own legend shape. They are, \n * * Circle \n * * Rectangle \n * * Triangle \n * * Diamond \n * * Cross \n * * HorizontalLine \n * * VerticalLine \n * * Pentagon \n * * InvertedTriangle \n * * SeriesType \n * * Image\n * \\@default 'Rectangle'\n */\npublic shape: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-bullet-range-collection>e-bullet-range',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction BulletRangeDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nBulletRangeDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBulletRangeDirective.ctorParameters;\n/** @type {?} */\nBulletRangeDirective.prototype.directivePropList;\n/**\n * Default value for qualitative range Color\n * \\@default null\n * @type {?}\n */\nBulletRangeDirective.prototype.color;\n/**\n * Default value for qualitative range end value\n * \\@default null\n * @type {?}\n */\nBulletRangeDirective.prototype.end;\n/**\n * Default value for qualitative range Color\n * \\@default null\n * @type {?}\n */\nBulletRangeDirective.prototype.index;\n/**\n * The URL for the Image that is to be displayed as a Legend icon.  It requires  `legendShape` value to be an `Image`.\n * \\@default ''\n * @type {?}\n */\nBulletRangeDirective.prototype.legendImageUrl;\n/**\n * Default value for qualitative range name\n * \\@default null\n * @type {?}\n */\nBulletRangeDirective.prototype.name;\n/**\n * Range opacity\n * \\@default 1\n * @type {?}\n */\nBulletRangeDirective.prototype.opacity;\n/**\n * The shape of the legend. Each ranges has its own legend shape. They are, \n * * Circle \n * * Rectangle \n * * Triangle \n * * Diamond \n * * Cross \n * * HorizontalLine \n * * VerticalLine \n * * Pentagon \n * * InvertedTriangle \n * * SeriesType \n * * Image\n * \\@default 'Rectangle'\n * @type {?}\n */\nBulletRangeDirective.prototype.shape;\n/** @type {?} */\nBulletRangeDirective.prototype.viewContainerRef;\n}\n\n/**\n * BulletRange Array Directive\n */\nexport class BulletRangeCollectionDirective extends ArrayBase<BulletRangeCollectionDirective> {\nconstructor() {\n        super('ranges');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-bulletchart>e-bullet-range-collection',\n    queries: {\n        children: new ContentChildren(BulletRangeDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BulletRangeCollectionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nBulletRangeCollectionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBulletRangeCollectionDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { BulletChart } from '@syncfusion/ej2-charts';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { BulletRangeCollectionDirective } from './ranges.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['animation','border','categoryField','categoryLabelStyle','dataLabel','dataSource','enableGroupSeparator','enablePersistence','enableRtl','height','interval','labelFormat','labelPosition','labelStyle','legendSettings','locale','majorTickLines','margin','maximum','minimum','minorTickLines','minorTicksPerInterval','opposedPosition','orientation','query','ranges','subtitle','subtitleStyle','tabIndex','targetColor','targetField','targetTypes','targetWidth','theme','tickPosition','title','titlePosition','titleStyle','tooltip','type','valueBorder','valueField','valueFill','valueHeight','width'];\nexport const /** @type {?} */ outputs: string[] = ['beforePrint','bulletChartMouseClick','legendRender','load','loaded','tooltipRender','dataSourceChange'];\nexport const /** @type {?} */ twoWays: string[] = ['dataSource'];\n/**\n * BulletChart Component\n * ```html\n * <ejs-bulletchart></ejs-bulletchart>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class BulletChartComponent extends BulletChart implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childRanges: QueryList<BulletRangeCollectionDirective>;\npublic tags: string[] = ['ranges'];\npublic dataSourceChange: any;\n    \n    @Template()\npublic tooltip_template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsBulletTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsBulletChartLegend');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childRanges;\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-bulletchart',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childRanges: new ContentChild(BulletRangeCollectionDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate', ] },],\n};\n}\n\nfunction BulletChartComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nBulletChartComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBulletChartComponent.ctorParameters;\n/** @type {?} */\nBulletChartComponent.propDecorators;\n/** @type {?} */\nBulletChartComponent.prototype.context;\n/** @type {?} */\nBulletChartComponent.prototype.tagObjects;\n/** @type {?} */\nBulletChartComponent.prototype.childRanges;\n/** @type {?} */\nBulletChartComponent.prototype.tags;\n/** @type {?} */\nBulletChartComponent.prototype.dataSourceChange;\n/** @type {?} */\nBulletChartComponent.prototype.tooltip_template;\n/** @type {?} */\nBulletChartComponent.prototype.registerEvents;\n/** @type {?} */\nBulletChartComponent.prototype.addTwoWay;\n/** @type {?} */\nBulletChartComponent.prototype.ngEle;\n/** @type {?} */\nBulletChartComponent.prototype.srenderer;\n/** @type {?} */\nBulletChartComponent.prototype.viewContainerRef;\n/** @type {?} */\nBulletChartComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BulletRangeDirective, BulletRangeCollectionDirective } from './ranges.directive';\nimport { BulletChartComponent } from './bulletchart.component';\n/**\n * NgModule definition for the BulletChart component.\n */\nexport class BulletChartModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        BulletChartComponent,\n        BulletRangeDirective,\n        BulletRangeCollectionDirective\n    ],\n    exports: [\n        BulletChartComponent,\n        BulletRangeDirective,\n        BulletRangeCollectionDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BulletChartModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBulletChartModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBulletChartModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BulletRangeDirective, BulletRangeCollectionDirective } from './ranges.directive';\nimport { BulletChartComponent } from './bulletchart.component';\nimport { BulletChartModule } from './bulletchart.module';\nimport {BulletTooltip, BulletChartLegend} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ BulletTooltipService: ValueProvider = { provide: 'ChartsBulletTooltip', useValue: BulletTooltip};\nexport const /** @type {?} */ BulletChartLegendService: ValueProvider = { provide: 'ChartsBulletChartLegend', useValue: BulletChartLegend};\n/**\n * NgModule definition for the BulletChart component with providers.\n */\nexport class BulletChartAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, BulletChartModule],\n    exports: [\n        BulletChartModule\n    ],\n    providers:[\n        BulletTooltipService,\n        BulletChartLegendService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BulletChartAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBulletChartAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBulletChartAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["input","outputs","TrendlineDirective","_super","viewContainerRef","_this","call","this","setValue","registerEvents","directivePropList","__extends","ComplexBase","decorators","type","Directive","args","selector","inputs","queries","ctorParameters","ViewContainerRef","TrendlinesDirective","ArrayBase","children","ContentChildren","SegmentDirective","SegmentsDirective","SeriesDirective","tags","childTrendlines","ContentChild","childSegments","propDecorators","dataLabel_template","__decorate","Template","prototype","SeriesCollectionDirective","StripLineDirective","StripLinesDirective","CategoryDirective","CategoriesDirective","MultiLevelLabelDirective","childCategories","MultiLevelLabelsDirective","AxisDirective","childStripLines","childMultiLevelLabels","AxesDirective","RowDirective","RowsDirective","ColumnDirective","ColumnsDirective","RangeColorSettingDirective","RangeColorSettingsDirective","AnnotationDirective","content","AnnotationsDirective","SelectedDataIndexDirective","SelectedDataIndexesDirective","IndicatorDirective","IndicatorsDirective","twoWays","exports","ChartComponent","ngEle","srenderer","injector","element","nativeElement","injectedModules","mod","get","indexOf","push","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","_y","_z","_0","_1","_2","_3","_4","_5","_6","_7","_8","_9","_10","_11","_12","_13","_14","_15","_16","_17","_18","_19","_20","_21","_22","_23","_24","_25","_26","_27","_28","_29","_30","_31","_32","_33","addTwoWay","context","ComponentBase","ngOnInit","ngAfterViewInit","ngOnDestroy","ngAfterContentChecked","tagObjects","instance","childSeries","childAxes","childRows","childColumns","childRangeColorSettings","childAnnotations","childSelectedDataIndexes","childIndicators","Chart","Component","template","ElementRef","Renderer2","Injector","tooltip_template","ComponentMixins","__metadata","ChartModule","NgModule","imports","CommonModule","declarations","LineSeriesService","provide","useValue","LineSeries","ScatterSeriesService","ScatterSeries","ColumnSeriesService","ColumnSeries","SplineSeriesService","SplineSeries","SplineAreaSeriesService","SplineAreaSeries","StripLineService","StripLine","AreaSeriesService","AreaSeries","ScrollBarService","ScrollBar","StepLineSeriesService","StepLineSeries","StepAreaSeriesService","StepAreaSeries","StackingColumnSeriesService","StackingColumnSeries","StackingLineSeriesService","StackingLineSeries","StackingAreaSeriesService","StackingAreaSeries","StackingStepAreaSeriesService","StackingStepAreaSeries","BarSeriesService","BarSeries","StackingBarSeriesService","StackingBarSeries","RangeColumnSeriesService","RangeColumnSeries","BubbleSeriesService","BubbleSeries","TooltipService","Tooltip","CrosshairService","Crosshair","CategoryService","Category","DateTimeService","DateTime","LogarithmicService","Logarithmic","LegendService","Legend","ZoomService","Zoom","DataLabelService","DataLabel","SelectionService","Selection","ChartAnnotationService","ChartAnnotation","HiloSeriesService","HiloSeries","HiloOpenCloseSeriesService","HiloOpenCloseSeries","WaterfallSeriesService","WaterfallSeries","RangeAreaSeriesService","RangeAreaSeries","SplineRangeAreaSeriesService","SplineRangeAreaSeries","CandleSeriesService","CandleSeries","PolarSeriesService","PolarSeries","RadarSeriesService","RadarSeries","SmaIndicatorService","SmaIndicator","TmaIndicatorService","TmaIndicator","EmaIndicatorService","EmaIndicator","AccumulationDistributionIndicatorService","AccumulationDistributionIndicator","MacdIndicatorService","MacdIndicator","AtrIndicatorService","AtrIndicator","RsiIndicatorService","RsiIndicator","MomentumIndicatorService","MomentumIndicator","StochasticIndicatorService","StochasticIndicator","BollingerBandsService","BollingerBands","BoxAndWhiskerSeriesService","BoxAndWhiskerSeries","HistogramSeriesService","HistogramSeries","ErrorBarService","ErrorBar","TrendlinesService","Trendlines","DateTimeCategoryService","DateTimeCategory","MultiColoredLineSeriesService","MultiColoredLineSeries","MultiColoredAreaSeriesService","MultiColoredAreaSeries","MultiLevelLabelService","MultiLevelLabel","ParetoSeriesService","ParetoSeries","ExportService","Export","DataEditingService","DataEditing","HighlightService","Highlight","ChartAllModule","providers","AccumulationSeriesDirective","AccumulationSeriesCollectionDirective","AccumulationAnnotationDirective","AccumulationAnnotationsDirective","AccumulationChartComponent","AccumulationChart","changeDetection","ChangeDetectionStrategy","OnPush","AccumulationChartModule","PieSeriesService","PieSeries","FunnelSeriesService","FunnelSeries","PyramidSeriesService","PyramidSeries","AccumulationTooltipService","AccumulationTooltip","AccumulationLegendService","AccumulationLegend","AccumulationSelectionService","AccumulationSelection","AccumulationDataLabelService","AccumulationDataLabel","AccumulationAnnotationService","AccumulationAnnotation","AccumulationChartAllModule","RangenavigatorSeriesDirective","RangenavigatorSeriesCollectionDirective","RangeNavigatorComponent","RangeNavigator","RangeNavigatorModule","RangeTooltipService","RangeTooltip","PeriodSelectorService","PeriodSelector","RangeNavigatorAllModule","RangeBandSettingDirective","RangeBandSettingsDirective","SparklineComponent","childRangeBandSettings","Sparkline","SparklineModule","SparklineTooltipService","SparklineTooltip","SparklineAllModule","SmithchartSeriesDirective","SmithchartSeriesCollectionDirective","SmithchartComponent","Smithchart","SmithchartModule","SmithchartLegendService","SmithchartLegend","TooltipRenderService","TooltipRender","SmithchartAllModule","StockChartTrendlineDirective","StockChartTrendlinesDirective","StockChartSeriesDirective","StockChartSeriesCollectionDirective","StockChartAxisDirective","StockChartAxesDirective","StockChartRowDirective","StockChartRowsDirective","StockChartAnnotationDirective","StockChartAnnotationsDirective","StockChartSelectedDataIndexDirective","StockChartSelectedDataIndexesDirective","StockChartPeriodDirective","StockChartPeriodsDirective","StockEventDirective","StockEventsDirective","StockChartIndicatorDirective","StockChartIndicatorsDirective","StockChartComponent","childPeriods","childStockEvents","StockChart","StockChartModule","StockLegendService","StockLegend","StockChartAllModule","BulletRangeDirective","BulletRangeCollectionDirective","BulletChartComponent","childRanges","BulletChart","BulletChartModule","BulletTooltipService","BulletTooltip","BulletChartLegendService","BulletChartLegend","BulletChartAllModule"],"mappings":"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"}
